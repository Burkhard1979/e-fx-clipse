/*
* generated by Xtext
*/
grammar InternalSvgPath;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package at.bestsolution.efxclipse.tooling.svgpath.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.bestsolution.efxclipse.tooling.svgpath.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import at.bestsolution.efxclipse.tooling.svgpath.services.SvgPathGrammarAccess;

}

@parser::members {
 
 	private SvgPathGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SvgPathGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRulesvg_path
entryRulesvg_path 
:
{ before(grammarAccess.getSvg_pathRule()); }
	 rulesvg_path
{ after(grammarAccess.getSvg_pathRule()); } 
	 EOF 
;

// Rule svg_path
rulesvg_path
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSvg_pathAccess().getMoveto_drawto_command_groupsAssignment()); }
(rule__Svg_path__Moveto_drawto_command_groupsAssignment)?
{ after(grammarAccess.getSvg_pathAccess().getMoveto_drawto_command_groupsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemoveto_drawto_command_groups
entryRulemoveto_drawto_command_groups 
:
{ before(grammarAccess.getMoveto_drawto_command_groupsRule()); }
	 rulemoveto_drawto_command_groups
{ after(grammarAccess.getMoveto_drawto_command_groupsRule()); } 
	 EOF 
;

// Rule moveto_drawto_command_groups
rulemoveto_drawto_command_groups
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMoveto_drawto_command_groupsAccess().getCommandsAssignment()); }
(rule__Moveto_drawto_command_groups__CommandsAssignment)
{ after(grammarAccess.getMoveto_drawto_command_groupsAccess().getCommandsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemoveto_drawto_command_group
entryRulemoveto_drawto_command_group 
:
{ before(grammarAccess.getMoveto_drawto_command_groupRule()); }
	 rulemoveto_drawto_command_group
{ after(grammarAccess.getMoveto_drawto_command_groupRule()); } 
	 EOF 
;

// Rule moveto_drawto_command_group
rulemoveto_drawto_command_group
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMoveto_drawto_command_groupAccess().getGroup()); }
(rule__Moveto_drawto_command_group__Group__0)
{ after(grammarAccess.getMoveto_drawto_command_groupAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemoveto
entryRulemoveto 
:
{ before(grammarAccess.getMovetoRule()); }
	 rulemoveto
{ after(grammarAccess.getMovetoRule()); } 
	 EOF 
;

// Rule moveto
rulemoveto
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMovetoAccess().getGroup()); }
(rule__Moveto__Group__0)
{ after(grammarAccess.getMovetoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulelineto_argument_sequence
entryRulelineto_argument_sequence 
:
{ before(grammarAccess.getLineto_argument_sequenceRule()); }
	 rulelineto_argument_sequence
{ after(grammarAccess.getLineto_argument_sequenceRule()); } 
	 EOF 
;

// Rule lineto_argument_sequence
rulelineto_argument_sequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLineto_argument_sequenceAccess().getGroup()); }
(rule__Lineto_argument_sequence__Group__0)
{ after(grammarAccess.getLineto_argument_sequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledrawto_commands
entryRuledrawto_commands 
:
{ before(grammarAccess.getDrawto_commandsRule()); }
	 ruledrawto_commands
{ after(grammarAccess.getDrawto_commandsRule()); } 
	 EOF 
;

// Rule drawto_commands
ruledrawto_commands
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getDrawto_commandsAccess().getDrawto_commandsAssignment()); }
(rule__Drawto_commands__Drawto_commandsAssignment)
{ after(grammarAccess.getDrawto_commandsAccess().getDrawto_commandsAssignment()); }
)
(
{ before(grammarAccess.getDrawto_commandsAccess().getDrawto_commandsAssignment()); }
(rule__Drawto_commands__Drawto_commandsAssignment)*
{ after(grammarAccess.getDrawto_commandsAccess().getDrawto_commandsAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledrawto_command
entryRuledrawto_command 
:
{ before(grammarAccess.getDrawto_commandRule()); }
	 ruledrawto_command
{ after(grammarAccess.getDrawto_commandRule()); } 
	 EOF 
;

// Rule drawto_command
ruledrawto_command
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDrawto_commandAccess().getAlternatives()); }
(rule__Drawto_command__Alternatives)
{ after(grammarAccess.getDrawto_commandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleclosepath
entryRuleclosepath 
:
{ before(grammarAccess.getClosepathRule()); }
	 ruleclosepath
{ after(grammarAccess.getClosepathRule()); } 
	 EOF 
;

// Rule closepath
ruleclosepath
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClosepathAccess().getGroup()); }
(rule__Closepath__Group__0)
{ after(grammarAccess.getClosepathAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulelineto
entryRulelineto 
:
{ before(grammarAccess.getLinetoRule()); }
	 rulelineto
{ after(grammarAccess.getLinetoRule()); } 
	 EOF 
;

// Rule lineto
rulelineto
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLinetoAccess().getGroup()); }
(rule__Lineto__Group__0)
{ after(grammarAccess.getLinetoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulehorizontal_lineto
entryRulehorizontal_lineto 
:
{ before(grammarAccess.getHorizontal_linetoRule()); }
	 rulehorizontal_lineto
{ after(grammarAccess.getHorizontal_linetoRule()); } 
	 EOF 
;

// Rule horizontal_lineto
rulehorizontal_lineto
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHorizontal_linetoAccess().getGroup()); }
(rule__Horizontal_lineto__Group__0)
{ after(grammarAccess.getHorizontal_linetoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulehorizontal_lineto_argument_sequence
entryRulehorizontal_lineto_argument_sequence 
:
{ before(grammarAccess.getHorizontal_lineto_argument_sequenceRule()); }
	 rulehorizontal_lineto_argument_sequence
{ after(grammarAccess.getHorizontal_lineto_argument_sequenceRule()); } 
	 EOF 
;

// Rule horizontal_lineto_argument_sequence
rulehorizontal_lineto_argument_sequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getGroup()); }
(rule__Horizontal_lineto_argument_sequence__Group__0)
{ after(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevertical_lineto
entryRulevertical_lineto 
:
{ before(grammarAccess.getVertical_linetoRule()); }
	 rulevertical_lineto
{ after(grammarAccess.getVertical_linetoRule()); } 
	 EOF 
;

// Rule vertical_lineto
rulevertical_lineto
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVertical_linetoAccess().getGroup()); }
(rule__Vertical_lineto__Group__0)
{ after(grammarAccess.getVertical_linetoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevertical_lineto_argument_sequence
entryRulevertical_lineto_argument_sequence 
:
{ before(grammarAccess.getVertical_lineto_argument_sequenceRule()); }
	 rulevertical_lineto_argument_sequence
{ after(grammarAccess.getVertical_lineto_argument_sequenceRule()); } 
	 EOF 
;

// Rule vertical_lineto_argument_sequence
rulevertical_lineto_argument_sequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVertical_lineto_argument_sequenceAccess().getGroup()); }
(rule__Vertical_lineto_argument_sequence__Group__0)
{ after(grammarAccess.getVertical_lineto_argument_sequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecurveto
entryRulecurveto 
:
{ before(grammarAccess.getCurvetoRule()); }
	 rulecurveto
{ after(grammarAccess.getCurvetoRule()); } 
	 EOF 
;

// Rule curveto
rulecurveto
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCurvetoAccess().getGroup()); }
(rule__Curveto__Group__0)
{ after(grammarAccess.getCurvetoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecurveto_argument_sequence
entryRulecurveto_argument_sequence 
:
{ before(grammarAccess.getCurveto_argument_sequenceRule()); }
	 rulecurveto_argument_sequence
{ after(grammarAccess.getCurveto_argument_sequenceRule()); } 
	 EOF 
;

// Rule curveto_argument_sequence
rulecurveto_argument_sequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCurveto_argument_sequenceAccess().getGroup()); }
(rule__Curveto_argument_sequence__Group__0)
{ after(grammarAccess.getCurveto_argument_sequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecurveto_argument
entryRulecurveto_argument 
:
{ before(grammarAccess.getCurveto_argumentRule()); }
	 rulecurveto_argument
{ after(grammarAccess.getCurveto_argumentRule()); } 
	 EOF 
;

// Rule curveto_argument
rulecurveto_argument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCurveto_argumentAccess().getGroup()); }
(rule__Curveto_argument__Group__0)
{ after(grammarAccess.getCurveto_argumentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesmooth_curveto
entryRulesmooth_curveto 
:
{ before(grammarAccess.getSmooth_curvetoRule()); }
	 rulesmooth_curveto
{ after(grammarAccess.getSmooth_curvetoRule()); } 
	 EOF 
;

// Rule smooth_curveto
rulesmooth_curveto
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSmooth_curvetoAccess().getGroup()); }
(rule__Smooth_curveto__Group__0)
{ after(grammarAccess.getSmooth_curvetoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesmooth_curveto_argument_sequence
entryRulesmooth_curveto_argument_sequence 
:
{ before(grammarAccess.getSmooth_curveto_argument_sequenceRule()); }
	 rulesmooth_curveto_argument_sequence
{ after(grammarAccess.getSmooth_curveto_argument_sequenceRule()); } 
	 EOF 
;

// Rule smooth_curveto_argument_sequence
rulesmooth_curveto_argument_sequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getGroup()); }
(rule__Smooth_curveto_argument_sequence__Group__0)
{ after(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesmooth_curveto_argument
entryRulesmooth_curveto_argument 
:
{ before(grammarAccess.getSmooth_curveto_argumentRule()); }
	 rulesmooth_curveto_argument
{ after(grammarAccess.getSmooth_curveto_argumentRule()); } 
	 EOF 
;

// Rule smooth_curveto_argument
rulesmooth_curveto_argument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSmooth_curveto_argumentAccess().getGroup()); }
(rule__Smooth_curveto_argument__Group__0)
{ after(grammarAccess.getSmooth_curveto_argumentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulequadratic_bezier_curveto
entryRulequadratic_bezier_curveto 
:
{ before(grammarAccess.getQuadratic_bezier_curvetoRule()); }
	 rulequadratic_bezier_curveto
{ after(grammarAccess.getQuadratic_bezier_curvetoRule()); } 
	 EOF 
;

// Rule quadratic_bezier_curveto
rulequadratic_bezier_curveto
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuadratic_bezier_curvetoAccess().getGroup()); }
(rule__Quadratic_bezier_curveto__Group__0)
{ after(grammarAccess.getQuadratic_bezier_curvetoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulequadratic_bezier_curveto_argument_sequence
entryRulequadratic_bezier_curveto_argument_sequence 
:
{ before(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceRule()); }
	 rulequadratic_bezier_curveto_argument_sequence
{ after(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceRule()); } 
	 EOF 
;

// Rule quadratic_bezier_curveto_argument_sequence
rulequadratic_bezier_curveto_argument_sequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getGroup()); }
(rule__Quadratic_bezier_curveto_argument_sequence__Group__0)
{ after(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulequadratic_bezier_curveto_argument
entryRulequadratic_bezier_curveto_argument 
:
{ before(grammarAccess.getQuadratic_bezier_curveto_argumentRule()); }
	 rulequadratic_bezier_curveto_argument
{ after(grammarAccess.getQuadratic_bezier_curveto_argumentRule()); } 
	 EOF 
;

// Rule quadratic_bezier_curveto_argument
rulequadratic_bezier_curveto_argument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuadratic_bezier_curveto_argumentAccess().getGroup()); }
(rule__Quadratic_bezier_curveto_argument__Group__0)
{ after(grammarAccess.getQuadratic_bezier_curveto_argumentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesmooth_quadratic_bezier_curveto
entryRulesmooth_quadratic_bezier_curveto 
:
{ before(grammarAccess.getSmooth_quadratic_bezier_curvetoRule()); }
	 rulesmooth_quadratic_bezier_curveto
{ after(grammarAccess.getSmooth_quadratic_bezier_curvetoRule()); } 
	 EOF 
;

// Rule smooth_quadratic_bezier_curveto
rulesmooth_quadratic_bezier_curveto
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSmooth_quadratic_bezier_curvetoAccess().getGroup()); }
(rule__Smooth_quadratic_bezier_curveto__Group__0)
{ after(grammarAccess.getSmooth_quadratic_bezier_curvetoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesmooth_quadratic_bezier_curveto_argument_sequence
entryRulesmooth_quadratic_bezier_curveto_argument_sequence 
:
{ before(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceRule()); }
	 rulesmooth_quadratic_bezier_curveto_argument_sequence
{ after(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceRule()); } 
	 EOF 
;

// Rule smooth_quadratic_bezier_curveto_argument_sequence
rulesmooth_quadratic_bezier_curveto_argument_sequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getGroup()); }
(rule__Smooth_quadratic_bezier_curveto_argument_sequence__Group__0)
{ after(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelliptical_arc
entryRuleelliptical_arc 
:
{ before(grammarAccess.getElliptical_arcRule()); }
	 ruleelliptical_arc
{ after(grammarAccess.getElliptical_arcRule()); } 
	 EOF 
;

// Rule elliptical_arc
ruleelliptical_arc
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElliptical_arcAccess().getGroup()); }
(rule__Elliptical_arc__Group__0)
{ after(grammarAccess.getElliptical_arcAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelliptical_arc_argument_sequence
entryRuleelliptical_arc_argument_sequence 
:
{ before(grammarAccess.getElliptical_arc_argument_sequenceRule()); }
	 ruleelliptical_arc_argument_sequence
{ after(grammarAccess.getElliptical_arc_argument_sequenceRule()); } 
	 EOF 
;

// Rule elliptical_arc_argument_sequence
ruleelliptical_arc_argument_sequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElliptical_arc_argument_sequenceAccess().getGroup()); }
(rule__Elliptical_arc_argument_sequence__Group__0)
{ after(grammarAccess.getElliptical_arc_argument_sequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelliptical_arc_argument
entryRuleelliptical_arc_argument 
:
{ before(grammarAccess.getElliptical_arc_argumentRule()); }
	 ruleelliptical_arc_argument
{ after(grammarAccess.getElliptical_arc_argumentRule()); } 
	 EOF 
;

// Rule elliptical_arc_argument
ruleelliptical_arc_argument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getGroup()); }
(rule__Elliptical_arc_argument__Group__0)
{ after(grammarAccess.getElliptical_arc_argumentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecoordinate_pair
entryRulecoordinate_pair 
:
{ before(grammarAccess.getCoordinate_pairRule()); }
	 rulecoordinate_pair
{ after(grammarAccess.getCoordinate_pairRule()); } 
	 EOF 
;

// Rule coordinate_pair
rulecoordinate_pair
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCoordinate_pairAccess().getGroup()); }
(rule__Coordinate_pair__Group__0)
{ after(grammarAccess.getCoordinate_pairAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecomma
entryRulecomma 
:
{ before(grammarAccess.getCommaRule()); }
	 rulecomma
{ after(grammarAccess.getCommaRule()); } 
	 EOF 
;

// Rule comma
rulecomma
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommaAccess().getCommaKeyword()); }

	',' 

{ after(grammarAccess.getCommaAccess().getCommaKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecoordinate
entryRulecoordinate 
:
{ before(grammarAccess.getCoordinateRule()); }
	 rulecoordinate
{ after(grammarAccess.getCoordinateRule()); } 
	 EOF 
;

// Rule coordinate
rulecoordinate
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCoordinateAccess().getNumberParserRuleCall()); }
	rulenumber
{ after(grammarAccess.getCoordinateAccess().getNumberParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulenumber
entryRulenumber 
:
{ before(grammarAccess.getNumberRule()); }
	 rulenumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule number
rulenumber
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberAccess().getGroup()); }
(rule__Number__Group__0)
{ after(grammarAccess.getNumberAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulenonnegative_number
entryRulenonnegative_number 
:
{ before(grammarAccess.getNonnegative_numberRule()); }
	 rulenonnegative_number
{ after(grammarAccess.getNonnegative_numberRule()); } 
	 EOF 
;

// Rule nonnegative_number
rulenonnegative_number
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNonnegative_numberAccess().getGroup()); }
(rule__Nonnegative_number__Group__0)
{ after(grammarAccess.getNonnegative_numberAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleexponent
entryRuleexponent 
:
{ before(grammarAccess.getExponentRule()); }
	 ruleexponent
{ after(grammarAccess.getExponentRule()); } 
	 EOF 
;

// Rule exponent
ruleexponent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExponentAccess().getGroup()); }
(rule__Exponent__Group__0)
{ after(grammarAccess.getExponentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledigit_sequence
entryRuledigit_sequence 
:
{ before(grammarAccess.getDigit_sequenceRule()); }
	 ruledigit_sequence
{ after(grammarAccess.getDigit_sequenceRule()); } 
	 EOF 
;

// Rule digit_sequence
ruledigit_sequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDigit_sequenceAccess().getDigitsAssignment()); }
(rule__Digit_sequence__DigitsAssignment)
{ after(grammarAccess.getDigit_sequenceAccess().getDigitsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledigit
entryRuledigit 
:
{ before(grammarAccess.getDigitRule()); }
	 ruledigit
{ after(grammarAccess.getDigitRule()); } 
	 EOF 
;

// Rule digit
ruledigit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDigitAccess().getAlternatives()); }
(rule__Digit__Alternatives)
{ after(grammarAccess.getDigitAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesign
entryRulesign 
:
{ before(grammarAccess.getSignRule()); }
	 rulesign
{ after(grammarAccess.getSignRule()); } 
	 EOF 
;

// Rule sign
rulesign
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignAccess().getAlternatives()); }
(rule__Sign__Alternatives)
{ after(grammarAccess.getSignAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleflag
entryRuleflag 
:
{ before(grammarAccess.getFlagRule()); }
	 ruleflag
{ after(grammarAccess.getFlagRule()); } 
	 EOF 
;

// Rule flag
ruleflag
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFlagAccess().getAlternatives()); }
(rule__Flag__Alternatives)
{ after(grammarAccess.getFlagAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Moveto__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMovetoAccess().getMKeyword_0_0()); }

	'M' 

{ after(grammarAccess.getMovetoAccess().getMKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getMovetoAccess().getMKeyword_0_1()); }

	'm' 

{ after(grammarAccess.getMovetoAccess().getMKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Drawto_command__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDrawto_commandAccess().getClosepathParserRuleCall_0()); }
	ruleclosepath
{ after(grammarAccess.getDrawto_commandAccess().getClosepathParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDrawto_commandAccess().getLinetoParserRuleCall_1()); }
	rulelineto
{ after(grammarAccess.getDrawto_commandAccess().getLinetoParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDrawto_commandAccess().getHorizontal_linetoParserRuleCall_2()); }
	rulehorizontal_lineto
{ after(grammarAccess.getDrawto_commandAccess().getHorizontal_linetoParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getDrawto_commandAccess().getVertical_linetoParserRuleCall_3()); }
	rulevertical_lineto
{ after(grammarAccess.getDrawto_commandAccess().getVertical_linetoParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getDrawto_commandAccess().getCurvetoParserRuleCall_4()); }
	rulecurveto
{ after(grammarAccess.getDrawto_commandAccess().getCurvetoParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getDrawto_commandAccess().getSmooth_curvetoParserRuleCall_5()); }
	rulesmooth_curveto
{ after(grammarAccess.getDrawto_commandAccess().getSmooth_curvetoParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getDrawto_commandAccess().getQuadratic_bezier_curvetoParserRuleCall_6()); }
	rulequadratic_bezier_curveto
{ after(grammarAccess.getDrawto_commandAccess().getQuadratic_bezier_curvetoParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getDrawto_commandAccess().getSmooth_quadratic_bezier_curvetoParserRuleCall_7()); }
	rulesmooth_quadratic_bezier_curveto
{ after(grammarAccess.getDrawto_commandAccess().getSmooth_quadratic_bezier_curvetoParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getDrawto_commandAccess().getElliptical_arcParserRuleCall_8()); }
	ruleelliptical_arc
{ after(grammarAccess.getDrawto_commandAccess().getElliptical_arcParserRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Closepath__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosepathAccess().getZKeyword_1_0()); }

	'Z' 

{ after(grammarAccess.getClosepathAccess().getZKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getClosepathAccess().getZKeyword_1_1()); }

	'z' 

{ after(grammarAccess.getClosepathAccess().getZKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Lineto__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinetoAccess().getLKeyword_0_0()); }

	'L' 

{ after(grammarAccess.getLinetoAccess().getLKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getLinetoAccess().getLKeyword_0_1()); }

	'l' 

{ after(grammarAccess.getLinetoAccess().getLKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Horizontal_lineto__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHorizontal_linetoAccess().getHKeyword_0_0()); }

	'H' 

{ after(grammarAccess.getHorizontal_linetoAccess().getHKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getHorizontal_linetoAccess().getHKeyword_0_1()); }

	'h' 

{ after(grammarAccess.getHorizontal_linetoAccess().getHKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vertical_lineto__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVertical_linetoAccess().getVKeyword_0_0()); }

	'V' 

{ after(grammarAccess.getVertical_linetoAccess().getVKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getVertical_linetoAccess().getVKeyword_0_1()); }

	'v' 

{ after(grammarAccess.getVertical_linetoAccess().getVKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurvetoAccess().getCKeyword_0_0()); }

	'C' 

{ after(grammarAccess.getCurvetoAccess().getCKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getCurvetoAccess().getCKeyword_0_1()); }

	'c' 

{ after(grammarAccess.getCurvetoAccess().getCKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_curveto__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_curvetoAccess().getSKeyword_0_0()); }

	'S' 

{ after(grammarAccess.getSmooth_curvetoAccess().getSKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getSmooth_curvetoAccess().getSKeyword_0_1()); }

	's' 

{ after(grammarAccess.getSmooth_curvetoAccess().getSKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quadratic_bezier_curveto__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuadratic_bezier_curvetoAccess().getQKeyword_0_0()); }

	'Q' 

{ after(grammarAccess.getQuadratic_bezier_curvetoAccess().getQKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getQuadratic_bezier_curvetoAccess().getQKeyword_0_1()); }

	'q' 

{ after(grammarAccess.getQuadratic_bezier_curvetoAccess().getQKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_quadratic_bezier_curveto__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_quadratic_bezier_curvetoAccess().getTKeyword_0_0()); }

	'T' 

{ after(grammarAccess.getSmooth_quadratic_bezier_curvetoAccess().getTKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getSmooth_quadratic_bezier_curvetoAccess().getTKeyword_0_1()); }

	't' 

{ after(grammarAccess.getSmooth_quadratic_bezier_curvetoAccess().getTKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arcAccess().getAKeyword_0_0()); }

	'A' 

{ after(grammarAccess.getElliptical_arcAccess().getAKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getElliptical_arcAccess().getAKeyword_0_1()); }

	'a' 

{ after(grammarAccess.getElliptical_arcAccess().getAKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentAccess().getEKeyword_0_0()); }

	'e' 

{ after(grammarAccess.getExponentAccess().getEKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getExponentAccess().getEKeyword_0_1()); }

	'E' 

{ after(grammarAccess.getExponentAccess().getEKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Digit__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDigitAccess().getDigitZeroKeyword_0()); }

	'0' 

{ after(grammarAccess.getDigitAccess().getDigitZeroKeyword_0()); }
)

    |(
{ before(grammarAccess.getDigitAccess().getDigitOneKeyword_1()); }

	'1' 

{ after(grammarAccess.getDigitAccess().getDigitOneKeyword_1()); }
)

    |(
{ before(grammarAccess.getDigitAccess().getDigitTwoKeyword_2()); }

	'2' 

{ after(grammarAccess.getDigitAccess().getDigitTwoKeyword_2()); }
)

    |(
{ before(grammarAccess.getDigitAccess().getDigitThreeKeyword_3()); }

	'3' 

{ after(grammarAccess.getDigitAccess().getDigitThreeKeyword_3()); }
)

    |(
{ before(grammarAccess.getDigitAccess().getDigitFourKeyword_4()); }

	'4' 

{ after(grammarAccess.getDigitAccess().getDigitFourKeyword_4()); }
)

    |(
{ before(grammarAccess.getDigitAccess().getDigitFiveKeyword_5()); }

	'5' 

{ after(grammarAccess.getDigitAccess().getDigitFiveKeyword_5()); }
)

    |(
{ before(grammarAccess.getDigitAccess().getDigitSixKeyword_6()); }

	'6' 

{ after(grammarAccess.getDigitAccess().getDigitSixKeyword_6()); }
)

    |(
{ before(grammarAccess.getDigitAccess().getDigitSevenKeyword_7()); }

	'7' 

{ after(grammarAccess.getDigitAccess().getDigitSevenKeyword_7()); }
)

    |(
{ before(grammarAccess.getDigitAccess().getDigitEightKeyword_8()); }

	'8' 

{ after(grammarAccess.getDigitAccess().getDigitEightKeyword_8()); }
)

    |(
{ before(grammarAccess.getDigitAccess().getDigitNineKeyword_9()); }

	'9' 

{ after(grammarAccess.getDigitAccess().getDigitNineKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sign__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignAccess().getPlusSignKeyword_0()); }

	'+' 

{ after(grammarAccess.getSignAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Flag__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlagAccess().getDigitZeroKeyword_0()); }

	'0' 

{ after(grammarAccess.getFlagAccess().getDigitZeroKeyword_0()); }
)

    |(
{ before(grammarAccess.getFlagAccess().getDigitOneKeyword_1()); }

	'1' 

{ after(grammarAccess.getFlagAccess().getDigitOneKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Moveto_drawto_command_group__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Moveto_drawto_command_group__Group__0__Impl
	rule__Moveto_drawto_command_group__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Moveto_drawto_command_group__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveto_drawto_command_groupAccess().getMovetoAssignment_0()); }
(rule__Moveto_drawto_command_group__MovetoAssignment_0)
{ after(grammarAccess.getMoveto_drawto_command_groupAccess().getMovetoAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Moveto_drawto_command_group__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Moveto_drawto_command_group__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Moveto_drawto_command_group__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveto_drawto_command_groupAccess().getDrawto_commandsAssignment_1()); }
(rule__Moveto_drawto_command_group__Drawto_commandsAssignment_1)?
{ after(grammarAccess.getMoveto_drawto_command_groupAccess().getDrawto_commandsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Moveto__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Moveto__Group__0__Impl
	rule__Moveto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Moveto__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMovetoAccess().getAlternatives_0()); }
(rule__Moveto__Alternatives_0)
{ after(grammarAccess.getMovetoAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Moveto__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Moveto__Group__1__Impl
	rule__Moveto__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Moveto__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMovetoAccess().getPointAssignment_1()); }
(rule__Moveto__PointAssignment_1)
{ after(grammarAccess.getMovetoAccess().getPointAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Moveto__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Moveto__Group__2__Impl
	rule__Moveto__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Moveto__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMovetoAccess().getCommaParserRuleCall_2()); }
(	rulecomma)?
{ after(grammarAccess.getMovetoAccess().getCommaParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Moveto__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Moveto__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Moveto__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMovetoAccess().getLineto_argument_sequenceAssignment_3()); }
(rule__Moveto__Lineto_argument_sequenceAssignment_3)
{ after(grammarAccess.getMovetoAccess().getLineto_argument_sequenceAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Lineto_argument_sequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lineto_argument_sequence__Group__0__Impl
	rule__Lineto_argument_sequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lineto_argument_sequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineto_argument_sequenceAccess().getPairsAssignment_0()); }
(rule__Lineto_argument_sequence__PairsAssignment_0)
{ after(grammarAccess.getLineto_argument_sequenceAccess().getPairsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lineto_argument_sequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lineto_argument_sequence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lineto_argument_sequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineto_argument_sequenceAccess().getGroup_1()); }
(rule__Lineto_argument_sequence__Group_1__0)*
{ after(grammarAccess.getLineto_argument_sequenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Lineto_argument_sequence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lineto_argument_sequence__Group_1__0__Impl
	rule__Lineto_argument_sequence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lineto_argument_sequence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); }
(	rulecomma)?
{ after(grammarAccess.getLineto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lineto_argument_sequence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lineto_argument_sequence__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lineto_argument_sequence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineto_argument_sequenceAccess().getPairsAssignment_1_1()); }
(rule__Lineto_argument_sequence__PairsAssignment_1_1)
{ after(grammarAccess.getLineto_argument_sequenceAccess().getPairsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Closepath__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Closepath__Group__0__Impl
	rule__Closepath__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Closepath__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosepathAccess().getClosepathAction_0()); }
(

)
{ after(grammarAccess.getClosepathAccess().getClosepathAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Closepath__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Closepath__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Closepath__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosepathAccess().getAlternatives_1()); }
(rule__Closepath__Alternatives_1)
{ after(grammarAccess.getClosepathAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Lineto__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lineto__Group__0__Impl
	rule__Lineto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lineto__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinetoAccess().getAlternatives_0()); }
(rule__Lineto__Alternatives_0)
{ after(grammarAccess.getLinetoAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lineto__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lineto__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lineto__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinetoAccess().getLineto_argument_sequenceAssignment_1()); }
(rule__Lineto__Lineto_argument_sequenceAssignment_1)
{ after(grammarAccess.getLinetoAccess().getLineto_argument_sequenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Horizontal_lineto__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Horizontal_lineto__Group__0__Impl
	rule__Horizontal_lineto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Horizontal_lineto__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHorizontal_linetoAccess().getAlternatives_0()); }
(rule__Horizontal_lineto__Alternatives_0)
{ after(grammarAccess.getHorizontal_linetoAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Horizontal_lineto__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Horizontal_lineto__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Horizontal_lineto__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHorizontal_linetoAccess().getHorizontal_lineto_argument_sequenceAssignment_1()); }
(rule__Horizontal_lineto__Horizontal_lineto_argument_sequenceAssignment_1)
{ after(grammarAccess.getHorizontal_linetoAccess().getHorizontal_lineto_argument_sequenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Horizontal_lineto_argument_sequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Horizontal_lineto_argument_sequence__Group__0__Impl
	rule__Horizontal_lineto_argument_sequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Horizontal_lineto_argument_sequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getCoordinatesAssignment_0()); }
(rule__Horizontal_lineto_argument_sequence__CoordinatesAssignment_0)
{ after(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getCoordinatesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Horizontal_lineto_argument_sequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Horizontal_lineto_argument_sequence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Horizontal_lineto_argument_sequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getGroup_1()); }
(rule__Horizontal_lineto_argument_sequence__Group_1__0)*
{ after(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Horizontal_lineto_argument_sequence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Horizontal_lineto_argument_sequence__Group_1__0__Impl
	rule__Horizontal_lineto_argument_sequence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Horizontal_lineto_argument_sequence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); }
(	rulecomma)?
{ after(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Horizontal_lineto_argument_sequence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Horizontal_lineto_argument_sequence__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Horizontal_lineto_argument_sequence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getCoordinatesAssignment_1_1()); }
(rule__Horizontal_lineto_argument_sequence__CoordinatesAssignment_1_1)
{ after(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getCoordinatesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Vertical_lineto__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vertical_lineto__Group__0__Impl
	rule__Vertical_lineto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertical_lineto__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVertical_linetoAccess().getAlternatives_0()); }
(rule__Vertical_lineto__Alternatives_0)
{ after(grammarAccess.getVertical_linetoAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vertical_lineto__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vertical_lineto__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertical_lineto__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVertical_linetoAccess().getVertical_lineto_argument_sequenceAssignment_1()); }
(rule__Vertical_lineto__Vertical_lineto_argument_sequenceAssignment_1)
{ after(grammarAccess.getVertical_linetoAccess().getVertical_lineto_argument_sequenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Vertical_lineto_argument_sequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vertical_lineto_argument_sequence__Group__0__Impl
	rule__Vertical_lineto_argument_sequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertical_lineto_argument_sequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVertical_lineto_argument_sequenceAccess().getCoordinatesAssignment_0()); }
(rule__Vertical_lineto_argument_sequence__CoordinatesAssignment_0)
{ after(grammarAccess.getVertical_lineto_argument_sequenceAccess().getCoordinatesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vertical_lineto_argument_sequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vertical_lineto_argument_sequence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertical_lineto_argument_sequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVertical_lineto_argument_sequenceAccess().getGroup_1()); }
(rule__Vertical_lineto_argument_sequence__Group_1__0)*
{ after(grammarAccess.getVertical_lineto_argument_sequenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Vertical_lineto_argument_sequence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vertical_lineto_argument_sequence__Group_1__0__Impl
	rule__Vertical_lineto_argument_sequence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertical_lineto_argument_sequence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVertical_lineto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); }
(	rulecomma)?
{ after(grammarAccess.getVertical_lineto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vertical_lineto_argument_sequence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vertical_lineto_argument_sequence__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertical_lineto_argument_sequence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVertical_lineto_argument_sequenceAccess().getCoordinatesAssignment_1_1()); }
(rule__Vertical_lineto_argument_sequence__CoordinatesAssignment_1_1)
{ after(grammarAccess.getVertical_lineto_argument_sequenceAccess().getCoordinatesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Curveto__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Curveto__Group__0__Impl
	rule__Curveto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurvetoAccess().getAlternatives_0()); }
(rule__Curveto__Alternatives_0)
{ after(grammarAccess.getCurvetoAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Curveto__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Curveto__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurvetoAccess().getCurveto_argument_sequenceAssignment_1()); }
(rule__Curveto__Curveto_argument_sequenceAssignment_1)
{ after(grammarAccess.getCurvetoAccess().getCurveto_argument_sequenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Curveto_argument_sequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Curveto_argument_sequence__Group__0__Impl
	rule__Curveto_argument_sequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto_argument_sequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurveto_argument_sequenceAccess().getCurveto_argumentsAssignment_0()); }
(rule__Curveto_argument_sequence__Curveto_argumentsAssignment_0)
{ after(grammarAccess.getCurveto_argument_sequenceAccess().getCurveto_argumentsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Curveto_argument_sequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Curveto_argument_sequence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto_argument_sequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurveto_argument_sequenceAccess().getGroup_1()); }
(rule__Curveto_argument_sequence__Group_1__0)*
{ after(grammarAccess.getCurveto_argument_sequenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Curveto_argument_sequence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Curveto_argument_sequence__Group_1__0__Impl
	rule__Curveto_argument_sequence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto_argument_sequence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurveto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); }
(	rulecomma)?
{ after(grammarAccess.getCurveto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Curveto_argument_sequence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Curveto_argument_sequence__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto_argument_sequence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurveto_argument_sequenceAccess().getCurveto_argumentsAssignment_1_1()); }
(rule__Curveto_argument_sequence__Curveto_argumentsAssignment_1_1)
{ after(grammarAccess.getCurveto_argument_sequenceAccess().getCurveto_argumentsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Curveto_argument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Curveto_argument__Group__0__Impl
	rule__Curveto_argument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto_argument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurveto_argumentAccess().getC1Assignment_0()); }
(rule__Curveto_argument__C1Assignment_0)
{ after(grammarAccess.getCurveto_argumentAccess().getC1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Curveto_argument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Curveto_argument__Group__1__Impl
	rule__Curveto_argument__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto_argument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurveto_argumentAccess().getCommaParserRuleCall_1()); }
(	rulecomma)?
{ after(grammarAccess.getCurveto_argumentAccess().getCommaParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Curveto_argument__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Curveto_argument__Group__2__Impl
	rule__Curveto_argument__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto_argument__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurveto_argumentAccess().getC2Assignment_2()); }
(rule__Curveto_argument__C2Assignment_2)
{ after(grammarAccess.getCurveto_argumentAccess().getC2Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Curveto_argument__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Curveto_argument__Group__3__Impl
	rule__Curveto_argument__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto_argument__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurveto_argumentAccess().getCommaParserRuleCall_3()); }
(	rulecomma)?
{ after(grammarAccess.getCurveto_argumentAccess().getCommaParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Curveto_argument__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Curveto_argument__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto_argument__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurveto_argumentAccess().getC3Assignment_4()); }
(rule__Curveto_argument__C3Assignment_4)
{ after(grammarAccess.getCurveto_argumentAccess().getC3Assignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Smooth_curveto__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Smooth_curveto__Group__0__Impl
	rule__Smooth_curveto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_curveto__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_curvetoAccess().getAlternatives_0()); }
(rule__Smooth_curveto__Alternatives_0)
{ after(grammarAccess.getSmooth_curvetoAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Smooth_curveto__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Smooth_curveto__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_curveto__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_curvetoAccess().getSmooth_curveto_argument_sequenceAssignment_1()); }
(rule__Smooth_curveto__Smooth_curveto_argument_sequenceAssignment_1)
{ after(grammarAccess.getSmooth_curvetoAccess().getSmooth_curveto_argument_sequenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Smooth_curveto_argument_sequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Smooth_curveto_argument_sequence__Group__0__Impl
	rule__Smooth_curveto_argument_sequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_curveto_argument_sequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getSmooth_curveto_argumentsAssignment_0()); }
(rule__Smooth_curveto_argument_sequence__Smooth_curveto_argumentsAssignment_0)
{ after(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getSmooth_curveto_argumentsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Smooth_curveto_argument_sequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Smooth_curveto_argument_sequence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_curveto_argument_sequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getGroup_1()); }
(rule__Smooth_curveto_argument_sequence__Group_1__0)*
{ after(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Smooth_curveto_argument_sequence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Smooth_curveto_argument_sequence__Group_1__0__Impl
	rule__Smooth_curveto_argument_sequence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_curveto_argument_sequence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); }
(	rulecomma)?
{ after(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Smooth_curveto_argument_sequence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Smooth_curveto_argument_sequence__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_curveto_argument_sequence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getSmooth_curveto_argumentsAssignment_1_1()); }
(rule__Smooth_curveto_argument_sequence__Smooth_curveto_argumentsAssignment_1_1)
{ after(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getSmooth_curveto_argumentsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Smooth_curveto_argument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Smooth_curveto_argument__Group__0__Impl
	rule__Smooth_curveto_argument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_curveto_argument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_curveto_argumentAccess().getC1Assignment_0()); }
(rule__Smooth_curveto_argument__C1Assignment_0)
{ after(grammarAccess.getSmooth_curveto_argumentAccess().getC1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Smooth_curveto_argument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Smooth_curveto_argument__Group__1__Impl
	rule__Smooth_curveto_argument__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_curveto_argument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_curveto_argumentAccess().getCommaParserRuleCall_1()); }
(	rulecomma)?
{ after(grammarAccess.getSmooth_curveto_argumentAccess().getCommaParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Smooth_curveto_argument__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Smooth_curveto_argument__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_curveto_argument__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_curveto_argumentAccess().getC2Assignment_2()); }
(rule__Smooth_curveto_argument__C2Assignment_2)
{ after(grammarAccess.getSmooth_curveto_argumentAccess().getC2Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Quadratic_bezier_curveto__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quadratic_bezier_curveto__Group__0__Impl
	rule__Quadratic_bezier_curveto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quadratic_bezier_curveto__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuadratic_bezier_curvetoAccess().getAlternatives_0()); }
(rule__Quadratic_bezier_curveto__Alternatives_0)
{ after(grammarAccess.getQuadratic_bezier_curvetoAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quadratic_bezier_curveto__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quadratic_bezier_curveto__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quadratic_bezier_curveto__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuadratic_bezier_curvetoAccess().getQuadratic_bezier_curveto_argument_sequenceParserRuleCall_1()); }
	rulequadratic_bezier_curveto_argument_sequence
{ after(grammarAccess.getQuadratic_bezier_curvetoAccess().getQuadratic_bezier_curveto_argument_sequenceParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Quadratic_bezier_curveto_argument_sequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quadratic_bezier_curveto_argument_sequence__Group__0__Impl
	rule__Quadratic_bezier_curveto_argument_sequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quadratic_bezier_curveto_argument_sequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getQuadratic_bezier_curveto_argumentsAssignment_0()); }
(rule__Quadratic_bezier_curveto_argument_sequence__Quadratic_bezier_curveto_argumentsAssignment_0)
{ after(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getQuadratic_bezier_curveto_argumentsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quadratic_bezier_curveto_argument_sequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quadratic_bezier_curveto_argument_sequence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quadratic_bezier_curveto_argument_sequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getGroup_1()); }
(rule__Quadratic_bezier_curveto_argument_sequence__Group_1__0)*
{ after(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Quadratic_bezier_curveto_argument_sequence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quadratic_bezier_curveto_argument_sequence__Group_1__0__Impl
	rule__Quadratic_bezier_curveto_argument_sequence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quadratic_bezier_curveto_argument_sequence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); }
(	rulecomma)?
{ after(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quadratic_bezier_curveto_argument_sequence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quadratic_bezier_curveto_argument_sequence__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quadratic_bezier_curveto_argument_sequence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getQuadratic_bezier_curveto_argumentsAssignment_1_1()); }
(rule__Quadratic_bezier_curveto_argument_sequence__Quadratic_bezier_curveto_argumentsAssignment_1_1)
{ after(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getQuadratic_bezier_curveto_argumentsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Quadratic_bezier_curveto_argument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quadratic_bezier_curveto_argument__Group__0__Impl
	rule__Quadratic_bezier_curveto_argument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quadratic_bezier_curveto_argument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuadratic_bezier_curveto_argumentAccess().getC1Assignment_0()); }
(rule__Quadratic_bezier_curveto_argument__C1Assignment_0)
{ after(grammarAccess.getQuadratic_bezier_curveto_argumentAccess().getC1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quadratic_bezier_curveto_argument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quadratic_bezier_curveto_argument__Group__1__Impl
	rule__Quadratic_bezier_curveto_argument__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Quadratic_bezier_curveto_argument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuadratic_bezier_curveto_argumentAccess().getCommaParserRuleCall_1()); }
(	rulecomma)?
{ after(grammarAccess.getQuadratic_bezier_curveto_argumentAccess().getCommaParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quadratic_bezier_curveto_argument__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quadratic_bezier_curveto_argument__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quadratic_bezier_curveto_argument__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuadratic_bezier_curveto_argumentAccess().getC2Assignment_2()); }
(rule__Quadratic_bezier_curveto_argument__C2Assignment_2)
{ after(grammarAccess.getQuadratic_bezier_curveto_argumentAccess().getC2Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Smooth_quadratic_bezier_curveto__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Smooth_quadratic_bezier_curveto__Group__0__Impl
	rule__Smooth_quadratic_bezier_curveto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_quadratic_bezier_curveto__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_quadratic_bezier_curvetoAccess().getAlternatives_0()); }
(rule__Smooth_quadratic_bezier_curveto__Alternatives_0)
{ after(grammarAccess.getSmooth_quadratic_bezier_curvetoAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Smooth_quadratic_bezier_curveto__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Smooth_quadratic_bezier_curveto__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_quadratic_bezier_curveto__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_quadratic_bezier_curvetoAccess().getSmooth_quadratic_bezier_curveto_argument_sequenceAssignment_1()); }
(rule__Smooth_quadratic_bezier_curveto__Smooth_quadratic_bezier_curveto_argument_sequenceAssignment_1)
{ after(grammarAccess.getSmooth_quadratic_bezier_curvetoAccess().getSmooth_quadratic_bezier_curveto_argument_sequenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Smooth_quadratic_bezier_curveto_argument_sequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Smooth_quadratic_bezier_curveto_argument_sequence__Group__0__Impl
	rule__Smooth_quadratic_bezier_curveto_argument_sequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_quadratic_bezier_curveto_argument_sequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getCoordinate_pairsAssignment_0()); }
(rule__Smooth_quadratic_bezier_curveto_argument_sequence__Coordinate_pairsAssignment_0)
{ after(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getCoordinate_pairsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Smooth_quadratic_bezier_curveto_argument_sequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Smooth_quadratic_bezier_curveto_argument_sequence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_quadratic_bezier_curveto_argument_sequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getGroup_1()); }
(rule__Smooth_quadratic_bezier_curveto_argument_sequence__Group_1__0)*
{ after(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Smooth_quadratic_bezier_curveto_argument_sequence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Smooth_quadratic_bezier_curveto_argument_sequence__Group_1__0__Impl
	rule__Smooth_quadratic_bezier_curveto_argument_sequence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_quadratic_bezier_curveto_argument_sequence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); }
(	rulecomma)?
{ after(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Smooth_quadratic_bezier_curveto_argument_sequence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Smooth_quadratic_bezier_curveto_argument_sequence__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_quadratic_bezier_curveto_argument_sequence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getCoordinate_pairsAssignment_1_1()); }
(rule__Smooth_quadratic_bezier_curveto_argument_sequence__Coordinate_pairsAssignment_1_1)
{ after(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getCoordinate_pairsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Elliptical_arc__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc__Group__0__Impl
	rule__Elliptical_arc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arcAccess().getAlternatives_0()); }
(rule__Elliptical_arc__Alternatives_0)
{ after(grammarAccess.getElliptical_arcAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elliptical_arc__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arcAccess().getElliptical_arc_argument_sequenceAssignment_1()); }
(rule__Elliptical_arc__Elliptical_arc_argument_sequenceAssignment_1)
{ after(grammarAccess.getElliptical_arcAccess().getElliptical_arc_argument_sequenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Elliptical_arc_argument_sequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc_argument_sequence__Group__0__Impl
	rule__Elliptical_arc_argument_sequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument_sequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argument_sequenceAccess().getElliptical_arc_argumentsAssignment_0()); }
(rule__Elliptical_arc_argument_sequence__Elliptical_arc_argumentsAssignment_0)
{ after(grammarAccess.getElliptical_arc_argument_sequenceAccess().getElliptical_arc_argumentsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elliptical_arc_argument_sequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc_argument_sequence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument_sequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argument_sequenceAccess().getGroup_1()); }
(rule__Elliptical_arc_argument_sequence__Group_1__0)*
{ after(grammarAccess.getElliptical_arc_argument_sequenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Elliptical_arc_argument_sequence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc_argument_sequence__Group_1__0__Impl
	rule__Elliptical_arc_argument_sequence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument_sequence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argument_sequenceAccess().getCommaParserRuleCall_1_0()); }
(	rulecomma)?
{ after(grammarAccess.getElliptical_arc_argument_sequenceAccess().getCommaParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elliptical_arc_argument_sequence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc_argument_sequence__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument_sequence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argument_sequenceAccess().getElliptical_arc_argumentsAssignment_1_1()); }
(rule__Elliptical_arc_argument_sequence__Elliptical_arc_argumentsAssignment_1_1)
{ after(grammarAccess.getElliptical_arc_argument_sequenceAccess().getElliptical_arc_argumentsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Elliptical_arc_argument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc_argument__Group__0__Impl
	rule__Elliptical_arc_argument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getRxAssignment_0()); }
(rule__Elliptical_arc_argument__RxAssignment_0)
{ after(grammarAccess.getElliptical_arc_argumentAccess().getRxAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elliptical_arc_argument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc_argument__Group__1__Impl
	rule__Elliptical_arc_argument__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getCommaParserRuleCall_1()); }
(	rulecomma)?
{ after(grammarAccess.getElliptical_arc_argumentAccess().getCommaParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elliptical_arc_argument__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc_argument__Group__2__Impl
	rule__Elliptical_arc_argument__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getRyAssignment_2()); }
(rule__Elliptical_arc_argument__RyAssignment_2)
{ after(grammarAccess.getElliptical_arc_argumentAccess().getRyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elliptical_arc_argument__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc_argument__Group__3__Impl
	rule__Elliptical_arc_argument__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getCommaParserRuleCall_3()); }
(	rulecomma)?
{ after(grammarAccess.getElliptical_arc_argumentAccess().getCommaParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elliptical_arc_argument__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc_argument__Group__4__Impl
	rule__Elliptical_arc_argument__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getRotationAssignment_4()); }
(rule__Elliptical_arc_argument__RotationAssignment_4)
{ after(grammarAccess.getElliptical_arc_argumentAccess().getRotationAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elliptical_arc_argument__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc_argument__Group__5__Impl
	rule__Elliptical_arc_argument__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getCommaParserRuleCall_5()); }
	rulecomma
{ after(grammarAccess.getElliptical_arc_argumentAccess().getCommaParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elliptical_arc_argument__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc_argument__Group__6__Impl
	rule__Elliptical_arc_argument__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getLargearcflagAssignment_6()); }
(rule__Elliptical_arc_argument__LargearcflagAssignment_6)
{ after(grammarAccess.getElliptical_arc_argumentAccess().getLargearcflagAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elliptical_arc_argument__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc_argument__Group__7__Impl
	rule__Elliptical_arc_argument__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getCommaParserRuleCall_7()); }
(	rulecomma)?
{ after(grammarAccess.getElliptical_arc_argumentAccess().getCommaParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elliptical_arc_argument__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc_argument__Group__8__Impl
	rule__Elliptical_arc_argument__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getSweepflagAssignment_8()); }
(rule__Elliptical_arc_argument__SweepflagAssignment_8)
{ after(grammarAccess.getElliptical_arc_argumentAccess().getSweepflagAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elliptical_arc_argument__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc_argument__Group__9__Impl
	rule__Elliptical_arc_argument__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getCommaParserRuleCall_9()); }
(	rulecomma)?
{ after(grammarAccess.getElliptical_arc_argumentAccess().getCommaParserRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elliptical_arc_argument__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elliptical_arc_argument__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getCoordinate_pairAssignment_10()); }
(rule__Elliptical_arc_argument__Coordinate_pairAssignment_10)
{ after(grammarAccess.getElliptical_arc_argumentAccess().getCoordinate_pairAssignment_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}
























rule__Coordinate_pair__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Coordinate_pair__Group__0__Impl
	rule__Coordinate_pair__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinate_pair__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCoordinate_pairAccess().getC1Assignment_0()); }
(rule__Coordinate_pair__C1Assignment_0)
{ after(grammarAccess.getCoordinate_pairAccess().getC1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Coordinate_pair__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Coordinate_pair__Group__1__Impl
	rule__Coordinate_pair__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinate_pair__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCoordinate_pairAccess().getCommaParserRuleCall_1()); }
(	rulecomma)?
{ after(grammarAccess.getCoordinate_pairAccess().getCommaParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Coordinate_pair__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Coordinate_pair__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinate_pair__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCoordinate_pairAccess().getC2Assignment_2()); }
(rule__Coordinate_pair__C2Assignment_2)
{ after(grammarAccess.getCoordinate_pairAccess().getC2Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Number__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Number__Group__0__Impl
	rule__Number__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getSignAssignment_0()); }
(rule__Number__SignAssignment_0)?
{ after(grammarAccess.getNumberAccess().getSignAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Number__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getNonnegative_numberAssignment_1()); }
(rule__Number__Nonnegative_numberAssignment_1)
{ after(grammarAccess.getNumberAccess().getNonnegative_numberAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Nonnegative_number__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Nonnegative_number__Group__0__Impl
	rule__Nonnegative_number__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonnegative_number__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonnegative_numberAccess().getIntseqAssignment_0()); }
(rule__Nonnegative_number__IntseqAssignment_0)
{ after(grammarAccess.getNonnegative_numberAccess().getIntseqAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Nonnegative_number__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Nonnegative_number__Group__1__Impl
	rule__Nonnegative_number__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonnegative_number__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonnegative_numberAccess().getGroup_1()); }
(rule__Nonnegative_number__Group_1__0)?
{ after(grammarAccess.getNonnegative_numberAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Nonnegative_number__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Nonnegative_number__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonnegative_number__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonnegative_numberAccess().getExponentAssignment_2()); }
(rule__Nonnegative_number__ExponentAssignment_2)?
{ after(grammarAccess.getNonnegative_numberAccess().getExponentAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Nonnegative_number__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Nonnegative_number__Group_1__0__Impl
	rule__Nonnegative_number__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonnegative_number__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonnegative_numberAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getNonnegative_numberAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Nonnegative_number__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Nonnegative_number__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonnegative_number__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonnegative_numberAccess().getFloatseqAssignment_1_1()); }
(rule__Nonnegative_number__FloatseqAssignment_1_1)
{ after(grammarAccess.getNonnegative_numberAccess().getFloatseqAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Exponent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exponent__Group__0__Impl
	rule__Exponent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentAccess().getAlternatives_0()); }
(rule__Exponent__Alternatives_0)
{ after(grammarAccess.getExponentAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exponent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exponent__Group__1__Impl
	rule__Exponent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentAccess().getSignAssignment_1()); }
(rule__Exponent__SignAssignment_1)?
{ after(grammarAccess.getExponentAccess().getSignAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exponent__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exponent__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentAccess().getDigit_sequenceAssignment_2()); }
(rule__Exponent__Digit_sequenceAssignment_2)
{ after(grammarAccess.getExponentAccess().getDigit_sequenceAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Svg_path__Moveto_drawto_command_groupsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSvg_pathAccess().getMoveto_drawto_command_groupsMoveto_drawto_command_groupsParserRuleCall_0()); }
	rulemoveto_drawto_command_groups{ after(grammarAccess.getSvg_pathAccess().getMoveto_drawto_command_groupsMoveto_drawto_command_groupsParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Moveto_drawto_command_groups__CommandsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveto_drawto_command_groupsAccess().getCommandsMoveto_drawto_command_groupParserRuleCall_0()); }
	rulemoveto_drawto_command_group{ after(grammarAccess.getMoveto_drawto_command_groupsAccess().getCommandsMoveto_drawto_command_groupParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Moveto_drawto_command_group__MovetoAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveto_drawto_command_groupAccess().getMovetoMovetoParserRuleCall_0_0()); }
	rulemoveto{ after(grammarAccess.getMoveto_drawto_command_groupAccess().getMovetoMovetoParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Moveto_drawto_command_group__Drawto_commandsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveto_drawto_command_groupAccess().getDrawto_commandsDrawto_commandsParserRuleCall_1_0()); }
	ruledrawto_commands{ after(grammarAccess.getMoveto_drawto_command_groupAccess().getDrawto_commandsDrawto_commandsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Moveto__PointAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMovetoAccess().getPointCoordinate_pairParserRuleCall_1_0()); }
	rulecoordinate_pair{ after(grammarAccess.getMovetoAccess().getPointCoordinate_pairParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Moveto__Lineto_argument_sequenceAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMovetoAccess().getLineto_argument_sequenceLineto_argument_sequenceParserRuleCall_3_0()); }
	rulelineto_argument_sequence{ after(grammarAccess.getMovetoAccess().getLineto_argument_sequenceLineto_argument_sequenceParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Lineto_argument_sequence__PairsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineto_argument_sequenceAccess().getPairsCoordinate_pairParserRuleCall_0_0()); }
	rulecoordinate_pair{ after(grammarAccess.getLineto_argument_sequenceAccess().getPairsCoordinate_pairParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Lineto_argument_sequence__PairsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineto_argument_sequenceAccess().getPairsCoordinate_pairParserRuleCall_1_1_0()); }
	rulecoordinate_pair{ after(grammarAccess.getLineto_argument_sequenceAccess().getPairsCoordinate_pairParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Drawto_commands__Drawto_commandsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDrawto_commandsAccess().getDrawto_commandsDrawto_commandParserRuleCall_0()); }
	ruledrawto_command{ after(grammarAccess.getDrawto_commandsAccess().getDrawto_commandsDrawto_commandParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Lineto__Lineto_argument_sequenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinetoAccess().getLineto_argument_sequenceLineto_argument_sequenceParserRuleCall_1_0()); }
	rulelineto_argument_sequence{ after(grammarAccess.getLinetoAccess().getLineto_argument_sequenceLineto_argument_sequenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Horizontal_lineto__Horizontal_lineto_argument_sequenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHorizontal_linetoAccess().getHorizontal_lineto_argument_sequenceHorizontal_lineto_argument_sequenceParserRuleCall_1_0()); }
	rulehorizontal_lineto_argument_sequence{ after(grammarAccess.getHorizontal_linetoAccess().getHorizontal_lineto_argument_sequenceHorizontal_lineto_argument_sequenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Horizontal_lineto_argument_sequence__CoordinatesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getCoordinatesCoordinateParserRuleCall_0_0()); }
	rulecoordinate{ after(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getCoordinatesCoordinateParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Horizontal_lineto_argument_sequence__CoordinatesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getCoordinatesCoordinateParserRuleCall_1_1_0()); }
	rulecoordinate{ after(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getCoordinatesCoordinateParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vertical_lineto__Vertical_lineto_argument_sequenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVertical_linetoAccess().getVertical_lineto_argument_sequenceVertical_lineto_argument_sequenceParserRuleCall_1_0()); }
	rulevertical_lineto_argument_sequence{ after(grammarAccess.getVertical_linetoAccess().getVertical_lineto_argument_sequenceVertical_lineto_argument_sequenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vertical_lineto_argument_sequence__CoordinatesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVertical_lineto_argument_sequenceAccess().getCoordinatesCoordinateParserRuleCall_0_0()); }
	rulecoordinate{ after(grammarAccess.getVertical_lineto_argument_sequenceAccess().getCoordinatesCoordinateParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vertical_lineto_argument_sequence__CoordinatesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVertical_lineto_argument_sequenceAccess().getCoordinatesCoordinateParserRuleCall_1_1_0()); }
	rulecoordinate{ after(grammarAccess.getVertical_lineto_argument_sequenceAccess().getCoordinatesCoordinateParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto__Curveto_argument_sequenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurvetoAccess().getCurveto_argument_sequenceCurveto_argument_sequenceParserRuleCall_1_0()); }
	rulecurveto_argument_sequence{ after(grammarAccess.getCurvetoAccess().getCurveto_argument_sequenceCurveto_argument_sequenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto_argument_sequence__Curveto_argumentsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurveto_argument_sequenceAccess().getCurveto_argumentsCurveto_argumentParserRuleCall_0_0()); }
	rulecurveto_argument{ after(grammarAccess.getCurveto_argument_sequenceAccess().getCurveto_argumentsCurveto_argumentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto_argument_sequence__Curveto_argumentsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurveto_argument_sequenceAccess().getCurveto_argumentsCurveto_argumentParserRuleCall_1_1_0()); }
	rulecurveto_argument{ after(grammarAccess.getCurveto_argument_sequenceAccess().getCurveto_argumentsCurveto_argumentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto_argument__C1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurveto_argumentAccess().getC1Coordinate_pairParserRuleCall_0_0()); }
	rulecoordinate_pair{ after(grammarAccess.getCurveto_argumentAccess().getC1Coordinate_pairParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto_argument__C2Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurveto_argumentAccess().getC2Coordinate_pairParserRuleCall_2_0()); }
	rulecoordinate_pair{ after(grammarAccess.getCurveto_argumentAccess().getC2Coordinate_pairParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Curveto_argument__C3Assignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCurveto_argumentAccess().getC3Coordinate_pairParserRuleCall_4_0()); }
	rulecoordinate_pair{ after(grammarAccess.getCurveto_argumentAccess().getC3Coordinate_pairParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_curveto__Smooth_curveto_argument_sequenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_curvetoAccess().getSmooth_curveto_argument_sequenceSmooth_curveto_argument_sequenceParserRuleCall_1_0()); }
	rulesmooth_curveto_argument_sequence{ after(grammarAccess.getSmooth_curvetoAccess().getSmooth_curveto_argument_sequenceSmooth_curveto_argument_sequenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_curveto_argument_sequence__Smooth_curveto_argumentsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getSmooth_curveto_argumentsSmooth_curveto_argumentParserRuleCall_0_0()); }
	rulesmooth_curveto_argument{ after(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getSmooth_curveto_argumentsSmooth_curveto_argumentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_curveto_argument_sequence__Smooth_curveto_argumentsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getSmooth_curveto_argumentsSmooth_curveto_argumentParserRuleCall_1_1_0()); }
	rulesmooth_curveto_argument{ after(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getSmooth_curveto_argumentsSmooth_curveto_argumentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_curveto_argument__C1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_curveto_argumentAccess().getC1Coordinate_pairParserRuleCall_0_0()); }
	rulecoordinate_pair{ after(grammarAccess.getSmooth_curveto_argumentAccess().getC1Coordinate_pairParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_curveto_argument__C2Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_curveto_argumentAccess().getC2Coordinate_pairParserRuleCall_2_0()); }
	rulecoordinate_pair{ after(grammarAccess.getSmooth_curveto_argumentAccess().getC2Coordinate_pairParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quadratic_bezier_curveto_argument_sequence__Quadratic_bezier_curveto_argumentsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getQuadratic_bezier_curveto_argumentsQuadratic_bezier_curveto_argumentParserRuleCall_0_0()); }
	rulequadratic_bezier_curveto_argument{ after(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getQuadratic_bezier_curveto_argumentsQuadratic_bezier_curveto_argumentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quadratic_bezier_curveto_argument_sequence__Quadratic_bezier_curveto_argumentsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getQuadratic_bezier_curveto_argumentsQuadratic_bezier_curveto_argumentParserRuleCall_1_1_0()); }
	rulequadratic_bezier_curveto_argument{ after(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getQuadratic_bezier_curveto_argumentsQuadratic_bezier_curveto_argumentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quadratic_bezier_curveto_argument__C1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuadratic_bezier_curveto_argumentAccess().getC1Coordinate_pairParserRuleCall_0_0()); }
	rulecoordinate_pair{ after(grammarAccess.getQuadratic_bezier_curveto_argumentAccess().getC1Coordinate_pairParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quadratic_bezier_curveto_argument__C2Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuadratic_bezier_curveto_argumentAccess().getC2Coordinate_pairParserRuleCall_2_0()); }
	rulecoordinate_pair{ after(grammarAccess.getQuadratic_bezier_curveto_argumentAccess().getC2Coordinate_pairParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_quadratic_bezier_curveto__Smooth_quadratic_bezier_curveto_argument_sequenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_quadratic_bezier_curvetoAccess().getSmooth_quadratic_bezier_curveto_argument_sequenceSmooth_quadratic_bezier_curveto_argument_sequenceParserRuleCall_1_0()); }
	rulesmooth_quadratic_bezier_curveto_argument_sequence{ after(grammarAccess.getSmooth_quadratic_bezier_curvetoAccess().getSmooth_quadratic_bezier_curveto_argument_sequenceSmooth_quadratic_bezier_curveto_argument_sequenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_quadratic_bezier_curveto_argument_sequence__Coordinate_pairsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getCoordinate_pairsCoordinate_pairParserRuleCall_0_0()); }
	rulecoordinate_pair{ after(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getCoordinate_pairsCoordinate_pairParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Smooth_quadratic_bezier_curveto_argument_sequence__Coordinate_pairsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getCoordinate_pairsCoordinate_pairParserRuleCall_1_1_0()); }
	rulecoordinate_pair{ after(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getCoordinate_pairsCoordinate_pairParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc__Elliptical_arc_argument_sequenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arcAccess().getElliptical_arc_argument_sequenceElliptical_arc_argument_sequenceParserRuleCall_1_0()); }
	ruleelliptical_arc_argument_sequence{ after(grammarAccess.getElliptical_arcAccess().getElliptical_arc_argument_sequenceElliptical_arc_argument_sequenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument_sequence__Elliptical_arc_argumentsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argument_sequenceAccess().getElliptical_arc_argumentsElliptical_arc_argumentParserRuleCall_0_0()); }
	ruleelliptical_arc_argument{ after(grammarAccess.getElliptical_arc_argument_sequenceAccess().getElliptical_arc_argumentsElliptical_arc_argumentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument_sequence__Elliptical_arc_argumentsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argument_sequenceAccess().getElliptical_arc_argumentsElliptical_arc_argumentParserRuleCall_1_1_0()); }
	ruleelliptical_arc_argument{ after(grammarAccess.getElliptical_arc_argument_sequenceAccess().getElliptical_arc_argumentsElliptical_arc_argumentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__RxAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getRxNonnegative_numberParserRuleCall_0_0()); }
	rulenonnegative_number{ after(grammarAccess.getElliptical_arc_argumentAccess().getRxNonnegative_numberParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__RyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getRyNonnegative_numberParserRuleCall_2_0()); }
	rulenonnegative_number{ after(grammarAccess.getElliptical_arc_argumentAccess().getRyNonnegative_numberParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__RotationAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getRotationNumberParserRuleCall_4_0()); }
	rulenumber{ after(grammarAccess.getElliptical_arc_argumentAccess().getRotationNumberParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__LargearcflagAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getLargearcflagFlagParserRuleCall_6_0()); }
	ruleflag{ after(grammarAccess.getElliptical_arc_argumentAccess().getLargearcflagFlagParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__SweepflagAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getSweepflagFlagParserRuleCall_8_0()); }
	ruleflag{ after(grammarAccess.getElliptical_arc_argumentAccess().getSweepflagFlagParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Elliptical_arc_argument__Coordinate_pairAssignment_10
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElliptical_arc_argumentAccess().getCoordinate_pairCoordinate_pairParserRuleCall_10_0()); }
	rulecoordinate_pair{ after(grammarAccess.getElliptical_arc_argumentAccess().getCoordinate_pairCoordinate_pairParserRuleCall_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinate_pair__C1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCoordinate_pairAccess().getC1CoordinateParserRuleCall_0_0()); }
	rulecoordinate{ after(grammarAccess.getCoordinate_pairAccess().getC1CoordinateParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinate_pair__C2Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCoordinate_pairAccess().getC2CoordinateParserRuleCall_2_0()); }
	rulecoordinate{ after(grammarAccess.getCoordinate_pairAccess().getC2CoordinateParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__SignAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getSignSignParserRuleCall_0_0()); }
	rulesign{ after(grammarAccess.getNumberAccess().getSignSignParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Nonnegative_numberAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getNonnegative_numberNonnegative_numberParserRuleCall_1_0()); }
	rulenonnegative_number{ after(grammarAccess.getNumberAccess().getNonnegative_numberNonnegative_numberParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Nonnegative_number__IntseqAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonnegative_numberAccess().getIntseqDigit_sequenceParserRuleCall_0_0()); }
	ruledigit_sequence{ after(grammarAccess.getNonnegative_numberAccess().getIntseqDigit_sequenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Nonnegative_number__FloatseqAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonnegative_numberAccess().getFloatseqDigit_sequenceParserRuleCall_1_1_0()); }
	ruledigit_sequence{ after(grammarAccess.getNonnegative_numberAccess().getFloatseqDigit_sequenceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Nonnegative_number__ExponentAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonnegative_numberAccess().getExponentExponentParserRuleCall_2_0()); }
	ruleexponent{ after(grammarAccess.getNonnegative_numberAccess().getExponentExponentParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__SignAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentAccess().getSignSignParserRuleCall_1_0()); }
	rulesign{ after(grammarAccess.getExponentAccess().getSignSignParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Digit_sequenceAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentAccess().getDigit_sequenceDigit_sequenceParserRuleCall_2_0()); }
	ruledigit_sequence{ after(grammarAccess.getExponentAccess().getDigit_sequenceDigit_sequenceParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Digit_sequence__DigitsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDigit_sequenceAccess().getDigitsDigitParserRuleCall_0()); }
	ruledigit{ after(grammarAccess.getDigit_sequenceAccess().getDigitsDigitParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_WSP : (' '|'\t'|'\r'|'\n');


