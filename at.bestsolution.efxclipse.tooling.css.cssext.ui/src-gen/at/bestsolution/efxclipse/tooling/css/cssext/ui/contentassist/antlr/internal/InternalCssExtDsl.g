/*
* generated by Xtext
*/
grammar InternalCssExtDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package at.bestsolution.efxclipse.tooling.css.cssext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.bestsolution.efxclipse.tooling.css.cssext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import at.bestsolution.efxclipse.tooling.css.cssext.services.CssExtDslGrammarAccess;

}

@parser::members {
 
 	private CssExtDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CssExtDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleCssExtension
entryRuleCssExtension 
:
{ before(grammarAccess.getCssExtensionRule()); }
	 ruleCssExtension
{ after(grammarAccess.getCssExtensionRule()); } 
	 EOF 
;

// Rule CssExtension
ruleCssExtension
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCssExtensionAccess().getGroup()); }
(rule__CssExtension__Group__0)
{ after(grammarAccess.getCssExtensionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValidID
entryRuleValidID 
:
{ before(grammarAccess.getValidIDRule()); }
	 ruleValidID
{ after(grammarAccess.getValidIDRule()); } 
	 EOF 
;

// Rule ValidID
ruleValidID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard 
:
{ before(grammarAccess.getQualifiedNameWithWildCardRule()); }
	 ruleQualifiedNameWithWildCard
{ after(grammarAccess.getQualifiedNameWithWildCardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup()); }
(rule__QualifiedNameWithWildCard__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration 
:
{ before(grammarAccess.getPackageDeclarationRule()); }
	 rulePackageDeclaration
{ after(grammarAccess.getPackageDeclarationRule()); } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageDeclarationAccess().getGroup()); }
(rule__PackageDeclaration__Group__0)
{ after(grammarAccess.getPackageDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCSSRuleSet
entryRuleCSSRuleSet 
:
{ before(grammarAccess.getCSSRuleSetRule()); }
	 ruleCSSRuleSet
{ after(grammarAccess.getCSSRuleSetRule()); } 
	 EOF 
;

// Rule CSSRuleSet
ruleCSSRuleSet
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getCSSRuleSetAccess().getRulesAssignment()); }
(rule__CSSRuleSet__RulesAssignment)
{ after(grammarAccess.getCSSRuleSetAccess().getRulesAssignment()); }
)
(
{ before(grammarAccess.getCSSRuleSetAccess().getRulesAssignment()); }
(rule__CSSRuleSet__RulesAssignment)*
{ after(grammarAccess.getCSSRuleSetAccess().getRulesAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCSSRuleId
entryRuleCSSRuleId 
:
{ before(grammarAccess.getCSSRuleIdRule()); }
	 ruleCSSRuleId
{ after(grammarAccess.getCSSRuleIdRule()); } 
	 EOF 
;

// Rule CSSRuleId
ruleCSSRuleId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCSSRuleIdAccess().getNameAssignment()); }
(rule__CSSRuleId__NameAssignment)
{ after(grammarAccess.getCSSRuleIdAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCSSRuleRef
entryRuleCSSRuleRef 
:
{ before(grammarAccess.getCSSRuleRefRule()); }
	 ruleCSSRuleRef
{ after(grammarAccess.getCSSRuleRefRule()); } 
	 EOF 
;

// Rule CSSRuleRef
ruleCSSRuleRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCSSRuleRefAccess().getGroup()); }
(rule__CSSRuleRef__Group__0)
{ after(grammarAccess.getCSSRuleRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCSSRuleAssignment
entryRuleCSSRuleAssignment 
:
{ before(grammarAccess.getCSSRuleAssignmentRule()); }
	 ruleCSSRuleAssignment
{ after(grammarAccess.getCSSRuleAssignmentRule()); } 
	 EOF 
;

// Rule CSSRuleAssignment
ruleCSSRuleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCSSRuleAssignmentAccess().getGroup()); }
(rule__CSSRuleAssignment__Group__0)
{ after(grammarAccess.getCSSRuleAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCSSRuleOrExpression
entryRuleCSSRuleOrExpression 
:
{ before(grammarAccess.getCSSRuleOrExpressionRule()); }
	 ruleCSSRuleOrExpression
{ after(grammarAccess.getCSSRuleOrExpressionRule()); } 
	 EOF 
;

// Rule CSSRuleOrExpression
ruleCSSRuleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCSSRuleOrExpressionAccess().getGroup()); }
(rule__CSSRuleOrExpression__Group__0)
{ after(grammarAccess.getCSSRuleOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCSSRuleXorExpression
entryRuleCSSRuleXorExpression 
:
{ before(grammarAccess.getCSSRuleXorExpressionRule()); }
	 ruleCSSRuleXorExpression
{ after(grammarAccess.getCSSRuleXorExpressionRule()); } 
	 EOF 
;

// Rule CSSRuleXorExpression
ruleCSSRuleXorExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCSSRuleXorExpressionAccess().getGroup()); }
(rule__CSSRuleXorExpression__Group__0)
{ after(grammarAccess.getCSSRuleXorExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCSSRuleBracketExpression
entryRuleCSSRuleBracketExpression 
:
{ before(grammarAccess.getCSSRuleBracketExpressionRule()); }
	 ruleCSSRuleBracketExpression
{ after(grammarAccess.getCSSRuleBracketExpressionRule()); } 
	 EOF 
;

// Rule CSSRuleBracketExpression
ruleCSSRuleBracketExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCSSRuleBracketExpressionAccess().getGroup()); }
(rule__CSSRuleBracketExpression__Group__0)
{ after(grammarAccess.getCSSRuleBracketExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCSSRulePostfixExpression
entryRuleCSSRulePostfixExpression 
:
{ before(grammarAccess.getCSSRulePostfixExpressionRule()); }
	 ruleCSSRulePostfixExpression
{ after(grammarAccess.getCSSRulePostfixExpressionRule()); } 
	 EOF 
;

// Rule CSSRulePostfixExpression
ruleCSSRulePostfixExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCSSRulePostfixExpressionAccess().getGroup()); }
(rule__CSSRulePostfixExpression__Group__0)
{ after(grammarAccess.getCSSRulePostfixExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCSSRuleConcat
entryRuleCSSRuleConcat 
:
{ before(grammarAccess.getCSSRuleConcatRule()); }
	 ruleCSSRuleConcat
{ after(grammarAccess.getCSSRuleConcatRule()); } 
	 EOF 
;

// Rule CSSRuleConcat
ruleCSSRuleConcat
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCSSRuleConcatAccess().getGroup()); }
(rule__CSSRuleConcat__Group__0)
{ after(grammarAccess.getCSSRuleConcatAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCSSRuleLiteral
entryRuleCSSRuleLiteral 
:
{ before(grammarAccess.getCSSRuleLiteralRule()); }
	 ruleCSSRuleLiteral
{ after(grammarAccess.getCSSRuleLiteralRule()); } 
	 EOF 
;

// Rule CSSRuleLiteral
ruleCSSRuleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCSSRuleLiteralAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getCSSRuleLiteralAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCSSRulePrimaryExpression
entryRuleCSSRulePrimaryExpression 
:
{ before(grammarAccess.getCSSRulePrimaryExpressionRule()); }
	 ruleCSSRulePrimaryExpression
{ after(grammarAccess.getCSSRulePrimaryExpressionRule()); } 
	 EOF 
;

// Rule CSSRulePrimaryExpression
ruleCSSRulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCSSRulePrimaryExpressionAccess().getAlternatives()); }
(rule__CSSRulePrimaryExpression__Alternatives)
{ after(grammarAccess.getCSSRulePrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__CSSRulePostfixExpression__CAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRulePostfixExpressionAccess().getCAsteriskKeyword_1_0_0()); }

	'*' 

{ after(grammarAccess.getCSSRulePostfixExpressionAccess().getCAsteriskKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getCSSRulePostfixExpressionAccess().getCPlusSignKeyword_1_0_1()); }

	'+' 

{ after(grammarAccess.getCSSRulePostfixExpressionAccess().getCPlusSignKeyword_1_0_1()); }
)

    |(
{ before(grammarAccess.getCSSRulePostfixExpressionAccess().getCQuestionMarkKeyword_1_0_2()); }

	'?' 

{ after(grammarAccess.getCSSRulePostfixExpressionAccess().getCQuestionMarkKeyword_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRulePrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRulePrimaryExpressionAccess().getCSSRuleRefParserRuleCall_0()); }
	ruleCSSRuleRef
{ after(grammarAccess.getCSSRulePrimaryExpressionAccess().getCSSRuleRefParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCSSRulePrimaryExpressionAccess().getCSSRuleBracketExpressionParserRuleCall_1()); }
	ruleCSSRuleBracketExpression
{ after(grammarAccess.getCSSRulePrimaryExpressionAccess().getCSSRuleBracketExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCSSRulePrimaryExpressionAccess().getCSSRuleLiteralParserRuleCall_2()); }
	ruleCSSRuleLiteral
{ after(grammarAccess.getCSSRulePrimaryExpressionAccess().getCSSRuleLiteralParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__CssExtension__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CssExtension__Group__0__Impl
	rule__CssExtension__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CssExtension__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCssExtensionAccess().getImportsAssignment_0()); }
(rule__CssExtension__ImportsAssignment_0)*
{ after(grammarAccess.getCssExtensionAccess().getImportsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CssExtension__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CssExtension__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CssExtension__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCssExtensionAccess().getPackageDefAssignment_1()); }
(rule__CssExtension__PackageDefAssignment_1)?
{ after(grammarAccess.getCssExtensionAccess().getPackageDefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
(rule__Import__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); }
	ruleValidID
{ after(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
(
	'.' 
)
{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); }
	ruleValidID
{ after(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildCard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildCard__Group__0__Impl
	rule__QualifiedNameWithWildCard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildCard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildCard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup_1()); }
(rule__QualifiedNameWithWildCard__Group_1__0)?
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildCard__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildCard__Group_1__0__Impl
	rule__QualifiedNameWithWildCard__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildCard__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildCard__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PackageDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__0__Impl
	rule__PackageDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__1__Impl
	rule__PackageDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1()); }
(rule__PackageDeclaration__NameAssignment_1)
{ after(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__2__Impl
	rule__PackageDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getPackageDeclarationAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__3__Impl
	rule__PackageDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getRuleAssignment_3()); }
(rule__PackageDeclaration__RuleAssignment_3)?
{ after(grammarAccess.getPackageDeclarationAccess().getRuleAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getPackageDeclarationAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__CSSRuleRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleRef__Group__0__Impl
	rule__CSSRuleRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleRefAccess().getLessThanSignKeyword_0()); }

	'<' 

{ after(grammarAccess.getCSSRuleRefAccess().getLessThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSSRuleRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleRef__Group__1__Impl
	rule__CSSRuleRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleRefAccess().getRefAssignment_1()); }
(rule__CSSRuleRef__RefAssignment_1)
{ after(grammarAccess.getCSSRuleRefAccess().getRefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSSRuleRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleRef__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleRefAccess().getGreaterThanSignKeyword_2()); }

	'>' 

{ after(grammarAccess.getCSSRuleRefAccess().getGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CSSRuleAssignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleAssignment__Group__0__Impl
	rule__CSSRuleAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleAssignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleAssignmentAccess().getCSSRuleAssignmentAction_0()); }
(

)
{ after(grammarAccess.getCSSRuleAssignmentAccess().getCSSRuleAssignmentAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSSRuleAssignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleAssignment__Group__1__Impl
	rule__CSSRuleAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleAssignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleAssignmentAccess().getIdAssignment_1()); }
(rule__CSSRuleAssignment__IdAssignment_1)
{ after(grammarAccess.getCSSRuleAssignmentAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSSRuleAssignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleAssignment__Group__2__Impl
	rule__CSSRuleAssignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleAssignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleAssignmentAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getCSSRuleAssignmentAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSSRuleAssignment__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleAssignment__Group__3__Impl
	rule__CSSRuleAssignment__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleAssignment__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleAssignmentAccess().getRAssignment_3()); }
(rule__CSSRuleAssignment__RAssignment_3)
{ after(grammarAccess.getCSSRuleAssignmentAccess().getRAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSSRuleAssignment__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleAssignment__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleAssignment__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleAssignmentAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getCSSRuleAssignmentAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__CSSRuleOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleOrExpression__Group__0__Impl
	rule__CSSRuleOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleOrExpressionAccess().getOrsAssignment_0()); }
(rule__CSSRuleOrExpression__OrsAssignment_0)
{ after(grammarAccess.getCSSRuleOrExpressionAccess().getOrsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSSRuleOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleOrExpressionAccess().getGroup_1()); }
(rule__CSSRuleOrExpression__Group_1__0)*
{ after(grammarAccess.getCSSRuleOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CSSRuleOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleOrExpression__Group_1__0__Impl
	rule__CSSRuleOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleOrExpressionAccess().getVerticalLineKeyword_1_0()); }

	'|' 

{ after(grammarAccess.getCSSRuleOrExpressionAccess().getVerticalLineKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSSRuleOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleOrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleOrExpressionAccess().getOrsAssignment_1_1()); }
(rule__CSSRuleOrExpression__OrsAssignment_1_1)
{ after(grammarAccess.getCSSRuleOrExpressionAccess().getOrsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CSSRuleXorExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleXorExpression__Group__0__Impl
	rule__CSSRuleXorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleXorExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleXorExpressionAccess().getXorsAssignment_0()); }
(rule__CSSRuleXorExpression__XorsAssignment_0)
{ after(grammarAccess.getCSSRuleXorExpressionAccess().getXorsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSSRuleXorExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleXorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleXorExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleXorExpressionAccess().getGroup_1()); }
(rule__CSSRuleXorExpression__Group_1__0)*
{ after(grammarAccess.getCSSRuleXorExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CSSRuleXorExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleXorExpression__Group_1__0__Impl
	rule__CSSRuleXorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleXorExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleXorExpressionAccess().getVerticalLineVerticalLineKeyword_1_0()); }

	'||' 

{ after(grammarAccess.getCSSRuleXorExpressionAccess().getVerticalLineVerticalLineKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSSRuleXorExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleXorExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleXorExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleXorExpressionAccess().getXorsAssignment_1_1()); }
(rule__CSSRuleXorExpression__XorsAssignment_1_1)
{ after(grammarAccess.getCSSRuleXorExpressionAccess().getXorsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CSSRuleBracketExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleBracketExpression__Group__0__Impl
	rule__CSSRuleBracketExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleBracketExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleBracketExpressionAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getCSSRuleBracketExpressionAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSSRuleBracketExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleBracketExpression__Group__1__Impl
	rule__CSSRuleBracketExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleBracketExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleBracketExpressionAccess().getCSSRuleOrExpressionParserRuleCall_1()); }
	ruleCSSRuleOrExpression
{ after(grammarAccess.getCSSRuleBracketExpressionAccess().getCSSRuleOrExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSSRuleBracketExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleBracketExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleBracketExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleBracketExpressionAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getCSSRuleBracketExpressionAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CSSRulePostfixExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRulePostfixExpression__Group__0__Impl
	rule__CSSRulePostfixExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRulePostfixExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRulePostfixExpressionAccess().getCSSRuleConcatParserRuleCall_0()); }
	ruleCSSRuleConcat
{ after(grammarAccess.getCSSRulePostfixExpressionAccess().getCSSRuleConcatParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSSRulePostfixExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRulePostfixExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRulePostfixExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRulePostfixExpressionAccess().getCAssignment_1()); }
(rule__CSSRulePostfixExpression__CAssignment_1)?
{ after(grammarAccess.getCSSRulePostfixExpressionAccess().getCAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CSSRuleConcat__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleConcat__Group__0__Impl
	rule__CSSRuleConcat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleConcat__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleConcatAccess().getConcAssignment_0()); }
(rule__CSSRuleConcat__ConcAssignment_0)
{ after(grammarAccess.getCSSRuleConcatAccess().getConcAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSSRuleConcat__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSSRuleConcat__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleConcat__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleConcatAccess().getConcAssignment_1()); }
(rule__CSSRuleConcat__ConcAssignment_1)?
{ after(grammarAccess.getCSSRuleConcatAccess().getConcAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__CssExtension__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCssExtensionAccess().getImportsImportParserRuleCall_0_0()); }
	ruleImport{ after(grammarAccess.getCssExtensionAccess().getImportsImportParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CssExtension__PackageDefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCssExtensionAccess().getPackageDefPackageDeclarationParserRuleCall_1_0()); }
	rulePackageDeclaration{ after(grammarAccess.getCssExtensionAccess().getPackageDefPackageDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); }
	ruleQualifiedNameWithWildCard{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__RuleAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getRuleCSSRuleSetParserRuleCall_3_0()); }
	ruleCSSRuleSet{ after(grammarAccess.getPackageDeclarationAccess().getRuleCSSRuleSetParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleSet__RulesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleSetAccess().getRulesCSSRuleAssignmentParserRuleCall_0()); }
	ruleCSSRuleAssignment{ after(grammarAccess.getCSSRuleSetAccess().getRulesCSSRuleAssignmentParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleId__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleIdAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getCSSRuleIdAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleRef__RefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleRefAccess().getRefCSSRuleIdCrossReference_1_0()); }
(
{ before(grammarAccess.getCSSRuleRefAccess().getRefCSSRuleIdIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getCSSRuleRefAccess().getRefCSSRuleIdIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getCSSRuleRefAccess().getRefCSSRuleIdCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleAssignment__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleAssignmentAccess().getIdCSSRuleIdParserRuleCall_1_0()); }
	ruleCSSRuleId{ after(grammarAccess.getCSSRuleAssignmentAccess().getIdCSSRuleIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleAssignment__RAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleAssignmentAccess().getRCSSRuleOrExpressionParserRuleCall_3_0()); }
	ruleCSSRuleOrExpression{ after(grammarAccess.getCSSRuleAssignmentAccess().getRCSSRuleOrExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleOrExpression__OrsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleOrExpressionAccess().getOrsCSSRuleXorExpressionParserRuleCall_0_0()); }
	ruleCSSRuleXorExpression{ after(grammarAccess.getCSSRuleOrExpressionAccess().getOrsCSSRuleXorExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleOrExpression__OrsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleOrExpressionAccess().getOrsCSSRuleXorExpressionParserRuleCall_1_1_0()); }
	ruleCSSRuleXorExpression{ after(grammarAccess.getCSSRuleOrExpressionAccess().getOrsCSSRuleXorExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleXorExpression__XorsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleXorExpressionAccess().getXorsCSSRulePostfixExpressionParserRuleCall_0_0()); }
	ruleCSSRulePostfixExpression{ after(grammarAccess.getCSSRuleXorExpressionAccess().getXorsCSSRulePostfixExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleXorExpression__XorsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleXorExpressionAccess().getXorsCSSRulePostfixExpressionParserRuleCall_1_1_0()); }
	ruleCSSRulePostfixExpression{ after(grammarAccess.getCSSRuleXorExpressionAccess().getXorsCSSRulePostfixExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRulePostfixExpression__CAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRulePostfixExpressionAccess().getCAlternatives_1_0()); }
(rule__CSSRulePostfixExpression__CAlternatives_1_0)
{ after(grammarAccess.getCSSRulePostfixExpressionAccess().getCAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleConcat__ConcAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleConcatAccess().getConcCSSRulePrimaryExpressionParserRuleCall_0_0()); }
	ruleCSSRulePrimaryExpression{ after(grammarAccess.getCSSRuleConcatAccess().getConcCSSRulePrimaryExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSSRuleConcat__ConcAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSSRuleConcatAccess().getConcCSSRulePrimaryExpressionParserRuleCall_1_0()); }
	ruleCSSRulePrimaryExpression{ after(grammarAccess.getCSSRuleConcatAccess().getConcCSSRulePrimaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


