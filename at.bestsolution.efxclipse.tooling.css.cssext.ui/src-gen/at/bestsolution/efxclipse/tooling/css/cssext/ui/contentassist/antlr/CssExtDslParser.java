/*
* generated by Xtext
*/
package at.bestsolution.efxclipse.tooling.css.cssext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import at.bestsolution.efxclipse.tooling.css.cssext.services.CssExtDslGrammarAccess;

public class CssExtDslParser extends AbstractContentAssistParser {
	
	@Inject
	private CssExtDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected at.bestsolution.efxclipse.tooling.css.cssext.ui.contentassist.antlr.internal.InternalCssExtDslParser createParser() {
		at.bestsolution.efxclipse.tooling.css.cssext.ui.contentassist.antlr.internal.InternalCssExtDslParser result = new at.bestsolution.efxclipse.tooling.css.cssext.ui.contentassist.antlr.internal.InternalCssExtDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCSSRulePostfixExpressionAccess().getCAlternatives_1_0(), "rule__CSSRulePostfixExpression__CAlternatives_1_0");
					put(grammarAccess.getCSSRulePrimaryExpressionAccess().getAlternatives(), "rule__CSSRulePrimaryExpression__Alternatives");
					put(grammarAccess.getCssExtensionAccess().getGroup(), "rule__CssExtension__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup(), "rule__QualifiedNameWithWildCard__Group__0");
					put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup_1(), "rule__QualifiedNameWithWildCard__Group_1__0");
					put(grammarAccess.getPackageDeclarationAccess().getGroup(), "rule__PackageDeclaration__Group__0");
					put(grammarAccess.getCSSRuleRefAccess().getGroup(), "rule__CSSRuleRef__Group__0");
					put(grammarAccess.getCSSRuleAssignmentAccess().getGroup(), "rule__CSSRuleAssignment__Group__0");
					put(grammarAccess.getCSSRuleOrExpressionAccess().getGroup(), "rule__CSSRuleOrExpression__Group__0");
					put(grammarAccess.getCSSRuleOrExpressionAccess().getGroup_1(), "rule__CSSRuleOrExpression__Group_1__0");
					put(grammarAccess.getCSSRuleXorExpressionAccess().getGroup(), "rule__CSSRuleXorExpression__Group__0");
					put(grammarAccess.getCSSRuleXorExpressionAccess().getGroup_1(), "rule__CSSRuleXorExpression__Group_1__0");
					put(grammarAccess.getCSSRuleBracketExpressionAccess().getGroup(), "rule__CSSRuleBracketExpression__Group__0");
					put(grammarAccess.getCSSRulePostfixExpressionAccess().getGroup(), "rule__CSSRulePostfixExpression__Group__0");
					put(grammarAccess.getCSSRuleConcatAccess().getGroup(), "rule__CSSRuleConcat__Group__0");
					put(grammarAccess.getCssExtensionAccess().getImportsAssignment_0(), "rule__CssExtension__ImportsAssignment_0");
					put(grammarAccess.getCssExtensionAccess().getPackageDefAssignment_1(), "rule__CssExtension__PackageDefAssignment_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1(), "rule__PackageDeclaration__NameAssignment_1");
					put(grammarAccess.getPackageDeclarationAccess().getRuleAssignment_3(), "rule__PackageDeclaration__RuleAssignment_3");
					put(grammarAccess.getCSSRuleSetAccess().getRulesAssignment(), "rule__CSSRuleSet__RulesAssignment");
					put(grammarAccess.getCSSRuleIdAccess().getNameAssignment(), "rule__CSSRuleId__NameAssignment");
					put(grammarAccess.getCSSRuleRefAccess().getRefAssignment_1(), "rule__CSSRuleRef__RefAssignment_1");
					put(grammarAccess.getCSSRuleAssignmentAccess().getIdAssignment_1(), "rule__CSSRuleAssignment__IdAssignment_1");
					put(grammarAccess.getCSSRuleAssignmentAccess().getRAssignment_3(), "rule__CSSRuleAssignment__RAssignment_3");
					put(grammarAccess.getCSSRuleOrExpressionAccess().getOrsAssignment_0(), "rule__CSSRuleOrExpression__OrsAssignment_0");
					put(grammarAccess.getCSSRuleOrExpressionAccess().getOrsAssignment_1_1(), "rule__CSSRuleOrExpression__OrsAssignment_1_1");
					put(grammarAccess.getCSSRuleXorExpressionAccess().getXorsAssignment_0(), "rule__CSSRuleXorExpression__XorsAssignment_0");
					put(grammarAccess.getCSSRuleXorExpressionAccess().getXorsAssignment_1_1(), "rule__CSSRuleXorExpression__XorsAssignment_1_1");
					put(grammarAccess.getCSSRulePostfixExpressionAccess().getCAssignment_1(), "rule__CSSRulePostfixExpression__CAssignment_1");
					put(grammarAccess.getCSSRuleConcatAccess().getConcAssignment_0(), "rule__CSSRuleConcat__ConcAssignment_0");
					put(grammarAccess.getCSSRuleConcatAccess().getConcAssignment_1(), "rule__CSSRuleConcat__ConcAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			at.bestsolution.efxclipse.tooling.css.cssext.ui.contentassist.antlr.internal.InternalCssExtDslParser typedParser = (at.bestsolution.efxclipse.tooling.css.cssext.ui.contentassist.antlr.internal.InternalCssExtDslParser) parser;
			typedParser.entryRuleCssExtension();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CssExtDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CssExtDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
