grammar at.bestsolution.efxclipse.tooling.fxgraph.FXGraph with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate fXGraph "http://www.bestsolution.at/efxclipse/tooling/fxgraph/FXGraph"

Model:
	imports+=Import*
	language=Language?
	rootNode=Element;

Language:
	'language' language=ID
;
	
Import:
	'import' importedNamespace=QualifiedNameWithWildCard;

Element:
	type=JvmTypeReference ('(' (value = SimpleValueProperty | 'createdby' factory=STRING) ')')? ('id' name=ValidID)? ('controlledby' controller=JvmTypeReference)? ('{'
		('defines {' defines+=Define (',' defines+=Define)* '}')?
		scripts+=Script*
		((properties+=Property | staticProperties+=StaticValueProperty) (',' (properties+=Property | staticProperties+=StaticValueProperty))*)?
	'}')?
;

Define:
	element=Element
;

Script:
	'script' (source=STRING | sourcecode=SCRIPTLITERAL)
;

StaticValueProperty:
	'call' type=JvmTypeReference '#' name=ID ':' value=ValueProperty
;

Property:
	name=ID ':' value=ValueProperty 
;

ValueProperty:
	SingleValueProperty | MultiValueProperty
;

SingleValueProperty:
	SimpleValueProperty | Element | ReferenceValueProperty | IncludeValueProperty | CopyValueProperty | ControllerHandledValueProperty | ScriptValueExpression | ScriptHandlerHandledValueProperty
;

MultiValueProperty:
	ListValueProperty | MapValueProperty
;

ListValueElement:
	Element | ReferenceValueProperty | IncludeValueProperty
;

ListValueProperty:
	'[' value += ListValueElement (',' value += ListValueElement)* ']'
;

MapValueProperty:
	'{' properties+=Property (',' properties+=Property)* '}'
;

SimpleValueProperty:
	stringValue=STRING | booleanValue=("true"|"false") | ( (negative?='-')? (intValue=INT | realValue=REAL))
;

ReferenceValueProperty:
	'idref' reference=[Element|ValidID]
;

IncludeValueProperty:
	'include' source=STRING
;

CopyValueProperty:
	'copy' reference=[Element|ValidID]
;

ControllerHandledValueProperty:
	'controllermethod' methodname=ID
;

ScriptHandlerHandledValueProperty:
	'scriptmethod' functionname=STRING
;

ScriptValueExpression:
	'scriptexpression' sourcecode=SCRIPTLITERAL
;

QualifiedNameWithWildCard :
	QualifiedName  ('.' '*')?;

terminal REAL returns ecore::EDouble: (('0'..'9')*"."('0'..'9')+);
terminal SCRIPTLITERAL	:  '#{' -> '}#';
