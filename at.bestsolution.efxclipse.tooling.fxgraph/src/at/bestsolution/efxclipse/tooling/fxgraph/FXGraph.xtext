grammar at.bestsolution.efxclipse.tooling.fxgraph.FXGraph with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate fXGraph "http://www.bestsolution.at/efxclipse/tooling/fxgraph/FXGraph"

Model:
	package=PackageDeclaration?
	imports+=Import*
	componentDef=ComponentDefinition
;

PackageDeclaration:
	'package' name=QualifiedName
;

ComponentDefinition:
	'component' name=ValidID ('controlledby' controller=JvmTypeReference)? ('styledwith' (previewCssFiles+=STRING | ('[' previewCssFiles+=STRING (',' previewCssFiles+=STRING)* ']')))? ( 'resourcefile' previewResourceBundle=STRING )? ( 'extraClasspath' '[' previewClasspathEntries+=STRING (',' previewClasspathEntries+=STRING)* ']')? '{'
		(scripts+=Script)?
		(defines+=Define (',' defines+=Define)*)?
		rootNode=Element
	'}'
;

Import:
	'import' importedNamespace=QualifiedNameWithWildCard;

//Element:
//	type=JvmTypeReference ('(' (value = SimpleValueProperty | 'createdby' factory=STRING) ')')? ('id' name=ValidID)? ('{'
//		((properties+=Property | staticProperties+=StaticValueProperty) (',' (properties+=Property | staticProperties+=StaticValueProperty))*)?
//	'}')?
//;

Element:
	type=JvmTypeReference ((('(' value = SimpleValueProperty ')')? ('id' name=ValidID)?) | (('id' name=ValidID)? '{'
		((properties+=Property | staticProperties+=StaticValueProperty) (',' (properties+=Property | staticProperties+=StaticValueProperty))*)?
	'}') | ( ('id' name=ValidID)? 'createdby' factory=ID '{' values+=Element (',' values+=Element)* '}' ) )
;

Define:
	'define' element=Element
;

Script:
	'script' language=ID (source=STRING | sourcecode=SCRIPTLITERAL)
;

StaticValueProperty:
	'call' type=JvmTypeReference '#' name=ID ':' value=ValueProperty
;

Property:
	preview?='preview'? name=ID ':' value=ValueProperty 
;

ValueProperty:
	SingleValueProperty | MultiValueProperty
;

SingleValueProperty:
	SimpleValueProperty | Element | ReferenceValueProperty | IncludeValueProperty | CopyValueProperty | ControllerHandledValueProperty | ScriptValueExpression | ScriptHandlerHandledValueProperty | LocationValueProperty | ResourceValueProperty | BindValueProperty
;

MultiValueProperty:
	ListValueProperty | MapValueProperty
;

ListValueElement:
	Element | ReferenceValueProperty | IncludeValueProperty
;

ListValueProperty:
	'[' value += ListValueElement (',' value += ListValueElement)* ']'
;

MapValueProperty:
	'{' properties+=Property (',' properties+=Property)* '}'
;

SimpleValueProperty:
	stringValue=STRING | booleanValue=("true"|"false") | ( (negative?='-')? (intValue=INT | realValue=REAL))
;

ReferenceValueProperty:
	'idref' reference=[Element|ValidID]
;

IncludeValueProperty:
	'include' source=[ComponentDefinition|QualifiedName]
;

CopyValueProperty:
	'copy' reference=[Element|ValidID]
;

ControllerHandledValueProperty:
	'controllermethod' methodname=ID
;

ScriptHandlerHandledValueProperty:
	'scriptmethod' functionname=STRING
;

ScriptValueExpression:
	'scriptexpression' sourcecode=SCRIPTLITERAL
;

LocationValueProperty:
	'location' value=STRING
;

ResourceValueProperty:
	'rstring' value=StringValue
;

BindValueProperty:
	'bind' elementReference=[Element|ValidID] '#' attribute=ID
;

QualifiedNameWithWildCard :
	QualifiedName  ('.' '*')?;

StringValue:
	value=STRING
;

terminal REAL returns ecore::EDouble: (('0'..'9')*"."('0'..'9')+);
terminal SCRIPTLITERAL	:  '#{' -> '}#';
