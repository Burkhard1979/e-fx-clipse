/*
 * generated by Xtext
 */
package at.bestsolution.efxclipse.tooling.fxgraph.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import at.bestsolution.efxclipse.tooling.fxgraph.fXGraph.Element
import static extension org.eclipse.xtext.xtend2.lib.ResourceExtensions.*
import java.util.List
import org.eclipse.core.internal.resources.Workspace
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.jdt.internal.core.JavaProject
import org.eclipse.jdt.core.JavaCore
import org.eclipse.jdt.core.IClasspathEntry
import org.eclipse.jdt.internal.core.ClasspathEntry
import at.bestsolution.efxclipse.tooling.fxgraph.fXGraph.Import
import at.bestsolution.efxclipse.tooling.fxgraph.fXGraph.ValueProperty
import at.bestsolution.efxclipse.tooling.fxgraph.fXGraph.Property
import at.bestsolution.efxclipse.tooling.fxgraph.fXGraph.ListProperty
import at.bestsolution.efxclipse.tooling.fxgraph.fXGraph.ReferenceProperty
import at.bestsolution.efxclipse.tooling.fxgraph.fXGraph.IncludeProperty
import at.bestsolution.efxclipse.tooling.fxgraph.fXGraph.SimpleValueProperty
import at.bestsolution.efxclipse.tooling.fxgraph.fXGraph.ReferenceValueProperty
import at.bestsolution.efxclipse.tooling.fxgraph.fXGraph.IncludeValueProperty
import at.bestsolution.efxclipse.tooling.fxgraph.fXGraph.ListValueProperty
import at.bestsolution.efxclipse.tooling.fxgraph.fXGraph.MapValueProperty

class FXGraphGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		for(entity: resource.allContentsIterable.filter(typeof(Element))) {
//			fsa.generateFile(entity.fileName, entity.compile)
//		}
try {
		if( resource.URI.platformResource ) {
			var uri = resource.URI;
			System::out.println("Platform URI: " + uri);
			var root = ResourcesPlugin::workspace.root;
//			System::out.println("Platform URI: " + uri.segment(1));
			var project = root.getProject(uri.segment(1));
			var projectRelativePath = "";
			var i = 0;
			
			for( seg : uri.segments ) {
				if( i >= 1 ) {
					projectRelativePath = projectRelativePath + "/" + uri.segment(i);
				}
				i = i + 1;
			}
			
			var file = project.getFile(projectRelativePath);
			var jproject = JavaCore::create(project);
			var prefix = null;
			for( packroot: jproject.rawClasspath ) {
				if( packroot.entryKind == IClasspathEntry::CPE_SOURCE ) {
					if( projectRelativePath.startsWith(packroot.path.toString) ) {
						projectRelativePath = projectRelativePath.substring(packroot.path.toString.length);
					}
				}
			}
			
			fsa.generateFile(projectRelativePath.replaceFirst(".fxgraph",".fxml"), createContent(resource, projectRelativePath));	
		}
		} catch (Exception e) {
		}
	}
	
	
	def createContent(Resource resource, String projectRelativePath) '''
		<?xml version="1.0" encoding="UTF-8"?>
		<!-- 
			Do not edit this file it is generated by e(fx)clipse from «projectRelativePath»
		-->
		«FOR packagImport : resource.contents.get(0).eContents.filter(typeof(Import))»
		<?import «packagImport.importedNamespace»?>
		«ENDFOR»
		
		«FOR rootElement : resource.contents.get(0).eContents.filter(typeof(Element))»
		«elementContent(rootElement, true)»
		«ENDFOR»
	'''
	
	def elementContent(Element element, boolean root) '''
		<«element.type.simpleName»«IF root» xmlns:fx="http://javafx.com/fxml"«ENDIF»«IF element.name != null» fx:id="«element.name»"«ENDIF»«IF element.value != null» fx:value="«simpleAttributeValue(element.value)»"«ELSEIF element.factory != null» fx:factory="«element.factory»"«ENDIF»«IF hasSimpleNoneTexProperties(element)»«FOR p : element.properties»«IF p.value instanceof SimpleValueProperty && (p.value as SimpleValueProperty).stringValue == null» «p.name»="«simpleAttributeValue(p.value as SimpleValueProperty)»"«ENDIF»«ENDFOR»«ENDIF»«IF ! hasNestedProperties(element)»/«ENDIF»> 
		«IF hasNestedProperties(element)»
			«propContent(element.properties)»
		</«element.type.simpleName»>
		«ENDIF»
	'''
	
	def propContent(List<Property> properties) '''
		«FOR prop : properties»
		«IF prop.value instanceof SimpleValueProperty»
			«IF (prop.value as SimpleValueProperty).stringValue != null»
				<«prop.name»>«(prop.value as SimpleValueProperty).stringValue»</«prop.name»>
			«ENDIF»
		«ELSEIF prop.value instanceof ListValueProperty»
			<«prop.name»>
				«propListContent(prop.value as ListValueProperty)»
			</«prop.name»>
		«ELSEIF prop.value instanceof MapValueProperty»
			<«prop.name»>
				«propContent((prop.value as MapValueProperty).properties)»
			</«prop.name»>
		«ELSEIF prop.value instanceof Element»
			<«prop.name»>
				«elementContent(prop.value as Element,false)»
			</«prop.name»>
		«ELSEIF prop.value instanceof ReferenceValueProperty»
			<«prop.name»>
				<fx:reference source="«(prop.value as ReferenceValueProperty).reference.name»" />
			</«prop.name»>
		«ELSEIF prop.value instanceof IncludeValueProperty»
			<«prop.name»>
				<fx:include source="«(prop.value as IncludeValueProperty).source»" />
			</«prop.name»>
		«ENDIF»
		«ENDFOR»
	'''
	
	def propListContent(ListValueProperty listProp) '''
		«FOR e : listProp.value»
			«IF e instanceof Element»
				«elementContent(e as Element,false)»
			«ELSEIF e instanceof ReferenceValueProperty»
				<fx:reference source="«(e as ReferenceValueProperty).reference.name»" />
			«ELSEIF e instanceof IncludeValueProperty»
				<fx:include source="«(e as IncludeValueProperty).source»" />
			«ENDIF»
		«ENDFOR»
	'''

	def simpleAttributeValue(SimpleValueProperty value) {
		if( value.stringValue != null ) {
			return value.stringValue;
		} else if( value.booleanValue != null ) {
			return value.booleanValue;
		} else if( (value.realValue as int) != 0 ) {
			if( value.negative ) {
				return "-" + value.realValue;
			} else {
				return value.realValue;
			}
		} else {
			if( value.negative ) {
				return "-" + value.intValue;
			} else {
				return value.intValue;
			}
		}
	}
	
	def hasSimpleNoneTexProperties(Element element) {
		for( property : element.properties ) {
			if( property.value instanceof SimpleValueProperty ) {
				if( (property.value as SimpleValueProperty).stringValue == null ) {
					return true;
				}
			}
		}
		return false;
	}
	
	def hasNestedProperties(Element element) {
		for( property : element.properties ) {
			if( property.value instanceof SimpleValueProperty ) {
				if( (property.value as SimpleValueProperty).stringValue != null ) {
					return true;
				}
			} else {
				return true;
			}
		}
		
		return false;
	}
}
