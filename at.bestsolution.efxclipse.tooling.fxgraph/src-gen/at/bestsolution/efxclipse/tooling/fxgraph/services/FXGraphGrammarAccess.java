/*
* generated by Xtext
*/

package at.bestsolution.efxclipse.tooling.fxgraph.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class FXGraphGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageDeclarationParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cComponentDefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentDefComponentDefinitionParserRuleCall_2_0 = (RuleCall)cComponentDefAssignment_2.eContents().get(0);
		
		//Model:
		//	package=PackageDeclaration? imports+=Import* componentDef=ComponentDefinition;
		public ParserRule getRule() { return rule; }

		//package=PackageDeclaration? imports+=Import* componentDef=ComponentDefinition
		public Group getGroup() { return cGroup; }

		//package=PackageDeclaration?
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }

		//PackageDeclaration
		public RuleCall getPackagePackageDeclarationParserRuleCall_0_0() { return cPackagePackageDeclarationParserRuleCall_0_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }

		//componentDef=ComponentDefinition
		public Assignment getComponentDefAssignment_2() { return cComponentDefAssignment_2; }

		//ComponentDefinition
		public RuleCall getComponentDefComponentDefinitionParserRuleCall_2_0() { return cComponentDefComponentDefinitionParserRuleCall_2_0; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PackageDeclaration:
		//	"package" name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class ComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cControlledbyKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cControllerAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cControllerJvmTypeReferenceParserRuleCall_2_0_1_0 = (RuleCall)cControllerAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cStyledwithKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1 = (Alternatives)cGroup_2_1.eContents().get(1);
		private final Assignment cPreviewCssFilesAssignment_2_1_1_0 = (Assignment)cAlternatives_2_1_1.eContents().get(0);
		private final RuleCall cPreviewCssFilesSTRINGTerminalRuleCall_2_1_1_0_0 = (RuleCall)cPreviewCssFilesAssignment_2_1_1_0.eContents().get(0);
		private final Group cGroup_2_1_1_1 = (Group)cAlternatives_2_1_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Assignment cPreviewCssFilesAssignment_2_1_1_1_1 = (Assignment)cGroup_2_1_1_1.eContents().get(1);
		private final RuleCall cPreviewCssFilesSTRINGTerminalRuleCall_2_1_1_1_1_0 = (RuleCall)cPreviewCssFilesAssignment_2_1_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_1_1_2 = (Group)cGroup_2_1_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_1_1_2_0 = (Keyword)cGroup_2_1_1_1_2.eContents().get(0);
		private final Assignment cPreviewCssFilesAssignment_2_1_1_1_2_1 = (Assignment)cGroup_2_1_1_1_2.eContents().get(1);
		private final RuleCall cPreviewCssFilesSTRINGTerminalRuleCall_2_1_1_1_2_1_0 = (RuleCall)cPreviewCssFilesAssignment_2_1_1_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_1_1_3 = (Keyword)cGroup_2_1_1_1.eContents().get(3);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cResourcefileKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cPreviewResourceBundleAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cPreviewResourceBundleSTRINGTerminalRuleCall_2_2_1_0 = (RuleCall)cPreviewResourceBundleAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cExtraClasspathKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_3_1 = (Keyword)cGroup_2_3.eContents().get(1);
		private final Assignment cPreviewClasspathEntriesAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final RuleCall cPreviewClasspathEntriesSTRINGTerminalRuleCall_2_3_2_0 = (RuleCall)cPreviewClasspathEntriesAssignment_2_3_2.eContents().get(0);
		private final Group cGroup_2_3_3 = (Group)cGroup_2_3.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_3_0 = (Keyword)cGroup_2_3_3.eContents().get(0);
		private final Assignment cPreviewClasspathEntriesAssignment_2_3_3_1 = (Assignment)cGroup_2_3_3.eContents().get(1);
		private final RuleCall cPreviewClasspathEntriesSTRINGTerminalRuleCall_2_3_3_1_0 = (RuleCall)cPreviewClasspathEntriesAssignment_2_3_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3_4 = (Keyword)cGroup_2_3.eContents().get(4);
		private final Group cGroup_2_4 = (Group)cUnorderedGroup_2.eContents().get(4);
		private final Keyword cSceneSetupKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cSceneDefinitionAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final CrossReference cSceneDefinitionComponentDefinitionCrossReference_2_4_1_0 = (CrossReference)cSceneDefinitionAssignment_2_4_1.eContents().get(0);
		private final RuleCall cSceneDefinitionComponentDefinitionQualifiedNameParserRuleCall_2_4_1_0_1 = (RuleCall)cSceneDefinitionComponentDefinitionCrossReference_2_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cScriptsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cScriptsScriptParserRuleCall_4_0 = (RuleCall)cScriptsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cDefinesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cDefinesDefineParserRuleCall_5_0_0 = (RuleCall)cDefinesAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cDefinesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cDefinesDefineParserRuleCall_5_1_1_0 = (RuleCall)cDefinesAssignment_5_1_1.eContents().get(0);
		private final Assignment cRootNodeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRootNodeElementParserRuleCall_6_0 = (RuleCall)cRootNodeAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ComponentDefinition:
		//	"component" name=ValidID (("controlledby" controller=JvmTypeReference)? & ("styledwith" (previewCssFiles+=STRING | "["
		//	previewCssFiles+=STRING ("," previewCssFiles+=STRING)* "]"))? & ("resourcefile" previewResourceBundle=STRING)? &
		//	("extraClasspath" "[" previewClasspathEntries+=STRING ("," previewClasspathEntries+=STRING)* "]")? & ("sceneSetup"
		//	sceneDefinition=[ComponentDefinition|QualifiedName])?) "{" scripts+=Script? (defines+=Define ("," defines+=Define)*)?
		//	rootNode=Element "}";
		public ParserRule getRule() { return rule; }

		//"component" name=ValidID (("controlledby" controller=JvmTypeReference)? & ("styledwith" (previewCssFiles+=STRING | "["
		//previewCssFiles+=STRING ("," previewCssFiles+=STRING)* "]"))? & ("resourcefile" previewResourceBundle=STRING)? &
		//("extraClasspath" "[" previewClasspathEntries+=STRING ("," previewClasspathEntries+=STRING)* "]")? & ("sceneSetup"
		//sceneDefinition=[ComponentDefinition|QualifiedName])?) "{" scripts+=Script? (defines+=Define ("," defines+=Define)*)?
		//rootNode=Element "}"
		public Group getGroup() { return cGroup; }

		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("controlledby" controller=JvmTypeReference)? & ("styledwith" (previewCssFiles+=STRING | "[" previewCssFiles+=STRING
		//("," previewCssFiles+=STRING)* "]"))? & ("resourcefile" previewResourceBundle=STRING)? & ("extraClasspath" "["
		//previewClasspathEntries+=STRING ("," previewClasspathEntries+=STRING)* "]")? & ("sceneSetup"
		//sceneDefinition=[ComponentDefinition|QualifiedName])?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//("controlledby" controller=JvmTypeReference)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"controlledby"
		public Keyword getControlledbyKeyword_2_0_0() { return cControlledbyKeyword_2_0_0; }

		//controller=JvmTypeReference
		public Assignment getControllerAssignment_2_0_1() { return cControllerAssignment_2_0_1; }

		//JvmTypeReference
		public RuleCall getControllerJvmTypeReferenceParserRuleCall_2_0_1_0() { return cControllerJvmTypeReferenceParserRuleCall_2_0_1_0; }

		//("styledwith" (previewCssFiles+=STRING | "[" previewCssFiles+=STRING ("," previewCssFiles+=STRING)* "]"))?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"styledwith"
		public Keyword getStyledwithKeyword_2_1_0() { return cStyledwithKeyword_2_1_0; }

		//previewCssFiles+=STRING | "[" previewCssFiles+=STRING ("," previewCssFiles+=STRING)* "]"
		public Alternatives getAlternatives_2_1_1() { return cAlternatives_2_1_1; }

		//previewCssFiles+=STRING
		public Assignment getPreviewCssFilesAssignment_2_1_1_0() { return cPreviewCssFilesAssignment_2_1_1_0; }

		//STRING
		public RuleCall getPreviewCssFilesSTRINGTerminalRuleCall_2_1_1_0_0() { return cPreviewCssFilesSTRINGTerminalRuleCall_2_1_1_0_0; }

		//"[" previewCssFiles+=STRING ("," previewCssFiles+=STRING)* "]"
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_1_1_0() { return cLeftSquareBracketKeyword_2_1_1_1_0; }

		//previewCssFiles+=STRING
		public Assignment getPreviewCssFilesAssignment_2_1_1_1_1() { return cPreviewCssFilesAssignment_2_1_1_1_1; }

		//STRING
		public RuleCall getPreviewCssFilesSTRINGTerminalRuleCall_2_1_1_1_1_0() { return cPreviewCssFilesSTRINGTerminalRuleCall_2_1_1_1_1_0; }

		//("," previewCssFiles+=STRING)*
		public Group getGroup_2_1_1_1_2() { return cGroup_2_1_1_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_1_1_2_0() { return cCommaKeyword_2_1_1_1_2_0; }

		//previewCssFiles+=STRING
		public Assignment getPreviewCssFilesAssignment_2_1_1_1_2_1() { return cPreviewCssFilesAssignment_2_1_1_1_2_1; }

		//STRING
		public RuleCall getPreviewCssFilesSTRINGTerminalRuleCall_2_1_1_1_2_1_0() { return cPreviewCssFilesSTRINGTerminalRuleCall_2_1_1_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_1_1_3() { return cRightSquareBracketKeyword_2_1_1_1_3; }

		//("resourcefile" previewResourceBundle=STRING)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"resourcefile"
		public Keyword getResourcefileKeyword_2_2_0() { return cResourcefileKeyword_2_2_0; }

		//previewResourceBundle=STRING
		public Assignment getPreviewResourceBundleAssignment_2_2_1() { return cPreviewResourceBundleAssignment_2_2_1; }

		//STRING
		public RuleCall getPreviewResourceBundleSTRINGTerminalRuleCall_2_2_1_0() { return cPreviewResourceBundleSTRINGTerminalRuleCall_2_2_1_0; }

		//("extraClasspath" "[" previewClasspathEntries+=STRING ("," previewClasspathEntries+=STRING)* "]")?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"extraClasspath"
		public Keyword getExtraClasspathKeyword_2_3_0() { return cExtraClasspathKeyword_2_3_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_3_1() { return cLeftSquareBracketKeyword_2_3_1; }

		//previewClasspathEntries+=STRING
		public Assignment getPreviewClasspathEntriesAssignment_2_3_2() { return cPreviewClasspathEntriesAssignment_2_3_2; }

		//STRING
		public RuleCall getPreviewClasspathEntriesSTRINGTerminalRuleCall_2_3_2_0() { return cPreviewClasspathEntriesSTRINGTerminalRuleCall_2_3_2_0; }

		//("," previewClasspathEntries+=STRING)*
		public Group getGroup_2_3_3() { return cGroup_2_3_3; }

		//","
		public Keyword getCommaKeyword_2_3_3_0() { return cCommaKeyword_2_3_3_0; }

		//previewClasspathEntries+=STRING
		public Assignment getPreviewClasspathEntriesAssignment_2_3_3_1() { return cPreviewClasspathEntriesAssignment_2_3_3_1; }

		//STRING
		public RuleCall getPreviewClasspathEntriesSTRINGTerminalRuleCall_2_3_3_1_0() { return cPreviewClasspathEntriesSTRINGTerminalRuleCall_2_3_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3_4() { return cRightSquareBracketKeyword_2_3_4; }

		//("sceneSetup" sceneDefinition=[ComponentDefinition|QualifiedName])?
		public Group getGroup_2_4() { return cGroup_2_4; }

		//"sceneSetup"
		public Keyword getSceneSetupKeyword_2_4_0() { return cSceneSetupKeyword_2_4_0; }

		//sceneDefinition=[ComponentDefinition|QualifiedName]
		public Assignment getSceneDefinitionAssignment_2_4_1() { return cSceneDefinitionAssignment_2_4_1; }

		//[ComponentDefinition|QualifiedName]
		public CrossReference getSceneDefinitionComponentDefinitionCrossReference_2_4_1_0() { return cSceneDefinitionComponentDefinitionCrossReference_2_4_1_0; }

		//QualifiedName
		public RuleCall getSceneDefinitionComponentDefinitionQualifiedNameParserRuleCall_2_4_1_0_1() { return cSceneDefinitionComponentDefinitionQualifiedNameParserRuleCall_2_4_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//scripts+=Script?
		public Assignment getScriptsAssignment_4() { return cScriptsAssignment_4; }

		//Script
		public RuleCall getScriptsScriptParserRuleCall_4_0() { return cScriptsScriptParserRuleCall_4_0; }

		//(defines+=Define ("," defines+=Define)*)?
		public Group getGroup_5() { return cGroup_5; }

		//defines+=Define
		public Assignment getDefinesAssignment_5_0() { return cDefinesAssignment_5_0; }

		//Define
		public RuleCall getDefinesDefineParserRuleCall_5_0_0() { return cDefinesDefineParserRuleCall_5_0_0; }

		//("," defines+=Define)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//defines+=Define
		public Assignment getDefinesAssignment_5_1_1() { return cDefinesAssignment_5_1_1; }

		//Define
		public RuleCall getDefinesDefineParserRuleCall_5_1_1_0() { return cDefinesDefineParserRuleCall_5_1_1_0; }

		//rootNode=Element
		public Assignment getRootNodeAssignment_6() { return cRootNodeAssignment_6; }

		//Element
		public RuleCall getRootNodeElementParserRuleCall_6_0() { return cRootNodeElementParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Assignment cValueAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cValueSimpleValuePropertyParserRuleCall_1_0_0_1_0 = (RuleCall)cValueAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_0_2 = (Keyword)cGroup_1_0_0.eContents().get(2);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cIdKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0_1_1_0 = (RuleCall)cNameAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Keyword cIdKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_1_0_1_0 = (RuleCall)cNameAssignment_1_1_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Alternatives cAlternatives_1_1_2_0 = (Alternatives)cGroup_1_1_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_1_1_2_0_0 = (Assignment)cAlternatives_1_1_2_0.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_1_1_2_0_0_0 = (RuleCall)cPropertiesAssignment_1_1_2_0_0.eContents().get(0);
		private final Assignment cStaticPropertiesAssignment_1_1_2_0_1 = (Assignment)cAlternatives_1_1_2_0.eContents().get(1);
		private final RuleCall cStaticPropertiesStaticValuePropertyParserRuleCall_1_1_2_0_1_0 = (RuleCall)cStaticPropertiesAssignment_1_1_2_0_1.eContents().get(0);
		private final Assignment cDefaultChildrenAssignment_1_1_2_0_2 = (Assignment)cAlternatives_1_1_2_0.eContents().get(2);
		private final RuleCall cDefaultChildrenElementParserRuleCall_1_1_2_0_2_0 = (RuleCall)cDefaultChildrenAssignment_1_1_2_0_2.eContents().get(0);
		private final Group cGroup_1_1_2_1 = (Group)cGroup_1_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_2_1_0 = (Keyword)cGroup_1_1_2_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_2_1_1 = (Alternatives)cGroup_1_1_2_1.eContents().get(1);
		private final Assignment cPropertiesAssignment_1_1_2_1_1_0 = (Assignment)cAlternatives_1_1_2_1_1.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_1_1_2_1_1_0_0 = (RuleCall)cPropertiesAssignment_1_1_2_1_1_0.eContents().get(0);
		private final Assignment cStaticPropertiesAssignment_1_1_2_1_1_1 = (Assignment)cAlternatives_1_1_2_1_1.eContents().get(1);
		private final RuleCall cStaticPropertiesStaticValuePropertyParserRuleCall_1_1_2_1_1_1_0 = (RuleCall)cStaticPropertiesAssignment_1_1_2_1_1_1.eContents().get(0);
		private final Assignment cDefaultChildrenAssignment_1_1_2_1_1_2 = (Assignment)cAlternatives_1_1_2_1_1.eContents().get(2);
		private final RuleCall cDefaultChildrenElementParserRuleCall_1_1_2_1_1_2_0 = (RuleCall)cDefaultChildrenAssignment_1_1_2_1_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Keyword cIdKeyword_1_2_0_0 = (Keyword)cGroup_1_2_0.eContents().get(0);
		private final Assignment cNameAssignment_1_2_0_1 = (Assignment)cGroup_1_2_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_2_0_1_0 = (RuleCall)cNameAssignment_1_2_0_1.eContents().get(0);
		private final Keyword cCreatedbyKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cFactoryAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cFactoryIDTerminalRuleCall_1_2_2_0 = (RuleCall)cFactoryAssignment_1_2_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		private final Assignment cValuesAssignment_1_2_4 = (Assignment)cGroup_1_2.eContents().get(4);
		private final RuleCall cValuesFactoryValueElementParserRuleCall_1_2_4_0 = (RuleCall)cValuesAssignment_1_2_4.eContents().get(0);
		private final Group cGroup_1_2_5 = (Group)cGroup_1_2.eContents().get(5);
		private final Keyword cCommaKeyword_1_2_5_0 = (Keyword)cGroup_1_2_5.eContents().get(0);
		private final Assignment cValuesAssignment_1_2_5_1 = (Assignment)cGroup_1_2_5.eContents().get(1);
		private final RuleCall cValuesFactoryValueElementParserRuleCall_1_2_5_1_0 = (RuleCall)cValuesAssignment_1_2_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2_6 = (Keyword)cGroup_1_2.eContents().get(6);
		
		//Element:
		//	type=JvmTypeReference (("(" value=SimpleValueProperty ")")? ("id" name=ValidID)? | ("id" name=ValidID)? "{"
		//	((properties+=Property | staticProperties+=StaticValueProperty | defaultChildren+=Element) ("," (properties+=Property
		//	| staticProperties+=StaticValueProperty | defaultChildren+=Element))*)? "}" | ("id" name=ValidID)? "createdby"
		//	factory=ID "{" values+=FactoryValueElement ("," values+=FactoryValueElement)* "}");
		public ParserRule getRule() { return rule; }

		//type=JvmTypeReference (("(" value=SimpleValueProperty ")")? ("id" name=ValidID)? | ("id" name=ValidID)? "{"
		//((properties+=Property | staticProperties+=StaticValueProperty | defaultChildren+=Element) ("," (properties+=Property |
		//staticProperties+=StaticValueProperty | defaultChildren+=Element))*)? "}" | ("id" name=ValidID)? "createdby" factory=ID
		//"{" values+=FactoryValueElement ("," values+=FactoryValueElement)* "}")
		public Group getGroup() { return cGroup; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0; }

		//("(" value=SimpleValueProperty ")")? ("id" name=ValidID)? | ("id" name=ValidID)? "{" ((properties+=Property |
		//staticProperties+=StaticValueProperty | defaultChildren+=Element) ("," (properties+=Property |
		//staticProperties+=StaticValueProperty | defaultChildren+=Element))*)? "}" | ("id" name=ValidID)? "createdby" factory=ID
		//"{" values+=FactoryValueElement ("," values+=FactoryValueElement)* "}"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//("(" value=SimpleValueProperty ")")? ("id" name=ValidID)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//("(" value=SimpleValueProperty ")")?
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0_0() { return cLeftParenthesisKeyword_1_0_0_0; }

		//value=SimpleValueProperty
		public Assignment getValueAssignment_1_0_0_1() { return cValueAssignment_1_0_0_1; }

		//SimpleValueProperty
		public RuleCall getValueSimpleValuePropertyParserRuleCall_1_0_0_1_0() { return cValueSimpleValuePropertyParserRuleCall_1_0_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_0_2() { return cRightParenthesisKeyword_1_0_0_2; }

		//("id" name=ValidID)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//"id"
		public Keyword getIdKeyword_1_0_1_0() { return cIdKeyword_1_0_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_1_0_1_1() { return cNameAssignment_1_0_1_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0_1_1_0() { return cNameValidIDParserRuleCall_1_0_1_1_0; }

		//("id" name=ValidID)? "{" ((properties+=Property | staticProperties+=StaticValueProperty | defaultChildren+=Element) (","
		//(properties+=Property | staticProperties+=StaticValueProperty | defaultChildren+=Element))*)? "}"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//("id" name=ValidID)?
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//"id"
		public Keyword getIdKeyword_1_1_0_0() { return cIdKeyword_1_1_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1_1_0_1() { return cNameAssignment_1_1_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_1_0_1_0() { return cNameValidIDParserRuleCall_1_1_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1_1() { return cLeftCurlyBracketKeyword_1_1_1; }

		//((properties+=Property | staticProperties+=StaticValueProperty | defaultChildren+=Element) ("," (properties+=Property |
		//staticProperties+=StaticValueProperty | defaultChildren+=Element))*)?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//properties+=Property | staticProperties+=StaticValueProperty | defaultChildren+=Element
		public Alternatives getAlternatives_1_1_2_0() { return cAlternatives_1_1_2_0; }

		//properties+=Property
		public Assignment getPropertiesAssignment_1_1_2_0_0() { return cPropertiesAssignment_1_1_2_0_0; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_1_1_2_0_0_0() { return cPropertiesPropertyParserRuleCall_1_1_2_0_0_0; }

		//staticProperties+=StaticValueProperty
		public Assignment getStaticPropertiesAssignment_1_1_2_0_1() { return cStaticPropertiesAssignment_1_1_2_0_1; }

		//StaticValueProperty
		public RuleCall getStaticPropertiesStaticValuePropertyParserRuleCall_1_1_2_0_1_0() { return cStaticPropertiesStaticValuePropertyParserRuleCall_1_1_2_0_1_0; }

		//defaultChildren+=Element
		public Assignment getDefaultChildrenAssignment_1_1_2_0_2() { return cDefaultChildrenAssignment_1_1_2_0_2; }

		//Element
		public RuleCall getDefaultChildrenElementParserRuleCall_1_1_2_0_2_0() { return cDefaultChildrenElementParserRuleCall_1_1_2_0_2_0; }

		//("," (properties+=Property | staticProperties+=StaticValueProperty | defaultChildren+=Element))*
		public Group getGroup_1_1_2_1() { return cGroup_1_1_2_1; }

		//","
		public Keyword getCommaKeyword_1_1_2_1_0() { return cCommaKeyword_1_1_2_1_0; }

		//properties+=Property | staticProperties+=StaticValueProperty | defaultChildren+=Element
		public Alternatives getAlternatives_1_1_2_1_1() { return cAlternatives_1_1_2_1_1; }

		//properties+=Property
		public Assignment getPropertiesAssignment_1_1_2_1_1_0() { return cPropertiesAssignment_1_1_2_1_1_0; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_1_1_2_1_1_0_0() { return cPropertiesPropertyParserRuleCall_1_1_2_1_1_0_0; }

		//staticProperties+=StaticValueProperty
		public Assignment getStaticPropertiesAssignment_1_1_2_1_1_1() { return cStaticPropertiesAssignment_1_1_2_1_1_1; }

		//StaticValueProperty
		public RuleCall getStaticPropertiesStaticValuePropertyParserRuleCall_1_1_2_1_1_1_0() { return cStaticPropertiesStaticValuePropertyParserRuleCall_1_1_2_1_1_1_0; }

		//defaultChildren+=Element
		public Assignment getDefaultChildrenAssignment_1_1_2_1_1_2() { return cDefaultChildrenAssignment_1_1_2_1_1_2; }

		//Element
		public RuleCall getDefaultChildrenElementParserRuleCall_1_1_2_1_1_2_0() { return cDefaultChildrenElementParserRuleCall_1_1_2_1_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_3() { return cRightCurlyBracketKeyword_1_1_3; }

		//("id" name=ValidID)? "createdby" factory=ID "{" values+=FactoryValueElement ("," values+=FactoryValueElement)* "}"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//("id" name=ValidID)?
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//"id"
		public Keyword getIdKeyword_1_2_0_0() { return cIdKeyword_1_2_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1_2_0_1() { return cNameAssignment_1_2_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_2_0_1_0() { return cNameValidIDParserRuleCall_1_2_0_1_0; }

		//"createdby"
		public Keyword getCreatedbyKeyword_1_2_1() { return cCreatedbyKeyword_1_2_1; }

		//factory=ID
		public Assignment getFactoryAssignment_1_2_2() { return cFactoryAssignment_1_2_2; }

		//ID
		public RuleCall getFactoryIDTerminalRuleCall_1_2_2_0() { return cFactoryIDTerminalRuleCall_1_2_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_2_3() { return cLeftCurlyBracketKeyword_1_2_3; }

		//values+=FactoryValueElement
		public Assignment getValuesAssignment_1_2_4() { return cValuesAssignment_1_2_4; }

		//FactoryValueElement
		public RuleCall getValuesFactoryValueElementParserRuleCall_1_2_4_0() { return cValuesFactoryValueElementParserRuleCall_1_2_4_0; }

		//("," values+=FactoryValueElement)*
		public Group getGroup_1_2_5() { return cGroup_1_2_5; }

		//","
		public Keyword getCommaKeyword_1_2_5_0() { return cCommaKeyword_1_2_5_0; }

		//values+=FactoryValueElement
		public Assignment getValuesAssignment_1_2_5_1() { return cValuesAssignment_1_2_5_1; }

		//FactoryValueElement
		public RuleCall getValuesFactoryValueElementParserRuleCall_1_2_5_1_0() { return cValuesFactoryValueElementParserRuleCall_1_2_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2_6() { return cRightCurlyBracketKeyword_1_2_6; }
	}

	public class DefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Define");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//Define:
		//	"define" element=Element;
		public ParserRule getRule() { return rule; }

		//"define" element=Element
		public Group getGroup() { return cGroup; }

		//"define"
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }

		//element=Element
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }

		//Element
		public RuleCall getElementElementParserRuleCall_1_0() { return cElementElementParserRuleCall_1_0; }
	}

	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Script");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLanguageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLanguageIDTerminalRuleCall_1_0 = (RuleCall)cLanguageAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cSourceSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cSourceAssignment_2_0.eContents().get(0);
		private final Assignment cSourcecodeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cSourcecodeSCRIPTLITERALTerminalRuleCall_2_1_0 = (RuleCall)cSourcecodeAssignment_2_1.eContents().get(0);
		
		//Script:
		//	"script" language=ID (source=STRING | sourcecode=SCRIPTLITERAL);
		public ParserRule getRule() { return rule; }

		//"script" language=ID (source=STRING | sourcecode=SCRIPTLITERAL)
		public Group getGroup() { return cGroup; }

		//"script"
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }

		//language=ID
		public Assignment getLanguageAssignment_1() { return cLanguageAssignment_1; }

		//ID
		public RuleCall getLanguageIDTerminalRuleCall_1_0() { return cLanguageIDTerminalRuleCall_1_0; }

		//source=STRING | sourcecode=SCRIPTLITERAL
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//source=STRING
		public Assignment getSourceAssignment_2_0() { return cSourceAssignment_2_0; }

		//STRING
		public RuleCall getSourceSTRINGTerminalRuleCall_2_0_0() { return cSourceSTRINGTerminalRuleCall_2_0_0; }

		//sourcecode=SCRIPTLITERAL
		public Assignment getSourcecodeAssignment_2_1() { return cSourcecodeAssignment_2_1; }

		//SCRIPTLITERAL
		public RuleCall getSourcecodeSCRIPTLITERALTerminalRuleCall_2_1_0() { return cSourcecodeSCRIPTLITERALTerminalRuleCall_2_1_0; }
	}

	public class StaticValuePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticValueProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cModifierAlternatives_0_0 = (Alternatives)cModifierAssignment_0.eContents().get(0);
		private final Keyword cModifierPreviewKeyword_0_0_0 = (Keyword)cModifierAlternatives_0_0.eContents().get(0);
		private final Keyword cModifierRuntimeOnlyKeyword_0_0_1 = (Keyword)cModifierAlternatives_0_0.eContents().get(1);
		private final Keyword cCallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cNumberSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueValuePropertyParserRuleCall_6_0 = (RuleCall)cValueAssignment_6.eContents().get(0);
		
		//StaticValueProperty:
		//	modifier=("preview" | "runtime-only")? "call" type=JvmTypeReference "#" name=ID ":" value=ValueProperty;
		public ParserRule getRule() { return rule; }

		//modifier=("preview" | "runtime-only")? "call" type=JvmTypeReference "#" name=ID ":" value=ValueProperty
		public Group getGroup() { return cGroup; }

		//modifier=("preview" | "runtime-only")?
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }

		//"preview" | "runtime-only"
		public Alternatives getModifierAlternatives_0_0() { return cModifierAlternatives_0_0; }

		//"preview"
		public Keyword getModifierPreviewKeyword_0_0_0() { return cModifierPreviewKeyword_0_0_0; }

		//"runtime-only"
		public Keyword getModifierRuntimeOnlyKeyword_0_0_1() { return cModifierRuntimeOnlyKeyword_0_0_1; }

		//"call"
		public Keyword getCallKeyword_1() { return cCallKeyword_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_0() { return cTypeJvmTypeReferenceParserRuleCall_2_0; }

		//"#"
		public Keyword getNumberSignKeyword_3() { return cNumberSignKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//value=ValueProperty
		public Assignment getValueAssignment_6() { return cValueAssignment_6; }

		//ValueProperty
		public RuleCall getValueValuePropertyParserRuleCall_6_0() { return cValueValuePropertyParserRuleCall_6_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cModifierAlternatives_0_0 = (Alternatives)cModifierAssignment_0.eContents().get(0);
		private final Keyword cModifierPreviewKeyword_0_0_0 = (Keyword)cModifierAlternatives_0_0.eContents().get(0);
		private final Keyword cModifierRuntimeOnlyKeyword_0_0_1 = (Keyword)cModifierAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValuePropertyParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Property:
		//	modifier=("preview" | "runtime-only")? name=ID ":" value=ValueProperty;
		public ParserRule getRule() { return rule; }

		//modifier=("preview" | "runtime-only")? name=ID ":" value=ValueProperty
		public Group getGroup() { return cGroup; }

		//modifier=("preview" | "runtime-only")?
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }

		//"preview" | "runtime-only"
		public Alternatives getModifierAlternatives_0_0() { return cModifierAlternatives_0_0; }

		//"preview"
		public Keyword getModifierPreviewKeyword_0_0_0() { return cModifierPreviewKeyword_0_0_0; }

		//"runtime-only"
		public Keyword getModifierRuntimeOnlyKeyword_0_0_1() { return cModifierRuntimeOnlyKeyword_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//value=ValueProperty
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//ValueProperty
		public RuleCall getValueValuePropertyParserRuleCall_3_0() { return cValueValuePropertyParserRuleCall_3_0; }
	}

	public class ValuePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleValuePropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultiValuePropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ValueProperty:
		//	SingleValueProperty | MultiValueProperty;
		public ParserRule getRule() { return rule; }

		//SingleValueProperty | MultiValueProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//SingleValueProperty
		public RuleCall getSingleValuePropertyParserRuleCall_0() { return cSingleValuePropertyParserRuleCall_0; }

		//MultiValueProperty
		public RuleCall getMultiValuePropertyParserRuleCall_1() { return cMultiValuePropertyParserRuleCall_1; }
	}

	public class SingleValuePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleValueProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleValuePropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceValuePropertyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIncludeValuePropertyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCopyValuePropertyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cControllerHandledValuePropertyParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cScriptValueExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cScriptHandlerHandledValuePropertyParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cScriptValueReferenceParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLocationValuePropertyParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cResourceValuePropertyParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cBindValuePropertyParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//SingleValueProperty:
		//	SimpleValueProperty | Element | ReferenceValueProperty | IncludeValueProperty | CopyValueProperty |
		//	ControllerHandledValueProperty | ScriptValueExpression | ScriptHandlerHandledValueProperty | ScriptValueReference |
		//	LocationValueProperty | ResourceValueProperty | BindValueProperty;
		public ParserRule getRule() { return rule; }

		//SimpleValueProperty | Element | ReferenceValueProperty | IncludeValueProperty | CopyValueProperty |
		//ControllerHandledValueProperty | ScriptValueExpression | ScriptHandlerHandledValueProperty | ScriptValueReference |
		//LocationValueProperty | ResourceValueProperty | BindValueProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleValueProperty
		public RuleCall getSimpleValuePropertyParserRuleCall_0() { return cSimpleValuePropertyParserRuleCall_0; }

		//Element
		public RuleCall getElementParserRuleCall_1() { return cElementParserRuleCall_1; }

		//ReferenceValueProperty
		public RuleCall getReferenceValuePropertyParserRuleCall_2() { return cReferenceValuePropertyParserRuleCall_2; }

		//IncludeValueProperty
		public RuleCall getIncludeValuePropertyParserRuleCall_3() { return cIncludeValuePropertyParserRuleCall_3; }

		//CopyValueProperty
		public RuleCall getCopyValuePropertyParserRuleCall_4() { return cCopyValuePropertyParserRuleCall_4; }

		//ControllerHandledValueProperty
		public RuleCall getControllerHandledValuePropertyParserRuleCall_5() { return cControllerHandledValuePropertyParserRuleCall_5; }

		//ScriptValueExpression
		public RuleCall getScriptValueExpressionParserRuleCall_6() { return cScriptValueExpressionParserRuleCall_6; }

		//ScriptHandlerHandledValueProperty
		public RuleCall getScriptHandlerHandledValuePropertyParserRuleCall_7() { return cScriptHandlerHandledValuePropertyParserRuleCall_7; }

		//ScriptValueReference
		public RuleCall getScriptValueReferenceParserRuleCall_8() { return cScriptValueReferenceParserRuleCall_8; }

		//LocationValueProperty
		public RuleCall getLocationValuePropertyParserRuleCall_9() { return cLocationValuePropertyParserRuleCall_9; }

		//ResourceValueProperty
		public RuleCall getResourceValuePropertyParserRuleCall_10() { return cResourceValuePropertyParserRuleCall_10; }

		//BindValueProperty
		public RuleCall getBindValuePropertyParserRuleCall_11() { return cBindValuePropertyParserRuleCall_11; }
	}

	public class MultiValuePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiValueProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cListValuePropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMapValuePropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MultiValueProperty:
		//	ListValueProperty | MapValueProperty;
		public ParserRule getRule() { return rule; }

		//ListValueProperty | MapValueProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//ListValueProperty
		public RuleCall getListValuePropertyParserRuleCall_0() { return cListValuePropertyParserRuleCall_0; }

		//MapValueProperty
		public RuleCall getMapValuePropertyParserRuleCall_1() { return cMapValuePropertyParserRuleCall_1; }
	}

	public class FactoryValueElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FactoryValueElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleValuePropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FactoryValueElement:
		//	SimpleValueProperty | Element;
		public ParserRule getRule() { return rule; }

		//SimpleValueProperty | Element
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleValueProperty
		public RuleCall getSimpleValuePropertyParserRuleCall_0() { return cSimpleValuePropertyParserRuleCall_0; }

		//Element
		public RuleCall getElementParserRuleCall_1() { return cElementParserRuleCall_1; }
	}

	public class ListValueElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListValueElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceValuePropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIncludeValuePropertyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSimpleValuePropertyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ListValueElement:
		//	Element | ReferenceValueProperty | IncludeValueProperty | SimpleValueProperty;
		public ParserRule getRule() { return rule; }

		//Element | ReferenceValueProperty | IncludeValueProperty | SimpleValueProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//Element
		public RuleCall getElementParserRuleCall_0() { return cElementParserRuleCall_0; }

		//ReferenceValueProperty
		public RuleCall getReferenceValuePropertyParserRuleCall_1() { return cReferenceValuePropertyParserRuleCall_1; }

		//IncludeValueProperty
		public RuleCall getIncludeValuePropertyParserRuleCall_2() { return cIncludeValuePropertyParserRuleCall_2; }

		//SimpleValueProperty
		public RuleCall getSimpleValuePropertyParserRuleCall_3() { return cSimpleValuePropertyParserRuleCall_3; }
	}

	public class ListValuePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListValueProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueListValueElementParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueListValueElementParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListValueProperty:
		//	"[" value+=ListValueElement ("," value+=ListValueElement)* "]";
		public ParserRule getRule() { return rule; }

		//"[" value+=ListValueElement ("," value+=ListValueElement)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//value+=ListValueElement
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//ListValueElement
		public RuleCall getValueListValueElementParserRuleCall_1_0() { return cValueListValueElementParserRuleCall_1_0; }

		//("," value+=ListValueElement)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//value+=ListValueElement
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//ListValueElement
		public RuleCall getValueListValueElementParserRuleCall_2_1_0() { return cValueListValueElementParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class MapValuePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapValueProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_1_0 = (RuleCall)cPropertiesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MapValueProperty:
		//	"{" properties+=Property ("," properties+=Property)* "}";
		public ParserRule getRule() { return rule; }

		//"{" properties+=Property ("," properties+=Property)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//properties+=Property
		public Assignment getPropertiesAssignment_1() { return cPropertiesAssignment_1; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_1_0() { return cPropertiesPropertyParserRuleCall_1_0; }

		//("," properties+=Property)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//properties+=Property
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_1_0() { return cPropertiesPropertyParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class SimpleValuePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleValueProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStringValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cStringValueAssignment_0.eContents().get(0);
		private final Assignment cBooleanValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Alternatives cBooleanValueAlternatives_1_0 = (Alternatives)cBooleanValueAssignment_1.eContents().get(0);
		private final Keyword cBooleanValueTrueKeyword_1_0_0 = (Keyword)cBooleanValueAlternatives_1_0.eContents().get(0);
		private final Keyword cBooleanValueFalseKeyword_1_0_1 = (Keyword)cBooleanValueAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNegativeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cNegativeHyphenMinusKeyword_2_0_0 = (Keyword)cNegativeAssignment_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cIntValueAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cIntValueINTTerminalRuleCall_2_1_0_0 = (RuleCall)cIntValueAssignment_2_1_0.eContents().get(0);
		private final Assignment cRealValueAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cRealValueREALTerminalRuleCall_2_1_1_0 = (RuleCall)cRealValueAssignment_2_1_1.eContents().get(0);
		
		//SimpleValueProperty:
		//	stringValue=STRING | booleanValue=("true" | "false") | negative?="-"? (intValue=INT | realValue=REAL);
		public ParserRule getRule() { return rule; }

		//stringValue=STRING | booleanValue=("true" | "false") | negative?="-"? (intValue=INT | realValue=REAL)
		public Alternatives getAlternatives() { return cAlternatives; }

		//stringValue=STRING
		public Assignment getStringValueAssignment_0() { return cStringValueAssignment_0; }

		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_0_0() { return cStringValueSTRINGTerminalRuleCall_0_0; }

		//booleanValue=("true" | "false")
		public Assignment getBooleanValueAssignment_1() { return cBooleanValueAssignment_1; }

		//"true" | "false"
		public Alternatives getBooleanValueAlternatives_1_0() { return cBooleanValueAlternatives_1_0; }

		//"true"
		public Keyword getBooleanValueTrueKeyword_1_0_0() { return cBooleanValueTrueKeyword_1_0_0; }

		//"false"
		public Keyword getBooleanValueFalseKeyword_1_0_1() { return cBooleanValueFalseKeyword_1_0_1; }

		//negative?="-"? (intValue=INT | realValue=REAL)
		public Group getGroup_2() { return cGroup_2; }

		//negative?="-"?
		public Assignment getNegativeAssignment_2_0() { return cNegativeAssignment_2_0; }

		//"-"
		public Keyword getNegativeHyphenMinusKeyword_2_0_0() { return cNegativeHyphenMinusKeyword_2_0_0; }

		//intValue=INT | realValue=REAL
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//intValue=INT
		public Assignment getIntValueAssignment_2_1_0() { return cIntValueAssignment_2_1_0; }

		//INT
		public RuleCall getIntValueINTTerminalRuleCall_2_1_0_0() { return cIntValueINTTerminalRuleCall_2_1_0_0; }

		//realValue=REAL
		public Assignment getRealValueAssignment_2_1_1() { return cRealValueAssignment_2_1_1; }

		//REAL
		public RuleCall getRealValueREALTerminalRuleCall_2_1_1_0() { return cRealValueREALTerminalRuleCall_2_1_1_0; }
	}

	public class ReferenceValuePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceValueProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdrefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceElementCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceElementValidIDParserRuleCall_1_0_1 = (RuleCall)cReferenceElementCrossReference_1_0.eContents().get(1);
		
		//ReferenceValueProperty:
		//	"idref" reference=[Element|ValidID];
		public ParserRule getRule() { return rule; }

		//"idref" reference=[Element|ValidID]
		public Group getGroup() { return cGroup; }

		//"idref"
		public Keyword getIdrefKeyword_0() { return cIdrefKeyword_0; }

		//reference=[Element|ValidID]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[Element|ValidID]
		public CrossReference getReferenceElementCrossReference_1_0() { return cReferenceElementCrossReference_1_0; }

		//ValidID
		public RuleCall getReferenceElementValidIDParserRuleCall_1_0_1() { return cReferenceElementValidIDParserRuleCall_1_0_1; }
	}

	public class IncludeValuePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IncludeValueProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceComponentDefinitionCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceComponentDefinitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cSourceComponentDefinitionCrossReference_1_0.eContents().get(1);
		
		//IncludeValueProperty:
		//	"include" source=[ComponentDefinition|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"include" source=[ComponentDefinition|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//source=[ComponentDefinition|QualifiedName]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }

		//[ComponentDefinition|QualifiedName]
		public CrossReference getSourceComponentDefinitionCrossReference_1_0() { return cSourceComponentDefinitionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getSourceComponentDefinitionQualifiedNameParserRuleCall_1_0_1() { return cSourceComponentDefinitionQualifiedNameParserRuleCall_1_0_1; }
	}

	public class CopyValuePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CopyValueProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCopyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceElementCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceElementValidIDParserRuleCall_1_0_1 = (RuleCall)cReferenceElementCrossReference_1_0.eContents().get(1);
		
		//CopyValueProperty:
		//	"copy" reference=[Element|ValidID];
		public ParserRule getRule() { return rule; }

		//"copy" reference=[Element|ValidID]
		public Group getGroup() { return cGroup; }

		//"copy"
		public Keyword getCopyKeyword_0() { return cCopyKeyword_0; }

		//reference=[Element|ValidID]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[Element|ValidID]
		public CrossReference getReferenceElementCrossReference_1_0() { return cReferenceElementCrossReference_1_0; }

		//ValidID
		public RuleCall getReferenceElementValidIDParserRuleCall_1_0_1() { return cReferenceElementValidIDParserRuleCall_1_0_1; }
	}

	public class ControllerHandledValuePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControllerHandledValueProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControllermethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodnameIDTerminalRuleCall_1_0 = (RuleCall)cMethodnameAssignment_1.eContents().get(0);
		
		//ControllerHandledValueProperty:
		//	"controllermethod" methodname=ID;
		public ParserRule getRule() { return rule; }

		//"controllermethod" methodname=ID
		public Group getGroup() { return cGroup; }

		//"controllermethod"
		public Keyword getControllermethodKeyword_0() { return cControllermethodKeyword_0; }

		//methodname=ID
		public Assignment getMethodnameAssignment_1() { return cMethodnameAssignment_1; }

		//ID
		public RuleCall getMethodnameIDTerminalRuleCall_1_0() { return cMethodnameIDTerminalRuleCall_1_0; }
	}

	public class ScriptHandlerHandledValuePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScriptHandlerHandledValueProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptmethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionnameSTRINGTerminalRuleCall_1_0 = (RuleCall)cFunctionnameAssignment_1.eContents().get(0);
		
		//ScriptHandlerHandledValueProperty:
		//	"scriptmethod" functionname=STRING;
		public ParserRule getRule() { return rule; }

		//"scriptmethod" functionname=STRING
		public Group getGroup() { return cGroup; }

		//"scriptmethod"
		public Keyword getScriptmethodKeyword_0() { return cScriptmethodKeyword_0; }

		//functionname=STRING
		public Assignment getFunctionnameAssignment_1() { return cFunctionnameAssignment_1; }

		//STRING
		public RuleCall getFunctionnameSTRINGTerminalRuleCall_1_0() { return cFunctionnameSTRINGTerminalRuleCall_1_0; }
	}

	public class ScriptValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScriptValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptexpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourcecodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourcecodeSCRIPTLITERALTerminalRuleCall_1_0 = (RuleCall)cSourcecodeAssignment_1.eContents().get(0);
		
		//ScriptValueExpression:
		//	"scriptexpression" sourcecode=SCRIPTLITERAL;
		public ParserRule getRule() { return rule; }

		//"scriptexpression" sourcecode=SCRIPTLITERAL
		public Group getGroup() { return cGroup; }

		//"scriptexpression"
		public Keyword getScriptexpressionKeyword_0() { return cScriptexpressionKeyword_0; }

		//sourcecode=SCRIPTLITERAL
		public Assignment getSourcecodeAssignment_1() { return cSourcecodeAssignment_1; }

		//SCRIPTLITERAL
		public RuleCall getSourcecodeSCRIPTLITERALTerminalRuleCall_1_0() { return cSourcecodeSCRIPTLITERALTerminalRuleCall_1_0; }
	}

	public class ScriptValueReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScriptValueReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptvalueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceIDTerminalRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		
		//ScriptValueReference:
		//	"scriptvalue" reference=ID;
		public ParserRule getRule() { return rule; }

		//"scriptvalue" reference=ID
		public Group getGroup() { return cGroup; }

		//"scriptvalue"
		public Keyword getScriptvalueKeyword_0() { return cScriptvalueKeyword_0; }

		//reference=ID
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//ID
		public RuleCall getReferenceIDTerminalRuleCall_1_0() { return cReferenceIDTerminalRuleCall_1_0; }
	}

	public class LocationValuePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocationValueProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LocationValueProperty:
		//	"location" value=STRING;
		public ParserRule getRule() { return rule; }

		//"location" value=STRING
		public Group getGroup() { return cGroup; }

		//"location"
		public Keyword getLocationKeyword_0() { return cLocationKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class ResourceValuePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceValueProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRstringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueStringValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ResourceValueProperty:
		//	"rstring" value=StringValue;
		public ParserRule getRule() { return rule; }

		//"rstring" value=StringValue
		public Group getGroup() { return cGroup; }

		//"rstring"
		public Keyword getRstringKeyword_0() { return cRstringKeyword_0; }

		//value=StringValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//StringValue
		public RuleCall getValueStringValueParserRuleCall_1_0() { return cValueStringValueParserRuleCall_1_0; }
	}

	public class BindValuePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BindValueProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cElementReferenceElementCrossReference_1_0 = (CrossReference)cElementReferenceAssignment_1.eContents().get(0);
		private final RuleCall cElementReferenceElementValidIDParserRuleCall_1_0_1 = (RuleCall)cElementReferenceElementCrossReference_1_0.eContents().get(1);
		private final Keyword cNumberSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeIDTerminalRuleCall_3_0 = (RuleCall)cAttributeAssignment_3.eContents().get(0);
		
		//BindValueProperty:
		//	"bind" elementReference=[Element|ValidID] "#" attribute=ID;
		public ParserRule getRule() { return rule; }

		//"bind" elementReference=[Element|ValidID] "#" attribute=ID
		public Group getGroup() { return cGroup; }

		//"bind"
		public Keyword getBindKeyword_0() { return cBindKeyword_0; }

		//elementReference=[Element|ValidID]
		public Assignment getElementReferenceAssignment_1() { return cElementReferenceAssignment_1; }

		//[Element|ValidID]
		public CrossReference getElementReferenceElementCrossReference_1_0() { return cElementReferenceElementCrossReference_1_0; }

		//ValidID
		public RuleCall getElementReferenceElementValidIDParserRuleCall_1_0_1() { return cElementReferenceElementValidIDParserRuleCall_1_0_1; }

		//"#"
		public Keyword getNumberSignKeyword_2() { return cNumberSignKeyword_2; }

		//attribute=ID
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }

		//ID
		public RuleCall getAttributeIDTerminalRuleCall_3_0() { return cAttributeIDTerminalRuleCall_3_0; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	
	
	private ModelElements pModel;
	private PackageDeclarationElements pPackageDeclaration;
	private ImportElements pImport;
	private ComponentDefinitionElements pComponentDefinition;
	private ElementElements pElement;
	private DefineElements pDefine;
	private ScriptElements pScript;
	private StaticValuePropertyElements pStaticValueProperty;
	private PropertyElements pProperty;
	private ValuePropertyElements pValueProperty;
	private SingleValuePropertyElements pSingleValueProperty;
	private MultiValuePropertyElements pMultiValueProperty;
	private FactoryValueElementElements pFactoryValueElement;
	private ListValueElementElements pListValueElement;
	private ListValuePropertyElements pListValueProperty;
	private MapValuePropertyElements pMapValueProperty;
	private SimpleValuePropertyElements pSimpleValueProperty;
	private ReferenceValuePropertyElements pReferenceValueProperty;
	private IncludeValuePropertyElements pIncludeValueProperty;
	private CopyValuePropertyElements pCopyValueProperty;
	private ControllerHandledValuePropertyElements pControllerHandledValueProperty;
	private ScriptHandlerHandledValuePropertyElements pScriptHandlerHandledValueProperty;
	private ScriptValueExpressionElements pScriptValueExpression;
	private ScriptValueReferenceElements pScriptValueReference;
	private LocationValuePropertyElements pLocationValueProperty;
	private ResourceValuePropertyElements pResourceValueProperty;
	private BindValuePropertyElements pBindValueProperty;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private StringValueElements pStringValue;
	private TerminalRule tREAL;
	private TerminalRule tSCRIPTLITERAL;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public FXGraphGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.bestsolution.efxclipse.tooling.fxgraph.FXGraph".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Model:
	//	package=PackageDeclaration? imports+=Import* componentDef=ComponentDefinition;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//PackageDeclaration:
	//	"package" name=QualifiedName;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return (pPackageDeclaration != null) ? pPackageDeclaration : (pPackageDeclaration = new PackageDeclarationElements());
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//ComponentDefinition:
	//	"component" name=ValidID (("controlledby" controller=JvmTypeReference)? & ("styledwith" (previewCssFiles+=STRING | "["
	//	previewCssFiles+=STRING ("," previewCssFiles+=STRING)* "]"))? & ("resourcefile" previewResourceBundle=STRING)? &
	//	("extraClasspath" "[" previewClasspathEntries+=STRING ("," previewClasspathEntries+=STRING)* "]")? & ("sceneSetup"
	//	sceneDefinition=[ComponentDefinition|QualifiedName])?) "{" scripts+=Script? (defines+=Define ("," defines+=Define)*)?
	//	rootNode=Element "}";
	public ComponentDefinitionElements getComponentDefinitionAccess() {
		return (pComponentDefinition != null) ? pComponentDefinition : (pComponentDefinition = new ComponentDefinitionElements());
	}
	
	public ParserRule getComponentDefinitionRule() {
		return getComponentDefinitionAccess().getRule();
	}

	//Element:
	//	type=JvmTypeReference (("(" value=SimpleValueProperty ")")? ("id" name=ValidID)? | ("id" name=ValidID)? "{"
	//	((properties+=Property | staticProperties+=StaticValueProperty | defaultChildren+=Element) ("," (properties+=Property
	//	| staticProperties+=StaticValueProperty | defaultChildren+=Element))*)? "}" | ("id" name=ValidID)? "createdby"
	//	factory=ID "{" values+=FactoryValueElement ("," values+=FactoryValueElement)* "}");
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Define:
	//	"define" element=Element;
	public DefineElements getDefineAccess() {
		return (pDefine != null) ? pDefine : (pDefine = new DefineElements());
	}
	
	public ParserRule getDefineRule() {
		return getDefineAccess().getRule();
	}

	//Script:
	//	"script" language=ID (source=STRING | sourcecode=SCRIPTLITERAL);
	public ScriptElements getScriptAccess() {
		return (pScript != null) ? pScript : (pScript = new ScriptElements());
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}

	//StaticValueProperty:
	//	modifier=("preview" | "runtime-only")? "call" type=JvmTypeReference "#" name=ID ":" value=ValueProperty;
	public StaticValuePropertyElements getStaticValuePropertyAccess() {
		return (pStaticValueProperty != null) ? pStaticValueProperty : (pStaticValueProperty = new StaticValuePropertyElements());
	}
	
	public ParserRule getStaticValuePropertyRule() {
		return getStaticValuePropertyAccess().getRule();
	}

	//Property:
	//	modifier=("preview" | "runtime-only")? name=ID ":" value=ValueProperty;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//ValueProperty:
	//	SingleValueProperty | MultiValueProperty;
	public ValuePropertyElements getValuePropertyAccess() {
		return (pValueProperty != null) ? pValueProperty : (pValueProperty = new ValuePropertyElements());
	}
	
	public ParserRule getValuePropertyRule() {
		return getValuePropertyAccess().getRule();
	}

	//SingleValueProperty:
	//	SimpleValueProperty | Element | ReferenceValueProperty | IncludeValueProperty | CopyValueProperty |
	//	ControllerHandledValueProperty | ScriptValueExpression | ScriptHandlerHandledValueProperty | ScriptValueReference |
	//	LocationValueProperty | ResourceValueProperty | BindValueProperty;
	public SingleValuePropertyElements getSingleValuePropertyAccess() {
		return (pSingleValueProperty != null) ? pSingleValueProperty : (pSingleValueProperty = new SingleValuePropertyElements());
	}
	
	public ParserRule getSingleValuePropertyRule() {
		return getSingleValuePropertyAccess().getRule();
	}

	//MultiValueProperty:
	//	ListValueProperty | MapValueProperty;
	public MultiValuePropertyElements getMultiValuePropertyAccess() {
		return (pMultiValueProperty != null) ? pMultiValueProperty : (pMultiValueProperty = new MultiValuePropertyElements());
	}
	
	public ParserRule getMultiValuePropertyRule() {
		return getMultiValuePropertyAccess().getRule();
	}

	//FactoryValueElement:
	//	SimpleValueProperty | Element;
	public FactoryValueElementElements getFactoryValueElementAccess() {
		return (pFactoryValueElement != null) ? pFactoryValueElement : (pFactoryValueElement = new FactoryValueElementElements());
	}
	
	public ParserRule getFactoryValueElementRule() {
		return getFactoryValueElementAccess().getRule();
	}

	//ListValueElement:
	//	Element | ReferenceValueProperty | IncludeValueProperty | SimpleValueProperty;
	public ListValueElementElements getListValueElementAccess() {
		return (pListValueElement != null) ? pListValueElement : (pListValueElement = new ListValueElementElements());
	}
	
	public ParserRule getListValueElementRule() {
		return getListValueElementAccess().getRule();
	}

	//ListValueProperty:
	//	"[" value+=ListValueElement ("," value+=ListValueElement)* "]";
	public ListValuePropertyElements getListValuePropertyAccess() {
		return (pListValueProperty != null) ? pListValueProperty : (pListValueProperty = new ListValuePropertyElements());
	}
	
	public ParserRule getListValuePropertyRule() {
		return getListValuePropertyAccess().getRule();
	}

	//MapValueProperty:
	//	"{" properties+=Property ("," properties+=Property)* "}";
	public MapValuePropertyElements getMapValuePropertyAccess() {
		return (pMapValueProperty != null) ? pMapValueProperty : (pMapValueProperty = new MapValuePropertyElements());
	}
	
	public ParserRule getMapValuePropertyRule() {
		return getMapValuePropertyAccess().getRule();
	}

	//SimpleValueProperty:
	//	stringValue=STRING | booleanValue=("true" | "false") | negative?="-"? (intValue=INT | realValue=REAL);
	public SimpleValuePropertyElements getSimpleValuePropertyAccess() {
		return (pSimpleValueProperty != null) ? pSimpleValueProperty : (pSimpleValueProperty = new SimpleValuePropertyElements());
	}
	
	public ParserRule getSimpleValuePropertyRule() {
		return getSimpleValuePropertyAccess().getRule();
	}

	//ReferenceValueProperty:
	//	"idref" reference=[Element|ValidID];
	public ReferenceValuePropertyElements getReferenceValuePropertyAccess() {
		return (pReferenceValueProperty != null) ? pReferenceValueProperty : (pReferenceValueProperty = new ReferenceValuePropertyElements());
	}
	
	public ParserRule getReferenceValuePropertyRule() {
		return getReferenceValuePropertyAccess().getRule();
	}

	//IncludeValueProperty:
	//	"include" source=[ComponentDefinition|QualifiedName];
	public IncludeValuePropertyElements getIncludeValuePropertyAccess() {
		return (pIncludeValueProperty != null) ? pIncludeValueProperty : (pIncludeValueProperty = new IncludeValuePropertyElements());
	}
	
	public ParserRule getIncludeValuePropertyRule() {
		return getIncludeValuePropertyAccess().getRule();
	}

	//CopyValueProperty:
	//	"copy" reference=[Element|ValidID];
	public CopyValuePropertyElements getCopyValuePropertyAccess() {
		return (pCopyValueProperty != null) ? pCopyValueProperty : (pCopyValueProperty = new CopyValuePropertyElements());
	}
	
	public ParserRule getCopyValuePropertyRule() {
		return getCopyValuePropertyAccess().getRule();
	}

	//ControllerHandledValueProperty:
	//	"controllermethod" methodname=ID;
	public ControllerHandledValuePropertyElements getControllerHandledValuePropertyAccess() {
		return (pControllerHandledValueProperty != null) ? pControllerHandledValueProperty : (pControllerHandledValueProperty = new ControllerHandledValuePropertyElements());
	}
	
	public ParserRule getControllerHandledValuePropertyRule() {
		return getControllerHandledValuePropertyAccess().getRule();
	}

	//ScriptHandlerHandledValueProperty:
	//	"scriptmethod" functionname=STRING;
	public ScriptHandlerHandledValuePropertyElements getScriptHandlerHandledValuePropertyAccess() {
		return (pScriptHandlerHandledValueProperty != null) ? pScriptHandlerHandledValueProperty : (pScriptHandlerHandledValueProperty = new ScriptHandlerHandledValuePropertyElements());
	}
	
	public ParserRule getScriptHandlerHandledValuePropertyRule() {
		return getScriptHandlerHandledValuePropertyAccess().getRule();
	}

	//ScriptValueExpression:
	//	"scriptexpression" sourcecode=SCRIPTLITERAL;
	public ScriptValueExpressionElements getScriptValueExpressionAccess() {
		return (pScriptValueExpression != null) ? pScriptValueExpression : (pScriptValueExpression = new ScriptValueExpressionElements());
	}
	
	public ParserRule getScriptValueExpressionRule() {
		return getScriptValueExpressionAccess().getRule();
	}

	//ScriptValueReference:
	//	"scriptvalue" reference=ID;
	public ScriptValueReferenceElements getScriptValueReferenceAccess() {
		return (pScriptValueReference != null) ? pScriptValueReference : (pScriptValueReference = new ScriptValueReferenceElements());
	}
	
	public ParserRule getScriptValueReferenceRule() {
		return getScriptValueReferenceAccess().getRule();
	}

	//LocationValueProperty:
	//	"location" value=STRING;
	public LocationValuePropertyElements getLocationValuePropertyAccess() {
		return (pLocationValueProperty != null) ? pLocationValueProperty : (pLocationValueProperty = new LocationValuePropertyElements());
	}
	
	public ParserRule getLocationValuePropertyRule() {
		return getLocationValuePropertyAccess().getRule();
	}

	//ResourceValueProperty:
	//	"rstring" value=StringValue;
	public ResourceValuePropertyElements getResourceValuePropertyAccess() {
		return (pResourceValueProperty != null) ? pResourceValueProperty : (pResourceValueProperty = new ResourceValuePropertyElements());
	}
	
	public ParserRule getResourceValuePropertyRule() {
		return getResourceValuePropertyAccess().getRule();
	}

	//BindValueProperty:
	//	"bind" elementReference=[Element|ValidID] "#" attribute=ID;
	public BindValuePropertyElements getBindValuePropertyAccess() {
		return (pBindValueProperty != null) ? pBindValueProperty : (pBindValueProperty = new BindValuePropertyElements());
	}
	
	public ParserRule getBindValuePropertyRule() {
		return getBindValuePropertyAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return (pStringValue != null) ? pStringValue : (pStringValue = new StringValueElements());
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	/// *LiteralObject:
	//	'<' value=SimpleValueProperty '>'
	//;* / terminal REAL returns ecore::EDouble:
	//	"0".."9"* "." "0".."9"+;
	public TerminalRule getREALRule() {
		return (tREAL != null) ? tREAL : (tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL"));
	} 

	//terminal SCRIPTLITERAL:
	//	"#{"->"}#";
	public TerminalRule getSCRIPTLITERALRule() {
		return (tSCRIPTLITERAL != null) ? tSCRIPTLITERAL : (tSCRIPTLITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SCRIPTLITERAL"));
	} 

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | ".." | "=>" | ">" ">" => ">"? | "<" "<" => "<"? | "<" ">" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? => memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	{XClosure} "[" => ((declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? => featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? => arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
