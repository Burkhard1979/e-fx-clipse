/*
* generated by Xtext
*/
package at.bestsolution.efxclipse.tooling.fxml2.ui.contentassist;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.edit.ui.util.EditUIUtil;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jface.text.IDocument;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import at.bestsolution.efxclipse.tooling.fxgraph.fXGraph.Element;
import at.bestsolution.efxclipse.tooling.fxgraph.ui.util.JDTHelper;
import at.bestsolution.efxclipse.tooling.fxgraph.ui.util.JDTHelper.Property;
import at.bestsolution.efxclipse.tooling.fxgraph.ui.util.JDTHelper.TypeData;
import at.bestsolution.efxclipse.tooling.fxml2.fXML.ClassDefinition;
import at.bestsolution.efxclipse.tooling.fxml2.fXML.Model;
import at.bestsolution.efxclipse.tooling.fxml2.fXML.ProcessingInstruction;
import at.bestsolution.efxclipse.tooling.fxml2.fXML.PropertyAttributeDefinition;
import at.bestsolution.efxclipse.tooling.fxml2.ui.contentassist.AbstractFXMLProposalProvider;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class FXMLProposalProvider extends AbstractFXMLProposalProvider {
	private JDTHelper helper;
	
	public FXMLProposalProvider() {
		this.helper = new JDTHelper();
	}
	
	private IJavaProject getProject(Resource resource) {
		URI uri = resource.getURI();

		if (uri != null) {
			IProject p = ResourcesPlugin.getWorkspace().getRoot()
					.getProject(uri.segment(1));
			if (p != null && p.exists()) {
				return JavaCore.create(p);
			}
		}

		return null;
	}
	
	private IType toJavaClass(String name, Model rootElement, IJavaProject jProject) {
		IType type = null;

		for (ProcessingInstruction imp : rootElement.getImports()) {
			if (imp.getValue().endsWith("*")) {
				try {
					IType t = jProject.findType(imp.getValue().substring(0,
							imp.getValue().length() - 1) + name);
					if (t != null) {
						return t;
					}
				} catch (JavaModelException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			} else {
				if (imp.getValue().endsWith(name)) {
					try {
						IType t = jProject.findType(imp.getValue());
						if (t != null) {
							return t;
						}
					} catch (JavaModelException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}

		return type;
	}
	
	@Override
	public void completePropertyAttributeDefinition_Name(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		ClassDefinition def = (ClassDefinition) model;
		
		Model rootElement = (Model) model.eResource().getContents().get(0);
		IJavaProject jp = getProject(model.eResource());
		
		IType t = toJavaClass(def.getName(), rootElement, jp);
		if( t != null ) {
			TypeData d = helper.getTypeData(jp, t);
			if( d != null ) {
				for (Property p : d.properties) {
					acceptor.accept(createCompletionProposal(p.name + " = \"\" ",
							p.getDescription(), p.getIcon(), context));
				}
			}
		}
//		
//		// TODO Auto-generated method stub
//		super.completePropertyAttributeDefinition_Name(model, assignment, context,
//				acceptor);
	}
}
