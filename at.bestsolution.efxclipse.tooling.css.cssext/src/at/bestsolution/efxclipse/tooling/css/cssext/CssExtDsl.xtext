grammar at.bestsolution.efxclipse.tooling.css.cssext.CssExtDsl with org.eclipse.xtext.common.Terminals

generate cssExtDsl "http://www.bestsolution.at/efxclipse/tooling/css/cssext/CssExtDsl"


CssExtension:
	imports+=Import*
	packageDef=PackageDefinition?
//	packageDef=PackageDefinition?
//	rule=CSSRuleSet
;

terminal PSEUDO: ':' (!' ') ID;

terminal ID  : ('a'..'z'|'A'..'Z'|'_'|'-') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'-')*;

terminal JDOC : '/**' -> '*/' ;
terminal ML_COMMENT : '/*' (!'*') -> '*/' ;
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')? ;


Import:
	'import' importedNamespace=QualifiedNameWithWildCard;
	
ValidID:
	ID;

QualifiedName:
  ValidID (=>'.' ValidID)*;

QualifiedNameWithWildCard :
	QualifiedName  ('.' '*')?;
	

PackageDefinition:
	'package' name=QualifiedName 
	'{'
		(
		rules+=CSSRuleDefinition |
		subpackages+=PackageDefinition |
		elements+=ElementDeclartion
		)*
	'}'
;

Doku:
	content=JDOC
;

CSSBaseType returns CSSRule:
	'INT' | 'DOUBLE' | 'UDOUBLE'
;

ElementDeclartion: 
	doku=Doku?
	name=QualifiedName 
	'{'
		(
			properties+=PropertyDefinition |
			pseudoClasses+=PseudoClassDefinition
		)*
	'}'
;

PropertyDefinition: 
	doku=Doku?
	name=ID rule=CSSRuleOr ('default:' default=CSSDefaultValue)? ';'
;

PseudoClassDefinition:
	doku=Doku?
	name=PSEUDO
;

CSSRuleId:
	name=QualifiedName
;

CSSRuleRef:
	'<' ref=[CSSRuleId|QualifiedName] '>'
;


CSSRuleDefinition:
	{CSSRuleDefinition}
	doku=Doku?
	name=CSSRuleId '=' r=CSSRuleOr ';'
;

CSSRuleOr returns CSSRule:
	 CSSRuleXor ({CSSRuleOr.ors+=current} ('|' ors+=CSSRuleXor)+)?
;

CSSRuleXor returns CSSRule:
	 CSSRuleConcat ({CSSRuleXor.xors+=current} ('||' xors+=CSSRuleConcat)+)?
;

CSSRuleConcat returns CSSRule:
	 CSSRulePostfix ({CSSRuleConcat.conc+=current} (conc+=CSSRulePostfix)+)?
;

CSSRulePostfix returns CSSRule:
	 CSSRulePrimary ({CSSRulePostfix.rule=current} cardinality=('*' |'+' | '?'))?
;

CSSRuleBracket returns CSSRule:
	{CSSRuleBracket} '[' inner=CSSRuleOr ']'
;

CSSRulePrimary returns CSSRule:
	CSSRuleRef |
	CSSRuleBracket |
	CSSRuleLiteral |
	CSSBaseType
;

CSSRuleLiteral returns CSSRule:
	{CSSRuleLiteral} value=ID | value=','
;

CSSDefaultValue:
	CSSRuleLiteral | INT | (INT*'.'INT+) | STRING
;

