import css3.color.color

package javafx {
	
	/**
	 * Boolean values can either have the string value of "true" or "false", the values are case insensitive as all CSS is case insensitive.
	 */
	boolean = true | false;
	
	
	/**
	 * No whitespace is allowed between the number and units if provided.
	 *  TODO wie bau ma so was ein!?
	 * Sizes can either be a percentage or a length with units. If units are not specified then specified the 'px' is assumed. Some units are relative and others absolute.
	 * 
	 * Relative
	 * <ul>
	 * <li>px: pixels, relative to the viewing device</li>
	 * <li>em: the 'font-size' of the relevant font</li>
	 * <li>ex: the 'x-height' of the relevant font</li>
	 * </ul>
	 * Absolute
	 * <ul>
	 * <li>in: inches — 1 inch is equal to 2.54 centimeters.</li>
	 * <li>cm: centimeters</li>
	 * <li>mm: millimeters</li>
	 * <li>pt: points — the points used by CSS 2.1 are equal to 1/72nd of an inch.</li>
	 * <li>pc: picas — 1 pica is equal to 12 points.</li>
	 * </ul>
	 * Percentages
	 * These are a percentage of some length, they are context sensitive so what they are relative to depends on where they are specified. Each property that supports a percentage should specify if percentage is supported and if it is what it is relative to.
	 */
	size = double [ $%$ | px | mm | cm | in | pt | pc | em | ex ]?;
	
	
	
	font-family = string | serif | sans-serif | cursive | fantasy | monospace;
	font-size = <size>;
	font-style = normal | italic | oblique;
	font-weight = normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;
	font = [ <font-style> || <font-weight> ]? <font-size> <font-family>;
	
	SomeTextNode {
		-fx-font <font>;
		-fx-font-family <font-family>;
		-fx-font-size <font-size>;
		-fx-font-style <font-style>;
		-fx-font-weight <font-weight>;
	}
	
	//lineargradient = linear ( <size>, <size> ) to ( <size>, <size> ) stops [ ( int, <color> ) ]+ [ repeat | reflect ]?;
	
	//radialgradient = radial [ ( <size>, <size> ) , ]? <size> [ focus ( <size>, <size> ) ]? stops [ ( <number>, <color> ) ]+ [ repeat | reflect ]?;
	
	//paint = <color> | <lineargradient> | <radialgradient>;
	
	color = <named-color> | <looked-up-color> | <rgb-color> | <hsb-color> | <color-function>;
	
	named-color = aliceblue; // ...
	
	looked-up-color = string;
	
	rgb-color = <css3.color.rgb>;
	hsb-color = <css3.color.hsl>;
	 
	color-function = <derive> | <ladder>;
	
	derive = derive( <color> , <css3.color.percentage> );
	
	ladder = ladder(<color>) stops [ ( double, <color> ) ]+;
	
}