/*
* generated by Xtext
*/

package at.bestsolution.efxclipse.tooling.css.cssext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CssExtDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CssExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CssExtension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cPackageDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageDefPackageDeclarationParserRuleCall_1_0 = (RuleCall)cPackageDefAssignment_1.eContents().get(0);
		
		////	packageDef=PackageDeclaration?
		////	rule=CSSRuleSet
		//CssExtension:
		//	imports+=Import* packageDef=PackageDeclaration?;
		public ParserRule getRule() { return rule; }

		//imports+=Import* packageDef=PackageDeclaration?
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//packageDef=PackageDeclaration?
		public Assignment getPackageDefAssignment_1() { return cPackageDefAssignment_1; }

		//PackageDeclaration
		public RuleCall getPackageDefPackageDeclarationParserRuleCall_1_0() { return cPackageDefPackageDeclarationParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValidID:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID ("." ValidID)*;
		public ParserRule getRule() { return rule; }

		//ValidID ("." ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//(=> "." ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRuleCSSRuleSetParserRuleCall_3_0 = (RuleCall)cRuleAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PackageDeclaration:
		//	"package" name=QualifiedName "{" rule=CSSRuleSet? "}";
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName "{" rule=CSSRuleSet? "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//rule=CSSRuleSet?
		public Assignment getRuleAssignment_3() { return cRuleAssignment_3; }

		//CSSRuleSet
		public RuleCall getRuleCSSRuleSetParserRuleCall_3_0() { return cRuleCSSRuleSetParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class CSSRuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CSSRuleSet");
		private final Assignment cRulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRulesCSSRuleAssignmentParserRuleCall_0 = (RuleCall)cRulesAssignment.eContents().get(0);
		
		////PackageDeclaration:
		////	'package' name=QualifiedName '{'
		////		typDefs+=TypeDef? (',' typDefs+=TypeDef)*
		////		elementDefs+=ElementDef? (',' elementDefs+=ElementDef)*
		////		subpackages+=PackageDeclaration*
		////	'}';
		////
		////TypeDef:
		////	GenericTypeDef | EnumTypeDef
		////;
		//CSSRuleSet:
		//	rules+=CSSRuleAssignment+;
		public ParserRule getRule() { return rule; }

		//rules+=CSSRuleAssignment+
		public Assignment getRulesAssignment() { return cRulesAssignment; }

		//CSSRuleAssignment
		public RuleCall getRulesCSSRuleAssignmentParserRuleCall_0() { return cRulesCSSRuleAssignmentParserRuleCall_0; }
	}

	public class CSSRuleIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CSSRuleId");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//CSSRuleId:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class CSSRuleRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CSSRuleRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefCSSRuleIdCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefCSSRuleIdIDTerminalRuleCall_1_0_1 = (RuleCall)cRefCSSRuleIdCrossReference_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CSSRuleRef:
		//	"<" ref=[CSSRuleId] ">";
		public ParserRule getRule() { return rule; }

		//"<" ref=[CSSRuleId] ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//ref=[CSSRuleId]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[CSSRuleId]
		public CrossReference getRefCSSRuleIdCrossReference_1_0() { return cRefCSSRuleIdCrossReference_1_0; }

		//ID
		public RuleCall getRefCSSRuleIdIDTerminalRuleCall_1_0_1() { return cRefCSSRuleIdIDTerminalRuleCall_1_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}

	public class CSSRuleAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CSSRuleAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCSSRuleAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdCSSRuleIdParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRCSSRuleOrExpressionParserRuleCall_3_0 = (RuleCall)cRAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CSSRuleAssignment:
		//	{CSSRuleAssignment} id=CSSRuleId "=" r=CSSRuleOrExpression ";";
		public ParserRule getRule() { return rule; }

		//{CSSRuleAssignment} id=CSSRuleId "=" r=CSSRuleOrExpression ";"
		public Group getGroup() { return cGroup; }

		//{CSSRuleAssignment}
		public Action getCSSRuleAssignmentAction_0() { return cCSSRuleAssignmentAction_0; }

		//id=CSSRuleId
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//CSSRuleId
		public RuleCall getIdCSSRuleIdParserRuleCall_1_0() { return cIdCSSRuleIdParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//r=CSSRuleOrExpression
		public Assignment getRAssignment_3() { return cRAssignment_3; }

		//CSSRuleOrExpression
		public RuleCall getRCSSRuleOrExpressionParserRuleCall_3_0() { return cRCSSRuleOrExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class CSSRuleOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CSSRuleOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOrsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOrsCSSRuleXorExpressionParserRuleCall_0_0 = (RuleCall)cOrsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOrsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOrsCSSRuleXorExpressionParserRuleCall_1_1_0 = (RuleCall)cOrsAssignment_1_1.eContents().get(0);
		
		//CSSRuleOrExpression returns CSSRuleExpression:
		//	ors+=CSSRuleXorExpression ("|" ors+=CSSRuleXorExpression)*;
		public ParserRule getRule() { return rule; }

		//ors+=CSSRuleXorExpression ("|" ors+=CSSRuleXorExpression)*
		public Group getGroup() { return cGroup; }

		//ors+=CSSRuleXorExpression
		public Assignment getOrsAssignment_0() { return cOrsAssignment_0; }

		//CSSRuleXorExpression
		public RuleCall getOrsCSSRuleXorExpressionParserRuleCall_0_0() { return cOrsCSSRuleXorExpressionParserRuleCall_0_0; }

		//("|" ors+=CSSRuleXorExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//ors+=CSSRuleXorExpression
		public Assignment getOrsAssignment_1_1() { return cOrsAssignment_1_1; }

		//CSSRuleXorExpression
		public RuleCall getOrsCSSRuleXorExpressionParserRuleCall_1_1_0() { return cOrsCSSRuleXorExpressionParserRuleCall_1_1_0; }
	}

	public class CSSRuleXorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CSSRuleXorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cXorsCSSRulePostfixExpressionParserRuleCall_0_0 = (RuleCall)cXorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cXorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cXorsCSSRulePostfixExpressionParserRuleCall_1_1_0 = (RuleCall)cXorsAssignment_1_1.eContents().get(0);
		
		//CSSRuleXorExpression:
		//	xors+=CSSRulePostfixExpression ("||" xors+=CSSRulePostfixExpression)*;
		public ParserRule getRule() { return rule; }

		//xors+=CSSRulePostfixExpression ("||" xors+=CSSRulePostfixExpression)*
		public Group getGroup() { return cGroup; }

		//xors+=CSSRulePostfixExpression
		public Assignment getXorsAssignment_0() { return cXorsAssignment_0; }

		//CSSRulePostfixExpression
		public RuleCall getXorsCSSRulePostfixExpressionParserRuleCall_0_0() { return cXorsCSSRulePostfixExpressionParserRuleCall_0_0; }

		//("||" xors+=CSSRulePostfixExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//xors+=CSSRulePostfixExpression
		public Assignment getXorsAssignment_1_1() { return cXorsAssignment_1_1; }

		//CSSRulePostfixExpression
		public RuleCall getXorsCSSRulePostfixExpressionParserRuleCall_1_1_0() { return cXorsCSSRulePostfixExpressionParserRuleCall_1_1_0; }
	}

	public class CSSRuleBracketExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CSSRuleBracketExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCSSRuleOrExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CSSRuleBracketExpression:
		//	"[" CSSRuleOrExpression "]";
		public ParserRule getRule() { return rule; }

		//"[" CSSRuleOrExpression "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//CSSRuleOrExpression
		public RuleCall getCSSRuleOrExpressionParserRuleCall_1() { return cCSSRuleOrExpressionParserRuleCall_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class CSSRulePostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CSSRulePostfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCSSRuleConcatParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cCAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCAlternatives_1_0 = (Alternatives)cCAssignment_1.eContents().get(0);
		private final Keyword cCAsteriskKeyword_1_0_0 = (Keyword)cCAlternatives_1_0.eContents().get(0);
		private final Keyword cCPlusSignKeyword_1_0_1 = (Keyword)cCAlternatives_1_0.eContents().get(1);
		private final Keyword cCQuestionMarkKeyword_1_0_2 = (Keyword)cCAlternatives_1_0.eContents().get(2);
		
		//CSSRulePostfixExpression:
		//	CSSRuleConcat c=("*" | "+" | "?")?;
		public ParserRule getRule() { return rule; }

		//CSSRuleConcat c=("*" | "+" | "?")?
		public Group getGroup() { return cGroup; }

		//CSSRuleConcat
		public RuleCall getCSSRuleConcatParserRuleCall_0() { return cCSSRuleConcatParserRuleCall_0; }

		//c=("*" | "+" | "?")?
		public Assignment getCAssignment_1() { return cCAssignment_1; }

		//"*" | "+" | "?"
		public Alternatives getCAlternatives_1_0() { return cCAlternatives_1_0; }

		//"*"
		public Keyword getCAsteriskKeyword_1_0_0() { return cCAsteriskKeyword_1_0_0; }

		//"+"
		public Keyword getCPlusSignKeyword_1_0_1() { return cCPlusSignKeyword_1_0_1; }

		//"?"
		public Keyword getCQuestionMarkKeyword_1_0_2() { return cCQuestionMarkKeyword_1_0_2; }
	}

	public class CSSRuleConcatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CSSRuleConcat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConcCSSRulePrimaryExpressionParserRuleCall_0_0 = (RuleCall)cConcAssignment_0.eContents().get(0);
		private final Assignment cConcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConcCSSRulePrimaryExpressionParserRuleCall_1_0 = (RuleCall)cConcAssignment_1.eContents().get(0);
		
		//CSSRuleConcat:
		//	conc+=CSSRulePrimaryExpression conc+=CSSRulePrimaryExpression?;
		public ParserRule getRule() { return rule; }

		//conc+=CSSRulePrimaryExpression conc+=CSSRulePrimaryExpression?
		public Group getGroup() { return cGroup; }

		//conc+=CSSRulePrimaryExpression
		public Assignment getConcAssignment_0() { return cConcAssignment_0; }

		//CSSRulePrimaryExpression
		public RuleCall getConcCSSRulePrimaryExpressionParserRuleCall_0_0() { return cConcCSSRulePrimaryExpressionParserRuleCall_0_0; }

		//conc+=CSSRulePrimaryExpression?
		public Assignment getConcAssignment_1() { return cConcAssignment_1; }

		//CSSRulePrimaryExpression
		public RuleCall getConcCSSRulePrimaryExpressionParserRuleCall_1_0() { return cConcCSSRulePrimaryExpressionParserRuleCall_1_0; }
	}

	public class CSSRuleLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CSSRuleLiteral");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CSSRuleLiteral:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class CSSRulePrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CSSRulePrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCSSRuleRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCSSRuleBracketExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCSSRuleLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CSSRulePrimaryExpression:
		//	CSSRuleRef | CSSRuleBracketExpression | CSSRuleLiteral;
		public ParserRule getRule() { return rule; }

		//CSSRuleRef | CSSRuleBracketExpression | CSSRuleLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//CSSRuleRef
		public RuleCall getCSSRuleRefParserRuleCall_0() { return cCSSRuleRefParserRuleCall_0; }

		//CSSRuleBracketExpression
		public RuleCall getCSSRuleBracketExpressionParserRuleCall_1() { return cCSSRuleBracketExpressionParserRuleCall_1; }

		//CSSRuleLiteral
		public RuleCall getCSSRuleLiteralParserRuleCall_2() { return cCSSRuleLiteralParserRuleCall_2; }
	}
	
	
	private CssExtensionElements pCssExtension;
	private ImportElements pImport;
	private ValidIDElements pValidID;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private PackageDeclarationElements pPackageDeclaration;
	private CSSRuleSetElements pCSSRuleSet;
	private CSSRuleIdElements pCSSRuleId;
	private CSSRuleRefElements pCSSRuleRef;
	private CSSRuleAssignmentElements pCSSRuleAssignment;
	private CSSRuleOrExpressionElements pCSSRuleOrExpression;
	private CSSRuleXorExpressionElements pCSSRuleXorExpression;
	private CSSRuleBracketExpressionElements pCSSRuleBracketExpression;
	private CSSRulePostfixExpressionElements pCSSRulePostfixExpression;
	private CSSRuleConcatElements pCSSRuleConcat;
	private CSSRuleLiteralElements pCSSRuleLiteral;
	private CSSRulePrimaryExpressionElements pCSSRulePrimaryExpression;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CssExtDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.bestsolution.efxclipse.tooling.css.cssext.CssExtDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////	packageDef=PackageDeclaration?
	////	rule=CSSRuleSet
	//CssExtension:
	//	imports+=Import* packageDef=PackageDeclaration?;
	public CssExtensionElements getCssExtensionAccess() {
		return (pCssExtension != null) ? pCssExtension : (pCssExtension = new CssExtensionElements());
	}
	
	public ParserRule getCssExtensionRule() {
		return getCssExtensionAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//ValidID:
	//	ID;
	public ValidIDElements getValidIDAccess() {
		return (pValidID != null) ? pValidID : (pValidID = new ValidIDElements());
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//PackageDeclaration:
	//	"package" name=QualifiedName "{" rule=CSSRuleSet? "}";
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return (pPackageDeclaration != null) ? pPackageDeclaration : (pPackageDeclaration = new PackageDeclarationElements());
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	////PackageDeclaration:
	////	'package' name=QualifiedName '{'
	////		typDefs+=TypeDef? (',' typDefs+=TypeDef)*
	////		elementDefs+=ElementDef? (',' elementDefs+=ElementDef)*
	////		subpackages+=PackageDeclaration*
	////	'}';
	////
	////TypeDef:
	////	GenericTypeDef | EnumTypeDef
	////;
	//CSSRuleSet:
	//	rules+=CSSRuleAssignment+;
	public CSSRuleSetElements getCSSRuleSetAccess() {
		return (pCSSRuleSet != null) ? pCSSRuleSet : (pCSSRuleSet = new CSSRuleSetElements());
	}
	
	public ParserRule getCSSRuleSetRule() {
		return getCSSRuleSetAccess().getRule();
	}

	//CSSRuleId:
	//	name=ID;
	public CSSRuleIdElements getCSSRuleIdAccess() {
		return (pCSSRuleId != null) ? pCSSRuleId : (pCSSRuleId = new CSSRuleIdElements());
	}
	
	public ParserRule getCSSRuleIdRule() {
		return getCSSRuleIdAccess().getRule();
	}

	//CSSRuleRef:
	//	"<" ref=[CSSRuleId] ">";
	public CSSRuleRefElements getCSSRuleRefAccess() {
		return (pCSSRuleRef != null) ? pCSSRuleRef : (pCSSRuleRef = new CSSRuleRefElements());
	}
	
	public ParserRule getCSSRuleRefRule() {
		return getCSSRuleRefAccess().getRule();
	}

	//CSSRuleAssignment:
	//	{CSSRuleAssignment} id=CSSRuleId "=" r=CSSRuleOrExpression ";";
	public CSSRuleAssignmentElements getCSSRuleAssignmentAccess() {
		return (pCSSRuleAssignment != null) ? pCSSRuleAssignment : (pCSSRuleAssignment = new CSSRuleAssignmentElements());
	}
	
	public ParserRule getCSSRuleAssignmentRule() {
		return getCSSRuleAssignmentAccess().getRule();
	}

	//CSSRuleOrExpression returns CSSRuleExpression:
	//	ors+=CSSRuleXorExpression ("|" ors+=CSSRuleXorExpression)*;
	public CSSRuleOrExpressionElements getCSSRuleOrExpressionAccess() {
		return (pCSSRuleOrExpression != null) ? pCSSRuleOrExpression : (pCSSRuleOrExpression = new CSSRuleOrExpressionElements());
	}
	
	public ParserRule getCSSRuleOrExpressionRule() {
		return getCSSRuleOrExpressionAccess().getRule();
	}

	//CSSRuleXorExpression:
	//	xors+=CSSRulePostfixExpression ("||" xors+=CSSRulePostfixExpression)*;
	public CSSRuleXorExpressionElements getCSSRuleXorExpressionAccess() {
		return (pCSSRuleXorExpression != null) ? pCSSRuleXorExpression : (pCSSRuleXorExpression = new CSSRuleXorExpressionElements());
	}
	
	public ParserRule getCSSRuleXorExpressionRule() {
		return getCSSRuleXorExpressionAccess().getRule();
	}

	//CSSRuleBracketExpression:
	//	"[" CSSRuleOrExpression "]";
	public CSSRuleBracketExpressionElements getCSSRuleBracketExpressionAccess() {
		return (pCSSRuleBracketExpression != null) ? pCSSRuleBracketExpression : (pCSSRuleBracketExpression = new CSSRuleBracketExpressionElements());
	}
	
	public ParserRule getCSSRuleBracketExpressionRule() {
		return getCSSRuleBracketExpressionAccess().getRule();
	}

	//CSSRulePostfixExpression:
	//	CSSRuleConcat c=("*" | "+" | "?")?;
	public CSSRulePostfixExpressionElements getCSSRulePostfixExpressionAccess() {
		return (pCSSRulePostfixExpression != null) ? pCSSRulePostfixExpression : (pCSSRulePostfixExpression = new CSSRulePostfixExpressionElements());
	}
	
	public ParserRule getCSSRulePostfixExpressionRule() {
		return getCSSRulePostfixExpressionAccess().getRule();
	}

	//CSSRuleConcat:
	//	conc+=CSSRulePrimaryExpression conc+=CSSRulePrimaryExpression?;
	public CSSRuleConcatElements getCSSRuleConcatAccess() {
		return (pCSSRuleConcat != null) ? pCSSRuleConcat : (pCSSRuleConcat = new CSSRuleConcatElements());
	}
	
	public ParserRule getCSSRuleConcatRule() {
		return getCSSRuleConcatAccess().getRule();
	}

	//CSSRuleLiteral:
	//	ID;
	public CSSRuleLiteralElements getCSSRuleLiteralAccess() {
		return (pCSSRuleLiteral != null) ? pCSSRuleLiteral : (pCSSRuleLiteral = new CSSRuleLiteralElements());
	}
	
	public ParserRule getCSSRuleLiteralRule() {
		return getCSSRuleLiteralAccess().getRule();
	}

	//CSSRulePrimaryExpression:
	//	CSSRuleRef | CSSRuleBracketExpression | CSSRuleLiteral;
	public CSSRulePrimaryExpressionElements getCSSRulePrimaryExpressionAccess() {
		return (pCSSRulePrimaryExpression != null) ? pCSSRulePrimaryExpression : (pCSSRulePrimaryExpression = new CSSRulePrimaryExpressionElements());
	}
	
	public ParserRule getCSSRulePrimaryExpressionRule() {
		return getCSSRulePrimaryExpressionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
