/*
* generated by Xtext
*/
grammar InternalDecoraDsl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package at.bestsolution.efxclipse.tooling.decora.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.bestsolution.efxclipse.tooling.decora.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.bestsolution.efxclipse.tooling.decora.services.DecoraDslGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private DecoraDslGrammarAccess grammarAccess;
 	
    public InternalDecoraDslParser(TokenStream input, DecoraDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected DecoraDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getUnitTranslation_unitParserRuleCall_0()); 
	    }
		lv_unit_0_0=ruletranslation_unit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_0_0, 
        		"translation_unit");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulefield_selection
entryRulefield_selection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getField_selectionRule()); }
	 iv_rulefield_selection=rulefield_selection 
	 { $current=$iv_rulefield_selection.current; } 
	 EOF 
;

// Rule field_selection
rulefield_selection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_r_0_0=RULE_RGBA_FIELDS
		{
			newLeafNode(lv_r_0_0, grammarAccess.getField_selectionAccess().getRRGBA_FIELDSTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getField_selectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"r",
        		lv_r_0_0, 
        		"RGBA_FIELDS");
	    }

)
)
    |(
(
		lv_x_1_0=RULE_XYZW_FIELDS
		{
			newLeafNode(lv_x_1_0, grammarAccess.getField_selectionAccess().getXXYZW_FIELDSTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getField_selectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"x",
        		lv_x_1_0, 
        		"XYZW_FIELDS");
	    }

)
))
;





// Entry rule entryRuleprimary_expression
entryRuleprimary_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimary_expressionRule()); }
	 iv_ruleprimary_expression=ruleprimary_expression 
	 { $current=$iv_ruleprimary_expression.current; } 
	 EOF 
;

// Rule primary_expression
ruleprimary_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_IDENTIFIER_0=RULE_IDENTIFIER
    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getPrimary_expressionAccess().getIDENTIFIERTerminalRuleCall_0()); 
    }

    |this_INTCONSTANT_1=RULE_INTCONSTANT
    { 
    newLeafNode(this_INTCONSTANT_1, grammarAccess.getPrimary_expressionAccess().getINTCONSTANTTerminalRuleCall_1()); 
    }

    |this_FLOATCONSTANT_2=RULE_FLOATCONSTANT
    { 
    newLeafNode(this_FLOATCONSTANT_2, grammarAccess.getPrimary_expressionAccess().getFLOATCONSTANTTerminalRuleCall_2()); 
    }

    |this_BOOLCONSTANT_3=RULE_BOOLCONSTANT
    { 
    newLeafNode(this_BOOLCONSTANT_3, grammarAccess.getPrimary_expressionAccess().getBOOLCONSTANTTerminalRuleCall_3()); 
    }

    |(this_LEFT_PAREN_4=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_4, grammarAccess.getPrimary_expressionAccess().getLEFT_PARENTerminalRuleCall_4_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimary_expressionAccess().getEExpressionParserRuleCall_4_1_0()); 
	    }
		lv_e_5_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimary_expressionRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_5_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RIGHT_PAREN_6=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_6, grammarAccess.getPrimary_expressionAccess().getRIGHT_PARENTerminalRuleCall_4_2()); 
    }
))
;





// Entry rule entryRuleprimary_or_call
entryRuleprimary_or_call returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimary_or_callRule()); }
	 iv_ruleprimary_or_call=ruleprimary_or_call 
	 { $current=$iv_ruleprimary_or_call.current; } 
	 EOF 
;

// Rule primary_or_call
ruleprimary_or_call returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimary_or_callAccess().getEPrimary_expressionParserRuleCall_0_0()); 
	    }
		lv_e_0_0=ruleprimary_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimary_or_callRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_0_0, 
        		"primary_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimary_or_callAccess().getFFunction_callParserRuleCall_1_0()); 
	    }
		lv_f_1_0=rulefunction_call		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimary_or_callRule());
	        }
       		set(
       			$current, 
       			"f",
        		lv_f_1_0, 
        		"function_call");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulepostfix_expression
entryRulepostfix_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostfix_expressionRule()); }
	 iv_rulepostfix_expression=rulepostfix_expression 
	 { $current=$iv_rulepostfix_expression.current; } 
	 EOF 
;

// Rule postfix_expression
rulepostfix_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getPostfix_expressionAccess().getEPrimary_or_callParserRuleCall_0_0_0()); 
	    }
		lv_e_0_0=ruleprimary_or_call		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfix_expressionRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_0_0, 
        		"primary_or_call");
	        afterParserOrEnumRuleCall();
	    }

)
)this_LEFT_BRACKET_1=RULE_LEFT_BRACKET
    { 
    newLeafNode(this_LEFT_BRACKET_1, grammarAccess.getPostfix_expressionAccess().getLEFT_BRACKETTerminalRuleCall_0_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfix_expressionAccess().getAeExpressionParserRuleCall_0_2_0()); 
	    }
		lv_ae_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfix_expressionRule());
	        }
       		set(
       			$current, 
       			"ae",
        		lv_ae_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RIGHT_BRACKET_3=RULE_RIGHT_BRACKET
    { 
    newLeafNode(this_RIGHT_BRACKET_3, grammarAccess.getPostfix_expressionAccess().getRIGHT_BRACKETTerminalRuleCall_0_3()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfix_expressionAccess().getFsField_selectionParserRuleCall_0_4_0()); 
	    }
		lv_fs_4_0=rulefield_selection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfix_expressionRule());
	        }
       		set(
       			$current, 
       			"fs",
        		lv_fs_4_0, 
        		"field_selection");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getPostfix_expressionAccess().getEPrimary_or_callParserRuleCall_1_0_0()); 
	    }
		lv_e_5_0=ruleprimary_or_call		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfix_expressionRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_5_0, 
        		"primary_or_call");
	        afterParserOrEnumRuleCall();
	    }

)
)this_LEFT_BRACKET_6=RULE_LEFT_BRACKET
    { 
    newLeafNode(this_LEFT_BRACKET_6, grammarAccess.getPostfix_expressionAccess().getLEFT_BRACKETTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfix_expressionAccess().getAeExpressionParserRuleCall_1_2_0()); 
	    }
		lv_ae_7_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfix_expressionRule());
	        }
       		set(
       			$current, 
       			"ae",
        		lv_ae_7_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RIGHT_BRACKET_8=RULE_RIGHT_BRACKET
    { 
    newLeafNode(this_RIGHT_BRACKET_8, grammarAccess.getPostfix_expressionAccess().getRIGHT_BRACKETTerminalRuleCall_1_3()); 
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getPostfix_expressionAccess().getEPrimary_or_callParserRuleCall_2_0_0()); 
	    }
		lv_e_9_0=ruleprimary_or_call		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfix_expressionRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_9_0, 
        		"primary_or_call");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfix_expressionAccess().getFsField_selectionParserRuleCall_2_1_0()); 
	    }
		lv_fs_10_0=rulefield_selection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfix_expressionRule());
	        }
       		set(
       			$current, 
       			"fs",
        		lv_fs_10_0, 
        		"field_selection");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getPostfix_expressionAccess().getEPrimary_or_callParserRuleCall_3_0_0()); 
	    }
		lv_e_11_0=ruleprimary_or_call		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfix_expressionRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_11_0, 
        		"primary_or_call");
	        afterParserOrEnumRuleCall();
	    }

)
)this_INC_12=RULE_INC
    { 
    newLeafNode(this_INC_12, grammarAccess.getPostfix_expressionAccess().getINCTerminalRuleCall_3_1()); 
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getPostfix_expressionAccess().getEPrimary_or_callParserRuleCall_4_0_0()); 
	    }
		lv_e_13_0=ruleprimary_or_call		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfix_expressionRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_13_0, 
        		"primary_or_call");
	        afterParserOrEnumRuleCall();
	    }

)
)this_DEC_14=RULE_DEC
    { 
    newLeafNode(this_DEC_14, grammarAccess.getPostfix_expressionAccess().getDECTerminalRuleCall_4_1()); 
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfix_expressionAccess().getEPrimary_or_callParserRuleCall_5_0()); 
	    }
		lv_e_15_0=ruleprimary_or_call		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfix_expressionRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_15_0, 
        		"primary_or_call");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulefunction_call
entryRulefunction_call returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunction_callRule()); }
	 iv_rulefunction_call=rulefunction_call 
	 { $current=$iv_rulefunction_call.current; } 
	 EOF 
;

// Rule function_call
rulefunction_call returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_id_0_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_id_0_0, grammarAccess.getFunction_callAccess().getIdIDENTIFIERTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunction_callRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"IDENTIFIER");
	    }

)
)this_LEFT_PAREN_1=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_1, grammarAccess.getFunction_callAccess().getLEFT_PARENTerminalRuleCall_0_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_callAccess().getPFunction_call_parameter_listParserRuleCall_0_2_0()); 
	    }
		lv_p_2_0=rulefunction_call_parameter_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_callRule());
	        }
       		set(
       			$current, 
       			"p",
        		lv_p_2_0, 
        		"function_call_parameter_list");
	        afterParserOrEnumRuleCall();
	    }

)
)?this_RIGHT_PAREN_3=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_3, grammarAccess.getFunction_callAccess().getRIGHT_PARENTerminalRuleCall_0_3()); 
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_callAccess().getTsType_specifierParserRuleCall_1_0_0()); 
	    }
		lv_ts_4_0=ruletype_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_callRule());
	        }
       		set(
       			$current, 
       			"ts",
        		lv_ts_4_0, 
        		"type_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
)this_LEFT_PAREN_5=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_5, grammarAccess.getFunction_callAccess().getLEFT_PARENTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_callAccess().getPFunction_call_parameter_listParserRuleCall_1_2_0()); 
	    }
		lv_p_6_0=rulefunction_call_parameter_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_callRule());
	        }
       		set(
       			$current, 
       			"p",
        		lv_p_6_0, 
        		"function_call_parameter_list");
	        afterParserOrEnumRuleCall();
	    }

)
)?this_RIGHT_PAREN_7=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_7, grammarAccess.getFunction_callAccess().getRIGHT_PARENTerminalRuleCall_1_3()); 
    }
))
;





// Entry rule entryRulefunction_call_parameter_list
entryRulefunction_call_parameter_list returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunction_call_parameter_listRule()); }
	 iv_rulefunction_call_parameter_list=rulefunction_call_parameter_list 
	 { $current=$iv_rulefunction_call_parameter_list.current; } 
	 EOF 
;

// Rule function_call_parameter_list
rulefunction_call_parameter_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_call_parameter_listAccess().getAAssignment_expressionParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleassignment_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_call_parameter_listRule());
	        }
       		add(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"assignment_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_1=RULE_COMMA
    { 
    newLeafNode(this_COMMA_1, grammarAccess.getFunction_call_parameter_listAccess().getCOMMATerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_call_parameter_listAccess().getAAssignment_expressionParserRuleCall_1_1_0()); 
	    }
		lv_a_2_0=ruleassignment_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_call_parameter_listRule());
	        }
       		add(
       			$current, 
       			"a",
        		lv_a_2_0, 
        		"assignment_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleunary_expression
entryRuleunary_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnary_expressionRule()); }
	 iv_ruleunary_expression=ruleunary_expression 
	 { $current=$iv_ruleunary_expression.current; } 
	 EOF 
;

// Rule unary_expression
ruleunary_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnary_expressionAccess().getPPostfix_expressionParserRuleCall_0_0()); 
	    }
		lv_p_0_0=rulepostfix_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnary_expressionRule());
	        }
       		set(
       			$current, 
       			"p",
        		lv_p_0_0, 
        		"postfix_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(this_INC_1=RULE_INC
    { 
    newLeafNode(this_INC_1, grammarAccess.getUnary_expressionAccess().getINCTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnary_expressionAccess().getUUnary_expressionParserRuleCall_1_1_0()); 
	    }
		lv_u_2_0=ruleunary_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnary_expressionRule());
	        }
       		set(
       			$current, 
       			"u",
        		lv_u_2_0, 
        		"unary_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(this_DEC_3=RULE_DEC
    { 
    newLeafNode(this_DEC_3, grammarAccess.getUnary_expressionAccess().getDECTerminalRuleCall_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnary_expressionAccess().getUUnary_expressionParserRuleCall_2_1_0()); 
	    }
		lv_u_4_0=ruleunary_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnary_expressionRule());
	        }
       		set(
       			$current, 
       			"u",
        		lv_u_4_0, 
        		"unary_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(this_PLUS_5=RULE_PLUS
    { 
    newLeafNode(this_PLUS_5, grammarAccess.getUnary_expressionAccess().getPLUSTerminalRuleCall_3_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnary_expressionAccess().getUUnary_expressionParserRuleCall_3_1_0()); 
	    }
		lv_u_6_0=ruleunary_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnary_expressionRule());
	        }
       		set(
       			$current, 
       			"u",
        		lv_u_6_0, 
        		"unary_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(this_DASH_7=RULE_DASH
    { 
    newLeafNode(this_DASH_7, grammarAccess.getUnary_expressionAccess().getDASHTerminalRuleCall_4_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnary_expressionAccess().getUUnary_expressionParserRuleCall_4_1_0()); 
	    }
		lv_u_8_0=ruleunary_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnary_expressionRule());
	        }
       		set(
       			$current, 
       			"u",
        		lv_u_8_0, 
        		"unary_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(this_BANG_9=RULE_BANG
    { 
    newLeafNode(this_BANG_9, grammarAccess.getUnary_expressionAccess().getBANGTerminalRuleCall_5_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnary_expressionAccess().getUUnary_expressionParserRuleCall_5_1_0()); 
	    }
		lv_u_10_0=ruleunary_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnary_expressionRule());
	        }
       		set(
       			$current, 
       			"u",
        		lv_u_10_0, 
        		"unary_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulemultiplicative_expression
entryRulemultiplicative_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicative_expressionRule()); }
	 iv_rulemultiplicative_expression=rulemultiplicative_expression 
	 { $current=$iv_rulemultiplicative_expression.current; } 
	 EOF 
;

// Rule multiplicative_expression
rulemultiplicative_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicative_expressionAccess().getAUnary_expressionParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleunary_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicative_expressionRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"unary_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((this_STAR_1=RULE_STAR
    { 
    newLeafNode(this_STAR_1, grammarAccess.getMultiplicative_expressionAccess().getSTARTerminalRuleCall_1_0_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicative_expressionAccess().getBMultiplicative_expressionParserRuleCall_1_0_1_0()); 
	    }
		lv_b_2_0=rulemultiplicative_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicative_expressionRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"multiplicative_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(this_SLASH_3=RULE_SLASH
    { 
    newLeafNode(this_SLASH_3, grammarAccess.getMultiplicative_expressionAccess().getSLASHTerminalRuleCall_1_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicative_expressionAccess().getBMultiplicative_expressionParserRuleCall_1_1_1_0()); 
	    }
		lv_b_4_0=rulemultiplicative_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicative_expressionRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_4_0, 
        		"multiplicative_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleadditive_expression
entryRuleadditive_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditive_expressionRule()); }
	 iv_ruleadditive_expression=ruleadditive_expression 
	 { $current=$iv_ruleadditive_expression.current; } 
	 EOF 
;

// Rule additive_expression
ruleadditive_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditive_expressionAccess().getAMultiplicative_expressionParserRuleCall_0_0()); 
	    }
		lv_a_0_0=rulemultiplicative_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditive_expressionRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"multiplicative_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((this_PLUS_1=RULE_PLUS
    { 
    newLeafNode(this_PLUS_1, grammarAccess.getAdditive_expressionAccess().getPLUSTerminalRuleCall_1_0_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditive_expressionAccess().getBMultiplicative_expressionParserRuleCall_1_0_1_0()); 
	    }
		lv_b_2_0=rulemultiplicative_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditive_expressionRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"multiplicative_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(this_DASH_3=RULE_DASH
    { 
    newLeafNode(this_DASH_3, grammarAccess.getAdditive_expressionAccess().getDASHTerminalRuleCall_1_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditive_expressionAccess().getBMultiplicative_expressionParserRuleCall_1_1_1_0()); 
	    }
		lv_b_4_0=rulemultiplicative_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditive_expressionRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_4_0, 
        		"multiplicative_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRulerelational_expression
entryRulerelational_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelational_expressionRule()); }
	 iv_rulerelational_expression=rulerelational_expression 
	 { $current=$iv_rulerelational_expression.current; } 
	 EOF 
;

// Rule relational_expression
rulerelational_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelational_expressionAccess().getAAdditive_expressionParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleadditive_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelational_expressionRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"additive_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((this_LTEQ_1=RULE_LTEQ
    { 
    newLeafNode(this_LTEQ_1, grammarAccess.getRelational_expressionAccess().getLTEQTerminalRuleCall_1_0_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelational_expressionAccess().getBAdditive_expressionParserRuleCall_1_0_1_0()); 
	    }
		lv_b_2_0=ruleadditive_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelational_expressionRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"additive_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(this_GTEQ_3=RULE_GTEQ
    { 
    newLeafNode(this_GTEQ_3, grammarAccess.getRelational_expressionAccess().getGTEQTerminalRuleCall_1_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelational_expressionAccess().getBAdditive_expressionParserRuleCall_1_1_1_0()); 
	    }
		lv_b_4_0=ruleadditive_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelational_expressionRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_4_0, 
        		"additive_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(this_LT_5=RULE_LT
    { 
    newLeafNode(this_LT_5, grammarAccess.getRelational_expressionAccess().getLTTerminalRuleCall_1_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelational_expressionAccess().getBAdditive_expressionParserRuleCall_1_2_1_0()); 
	    }
		lv_b_6_0=ruleadditive_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelational_expressionRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_6_0, 
        		"additive_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(this_GT_7=RULE_GT
    { 
    newLeafNode(this_GT_7, grammarAccess.getRelational_expressionAccess().getGTTerminalRuleCall_1_3_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelational_expressionAccess().getBAdditive_expressionParserRuleCall_1_3_1_0()); 
	    }
		lv_b_8_0=ruleadditive_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelational_expressionRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_8_0, 
        		"additive_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleequality_expression
entryRuleequality_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEquality_expressionRule()); }
	 iv_ruleequality_expression=ruleequality_expression 
	 { $current=$iv_ruleequality_expression.current; } 
	 EOF 
;

// Rule equality_expression
ruleequality_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEquality_expressionAccess().getARelational_expressionParserRuleCall_0_0()); 
	    }
		lv_a_0_0=rulerelational_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquality_expressionRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"relational_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((this_EQEQ_1=RULE_EQEQ
    { 
    newLeafNode(this_EQEQ_1, grammarAccess.getEquality_expressionAccess().getEQEQTerminalRuleCall_1_0_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEquality_expressionAccess().getBRelational_expressionParserRuleCall_1_0_1_0()); 
	    }
		lv_b_2_0=rulerelational_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquality_expressionRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"relational_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(this_NEQ_3=RULE_NEQ
    { 
    newLeafNode(this_NEQ_3, grammarAccess.getEquality_expressionAccess().getNEQTerminalRuleCall_1_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEquality_expressionAccess().getBRelational_expressionParserRuleCall_1_1_1_0()); 
	    }
		lv_b_4_0=rulerelational_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquality_expressionRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_4_0, 
        		"relational_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRulelogical_and_expression
entryRulelogical_and_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogical_and_expressionRule()); }
	 iv_rulelogical_and_expression=rulelogical_and_expression 
	 { $current=$iv_rulelogical_and_expression.current; } 
	 EOF 
;

// Rule logical_and_expression
rulelogical_and_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLogical_and_expressionAccess().getAEquality_expressionParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleequality_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogical_and_expressionRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"equality_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_AND_1=RULE_AND
    { 
    newLeafNode(this_AND_1, grammarAccess.getLogical_and_expressionAccess().getANDTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogical_and_expressionAccess().getBEquality_expressionParserRuleCall_1_1_0()); 
	    }
		lv_b_2_0=ruleequality_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogical_and_expressionRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"equality_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulelogical_xor_expression
entryRulelogical_xor_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogical_xor_expressionRule()); }
	 iv_rulelogical_xor_expression=rulelogical_xor_expression 
	 { $current=$iv_rulelogical_xor_expression.current; } 
	 EOF 
;

// Rule logical_xor_expression
rulelogical_xor_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLogical_xor_expressionAccess().getALogical_and_expressionParserRuleCall_0_0()); 
	    }
		lv_a_0_0=rulelogical_and_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogical_xor_expressionRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"logical_and_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_XOR_1=RULE_XOR
    { 
    newLeafNode(this_XOR_1, grammarAccess.getLogical_xor_expressionAccess().getXORTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogical_xor_expressionAccess().getBLogical_and_expressionParserRuleCall_1_1_0()); 
	    }
		lv_b_2_0=rulelogical_and_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogical_xor_expressionRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"logical_and_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulelogical_or_expression
entryRulelogical_or_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogical_or_expressionRule()); }
	 iv_rulelogical_or_expression=rulelogical_or_expression 
	 { $current=$iv_rulelogical_or_expression.current; } 
	 EOF 
;

// Rule logical_or_expression
rulelogical_or_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLogical_or_expressionAccess().getALogical_xor_expressionParserRuleCall_0_0()); 
	    }
		lv_a_0_0=rulelogical_xor_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogical_or_expressionRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"logical_xor_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_OR_1=RULE_OR
    { 
    newLeafNode(this_OR_1, grammarAccess.getLogical_or_expressionAccess().getORTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogical_or_expressionAccess().getBLogical_xor_expressionParserRuleCall_1_1_0()); 
	    }
		lv_b_2_0=rulelogical_xor_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogical_or_expressionRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"logical_xor_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleternary_part
entryRuleternary_part returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTernary_partRule()); }
	 iv_ruleternary_part=ruleternary_part 
	 { $current=$iv_ruleternary_part.current; } 
	 EOF 
;

// Rule ternary_part
ruleternary_part returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_QUESTION_0=RULE_QUESTION
    { 
    newLeafNode(this_QUESTION_0, grammarAccess.getTernary_partAccess().getQUESTIONTerminalRuleCall_0()); 
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTernary_partAccess().getExpressionParserRuleCall_1()); 
    }
    this_expression_1=ruleexpression
    { 
        $current = $this_expression_1.current; 
        afterParserOrEnumRuleCall();
    }
this_COLON_2=RULE_COLON
    { 
    newLeafNode(this_COLON_2, grammarAccess.getTernary_partAccess().getCOLONTerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTernary_partAccess().getAAssignment_expressionParserRuleCall_3_0()); 
	    }
		lv_a_3_0=ruleassignment_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTernary_partRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_3_0, 
        		"assignment_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleconditional_expression
entryRuleconditional_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditional_expressionRule()); }
	 iv_ruleconditional_expression=ruleconditional_expression 
	 { $current=$iv_ruleconditional_expression.current; } 
	 EOF 
;

// Rule conditional_expression
ruleconditional_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditional_expressionAccess().getALogical_or_expressionParserRuleCall_0_0()); 
	    }
		lv_a_0_0=rulelogical_or_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditional_expressionRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"logical_or_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditional_expressionAccess().getTTernary_partParserRuleCall_1_0()); 
	    }
		lv_t_1_0=ruleternary_part		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditional_expressionRule());
	        }
       		set(
       			$current, 
       			"t",
        		lv_t_1_0, 
        		"ternary_part");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleassignment_expression
entryRuleassignment_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignment_expressionRule()); }
	 iv_ruleassignment_expression=ruleassignment_expression 
	 { $current=$iv_ruleassignment_expression.current; } 
	 EOF 
;

// Rule assignment_expression
ruleassignment_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignment_expressionAccess().getAUnary_expressionParserRuleCall_0_0_0()); 
	    }
		lv_a_0_0=ruleunary_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignment_expressionRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"unary_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignment_expressionAccess().getOpAssignment_operatorParserRuleCall_0_1_0()); 
	    }
		lv_op_1_0=ruleassignment_operator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignment_expressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"assignment_operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignment_expressionAccess().getBAssignment_expressionParserRuleCall_0_2_0()); 
	    }
		lv_b_2_0=ruleassignment_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignment_expressionRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"assignment_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignment_expressionAccess().getCConditional_expressionParserRuleCall_1_0()); 
	    }
		lv_c_3_0=ruleconditional_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignment_expressionRule());
	        }
       		set(
       			$current, 
       			"c",
        		lv_c_3_0, 
        		"conditional_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleassignment_operator
entryRuleassignment_operator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignment_operatorRule()); } 
	 iv_ruleassignment_operator=ruleassignment_operator 
	 { $current=$iv_ruleassignment_operator.current.getText(); }  
	 EOF 
;

// Rule assignment_operator
ruleassignment_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_EQUAL_0=RULE_EQUAL    {
		$current.merge(this_EQUAL_0);
    }

    { 
    newLeafNode(this_EQUAL_0, grammarAccess.getAssignment_operatorAccess().getEQUALTerminalRuleCall_0()); 
    }

    |    this_STAREQ_1=RULE_STAREQ    {
		$current.merge(this_STAREQ_1);
    }

    { 
    newLeafNode(this_STAREQ_1, grammarAccess.getAssignment_operatorAccess().getSTAREQTerminalRuleCall_1()); 
    }

    |    this_SLASHEQ_2=RULE_SLASHEQ    {
		$current.merge(this_SLASHEQ_2);
    }

    { 
    newLeafNode(this_SLASHEQ_2, grammarAccess.getAssignment_operatorAccess().getSLASHEQTerminalRuleCall_2()); 
    }

    |    this_PLUSEQ_3=RULE_PLUSEQ    {
		$current.merge(this_PLUSEQ_3);
    }

    { 
    newLeafNode(this_PLUSEQ_3, grammarAccess.getAssignment_operatorAccess().getPLUSEQTerminalRuleCall_3()); 
    }

    |    this_DASHEQ_4=RULE_DASHEQ    {
		$current.merge(this_DASHEQ_4);
    }

    { 
    newLeafNode(this_DASHEQ_4, grammarAccess.getAssignment_operatorAccess().getDASHEQTerminalRuleCall_4()); 
    }
)
    ;





// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current; } 
	 EOF 
;

// Rule expression
ruleexpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getEAssignment_expressionParserRuleCall_0()); 
	    }
		lv_e_0_0=ruleassignment_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_0_0, 
        		"assignment_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulefunction_prototype
entryRulefunction_prototype returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunction_prototypeRule()); }
	 iv_rulefunction_prototype=rulefunction_prototype 
	 { $current=$iv_rulefunction_prototype.current; } 
	 EOF 
;

// Rule function_prototype
rulefunction_prototype returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_prototypeAccess().getTType_specifierParserRuleCall_0_0()); 
	    }
		lv_t_0_0=ruletype_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_prototypeRule());
	        }
       		set(
       			$current, 
       			"t",
        		lv_t_0_0, 
        		"type_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_id_1_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_id_1_0, grammarAccess.getFunction_prototypeAccess().getIdIDENTIFIERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunction_prototypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"IDENTIFIER");
	    }

)
)this_LEFT_PAREN_2=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_2, grammarAccess.getFunction_prototypeAccess().getLEFT_PARENTerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_prototypeAccess().getPParameter_declaration_listParserRuleCall_3_0()); 
	    }
		lv_p_3_0=ruleparameter_declaration_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_prototypeRule());
	        }
       		set(
       			$current, 
       			"p",
        		lv_p_3_0, 
        		"parameter_declaration_list");
	        afterParserOrEnumRuleCall();
	    }

)
)?this_RIGHT_PAREN_4=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_4, grammarAccess.getFunction_prototypeAccess().getRIGHT_PARENTerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRuleparameter_declaration
entryRuleparameter_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameter_declarationRule()); }
	 iv_ruleparameter_declaration=ruleparameter_declaration 
	 { $current=$iv_ruleparameter_declaration.current; } 
	 EOF 
;

// Rule parameter_declaration
ruleparameter_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameter_declarationAccess().getTType_specifierParserRuleCall_0_0()); 
	    }
		lv_t_0_0=ruletype_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameter_declarationRule());
	        }
       		set(
       			$current, 
       			"t",
        		lv_t_0_0, 
        		"type_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_id_1_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_id_1_0, grammarAccess.getParameter_declarationAccess().getIdIDENTIFIERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameter_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"IDENTIFIER");
	    }

)
))
;





// Entry rule entryRuleparameter_declaration_list
entryRuleparameter_declaration_list returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameter_declaration_listRule()); }
	 iv_ruleparameter_declaration_list=ruleparameter_declaration_list 
	 { $current=$iv_ruleparameter_declaration_list.current; } 
	 EOF 
;

// Rule parameter_declaration_list
ruleparameter_declaration_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameter_declaration_listAccess().getPParameter_declarationParserRuleCall_0_0()); 
	    }
		lv_p_0_0=ruleparameter_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameter_declaration_listRule());
	        }
       		add(
       			$current, 
       			"p",
        		lv_p_0_0, 
        		"parameter_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_1=RULE_COMMA
    { 
    newLeafNode(this_COMMA_1, grammarAccess.getParameter_declaration_listAccess().getCOMMATerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameter_declaration_listAccess().getPParameter_declarationParserRuleCall_1_1_0()); 
	    }
		lv_p_2_0=ruleparameter_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameter_declaration_listRule());
	        }
       		add(
       			$current, 
       			"p",
        		lv_p_2_0, 
        		"parameter_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuledeclaration_identifier_and_init
entryRuledeclaration_identifier_and_init returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaration_identifier_and_initRule()); }
	 iv_ruledeclaration_identifier_and_init=ruledeclaration_identifier_and_init 
	 { $current=$iv_ruledeclaration_identifier_and_init.current; } 
	 EOF 
;

// Rule declaration_identifier_and_init
ruledeclaration_identifier_and_init returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_id_0_0, grammarAccess.getDeclaration_identifier_and_initAccess().getIdIDENTIFIERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclaration_identifier_and_initRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"IDENTIFIER");
	    }

)
)(this_LEFT_BRACKET_1=RULE_LEFT_BRACKET
    { 
    newLeafNode(this_LEFT_BRACKET_1, grammarAccess.getDeclaration_identifier_and_initAccess().getLEFT_BRACKETTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaration_identifier_and_initAccess().getAeConstant_expressionParserRuleCall_1_1_0()); 
	    }
		lv_ae_2_0=ruleconstant_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaration_identifier_and_initRule());
	        }
       		set(
       			$current, 
       			"ae",
        		lv_ae_2_0, 
        		"constant_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RIGHT_BRACKET_3=RULE_RIGHT_BRACKET
    { 
    newLeafNode(this_RIGHT_BRACKET_3, grammarAccess.getDeclaration_identifier_and_initAccess().getRIGHT_BRACKETTerminalRuleCall_1_2()); 
    }
)?(this_EQUAL_4=RULE_EQUAL
    { 
    newLeafNode(this_EQUAL_4, grammarAccess.getDeclaration_identifier_and_initAccess().getEQUALTerminalRuleCall_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaration_identifier_and_initAccess().getEInitializerParserRuleCall_2_1_0()); 
	    }
		lv_e_5_0=ruleinitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaration_identifier_and_initRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_5_0, 
        		"initializer");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulesingle_declaration
entryRulesingle_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingle_declarationRule()); }
	 iv_rulesingle_declaration=rulesingle_declaration 
	 { $current=$iv_rulesingle_declaration.current; } 
	 EOF 
;

// Rule single_declaration
rulesingle_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSingle_declarationAccess().getTFully_specified_typeParserRuleCall_0_0()); 
	    }
		lv_t_0_0=rulefully_specified_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingle_declarationRule());
	        }
       		set(
       			$current, 
       			"t",
        		lv_t_0_0, 
        		"fully_specified_type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSingle_declarationAccess().getDDeclaration_identifier_and_initParserRuleCall_1_0()); 
	    }
		lv_d_1_0=ruledeclaration_identifier_and_init		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingle_declarationRule());
	        }
       		set(
       			$current, 
       			"d",
        		lv_d_1_0, 
        		"declaration_identifier_and_init");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuledeclaration
entryRuledeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruledeclaration=ruledeclaration 
	 { $current=$iv_ruledeclaration.current; } 
	 EOF 
;

// Rule declaration
ruledeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getSSingle_declarationParserRuleCall_0_0()); 
	    }
		lv_s_0_0=rulesingle_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"s",
        		lv_s_0_0, 
        		"single_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_1=RULE_COMMA
    { 
    newLeafNode(this_COMMA_1, grammarAccess.getDeclarationAccess().getCOMMATerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getDDeclaration_identifier_and_initParserRuleCall_1_1_0()); 
	    }
		lv_d_2_0=ruledeclaration_identifier_and_init		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		add(
       			$current, 
       			"d",
        		lv_d_2_0, 
        		"declaration_identifier_and_init");
	        afterParserOrEnumRuleCall();
	    }

)
))*this_SEMICOLON_3=RULE_SEMICOLON
    { 
    newLeafNode(this_SEMICOLON_3, grammarAccess.getDeclarationAccess().getSEMICOLONTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRulefully_specified_type
entryRulefully_specified_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFully_specified_typeRule()); }
	 iv_rulefully_specified_type=rulefully_specified_type 
	 { $current=$iv_rulefully_specified_type.current; } 
	 EOF 
;

// Rule fully_specified_type
rulefully_specified_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getFully_specified_typeAccess().getTqType_qualifierParserRuleCall_0_0_0()); 
	    }
		lv_tq_0_0=ruletype_qualifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFully_specified_typeRule());
	        }
       		set(
       			$current, 
       			"tq",
        		lv_tq_0_0, 
        		"type_qualifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFully_specified_typeAccess().getTpType_precisionParserRuleCall_0_1_0()); 
	    }
		lv_tp_1_0=ruletype_precision		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFully_specified_typeRule());
	        }
       		set(
       			$current, 
       			"tp",
        		lv_tp_1_0, 
        		"type_precision");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFully_specified_typeAccess().getTsType_specifierParserRuleCall_0_2_0()); 
	    }
		lv_ts_2_0=ruletype_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFully_specified_typeRule());
	        }
       		set(
       			$current, 
       			"ts",
        		lv_ts_2_0, 
        		"type_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getFully_specified_typeAccess().getTqType_qualifierParserRuleCall_1_0_0()); 
	    }
		lv_tq_3_0=ruletype_qualifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFully_specified_typeRule());
	        }
       		set(
       			$current, 
       			"tq",
        		lv_tq_3_0, 
        		"type_qualifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFully_specified_typeAccess().getTsType_specifierParserRuleCall_1_1_0()); 
	    }
		lv_ts_4_0=ruletype_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFully_specified_typeRule());
	        }
       		set(
       			$current, 
       			"ts",
        		lv_ts_4_0, 
        		"type_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getFully_specified_typeAccess().getTpType_precisionParserRuleCall_2_0_0()); 
	    }
		lv_tp_5_0=ruletype_precision		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFully_specified_typeRule());
	        }
       		set(
       			$current, 
       			"tp",
        		lv_tp_5_0, 
        		"type_precision");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFully_specified_typeAccess().getTsType_specifierParserRuleCall_2_1_0()); 
	    }
		lv_ts_6_0=ruletype_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFully_specified_typeRule());
	        }
       		set(
       			$current, 
       			"ts",
        		lv_ts_6_0, 
        		"type_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFully_specified_typeAccess().getTsType_specifierParserRuleCall_3_0()); 
	    }
		lv_ts_7_0=ruletype_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFully_specified_typeRule());
	        }
       		set(
       			$current, 
       			"ts",
        		lv_ts_7_0, 
        		"type_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuletype_qualifier
entryRuletype_qualifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_qualifierRule()); } 
	 iv_ruletype_qualifier=ruletype_qualifier 
	 { $current=$iv_ruletype_qualifier.current.getText(); }  
	 EOF 
;

// Rule type_qualifier
ruletype_qualifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='const' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_qualifierAccess().getConstKeyword_0()); 
    }

    |
	kw='param' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_qualifierAccess().getParamKeyword_1()); 
    }
)
    ;





// Entry rule entryRuletype_precision
entryRuletype_precision returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_precisionRule()); } 
	 iv_ruletype_precision=ruletype_precision 
	 { $current=$iv_ruletype_precision.current.getText(); }  
	 EOF 
;

// Rule type_precision
ruletype_precision returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='lowp' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_precisionAccess().getLowpKeyword_0()); 
    }

    |
	kw='mediump' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_precisionAccess().getMediumpKeyword_1()); 
    }

    |
	kw='highp' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_precisionAccess().getHighpKeyword_2()); 
    }
)
    ;





// Entry rule entryRuletype_specifier
entryRuletype_specifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_specifierRule()); }
	 iv_ruletype_specifier=ruletype_specifier 
	 { $current=$iv_ruletype_specifier.current; } 
	 EOF 
;

// Rule type_specifier
ruletype_specifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getType_specifierAccess().getType_specifierAction_0(),
            $current);
    }
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getType_specifierAccess().getType_specifier_nonarrayParserRuleCall_1()); 
    }
ruletype_specifier_nonarray
    { 
        afterParserOrEnumRuleCall();
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getType_specifierAccess().getArray_bracketsParserRuleCall_2()); 
    }
    this_array_brackets_2=rulearray_brackets
    { 
        $current = $this_array_brackets_2.current; 
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRulearray_brackets
entryRulearray_brackets returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArray_bracketsRule()); }
	 iv_rulearray_brackets=rulearray_brackets 
	 { $current=$iv_rulearray_brackets.current; } 
	 EOF 
;

// Rule array_brackets
rulearray_brackets returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LEFT_BRACKET_0=RULE_LEFT_BRACKET
    { 
    newLeafNode(this_LEFT_BRACKET_0, grammarAccess.getArray_bracketsAccess().getLEFT_BRACKETTerminalRuleCall_0()); 
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArray_bracketsAccess().getConstant_expressionParserRuleCall_1()); 
    }
    this_constant_expression_1=ruleconstant_expression
    { 
        $current = $this_constant_expression_1.current; 
        afterParserOrEnumRuleCall();
    }
this_RIGHT_BRACKET_2=RULE_RIGHT_BRACKET
    { 
    newLeafNode(this_RIGHT_BRACKET_2, grammarAccess.getArray_bracketsAccess().getRIGHT_BRACKETTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuletype_specifier_nonarray
entryRuletype_specifier_nonarray returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_specifier_nonarrayRule()); } 
	 iv_ruletype_specifier_nonarray=ruletype_specifier_nonarray 
	 { $current=$iv_ruletype_specifier_nonarray.current.getText(); }  
	 EOF 
;

// Rule type_specifier_nonarray
ruletype_specifier_nonarray returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_TYPE_0=RULE_TYPE    {
		$current.merge(this_TYPE_0);
    }

    { 
    newLeafNode(this_TYPE_0, grammarAccess.getType_specifier_nonarrayAccess().getTYPETerminalRuleCall_0()); 
    }

    |    this_VOID_1=RULE_VOID    {
		$current.merge(this_VOID_1);
    }

    { 
    newLeafNode(this_VOID_1, grammarAccess.getType_specifier_nonarrayAccess().getVOIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleinitializer
entryRuleinitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitializerRule()); }
	 iv_ruleinitializer=ruleinitializer 
	 { $current=$iv_ruleinitializer.current; } 
	 EOF 
;

// Rule initializer
ruleinitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitializerAccess().getEAssignment_expressionParserRuleCall_0()); 
	    }
		lv_e_0_0=ruleassignment_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitializerRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_0_0, 
        		"assignment_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuledeclaration_statement
entryRuledeclaration_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaration_statementRule()); }
	 iv_ruledeclaration_statement=ruledeclaration_statement 
	 { $current=$iv_ruledeclaration_statement.current; } 
	 EOF 
;

// Rule declaration_statement
ruledeclaration_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaration_statementAccess().getDDeclarationParserRuleCall_0()); 
	    }
		lv_d_0_0=ruledeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaration_statementRule());
	        }
       		set(
       			$current, 
       			"d",
        		lv_d_0_0, 
        		"declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current; } 
	 EOF 
;

// Rule statement
rulestatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getCCompound_statementParserRuleCall_0_0()); 
	    }
		lv_c_0_0=rulecompound_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"c",
        		lv_c_0_0, 
        		"compound_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getSSimple_statementParserRuleCall_1_0()); 
	    }
		lv_s_1_0=rulesimple_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"s",
        		lv_s_1_0, 
        		"simple_statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulesimple_statement
entryRulesimple_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_statementRule()); }
	 iv_rulesimple_statement=rulesimple_statement 
	 { $current=$iv_rulesimple_statement.current; } 
	 EOF 
;

// Rule simple_statement
rulesimple_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_statementAccess().getDDeclaration_statementParserRuleCall_0_0()); 
	    }
		lv_d_0_0=ruledeclaration_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_statementRule());
	        }
       		set(
       			$current, 
       			"d",
        		lv_d_0_0, 
        		"declaration_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_statementAccess().getEExpression_statementParserRuleCall_1_0()); 
	    }
		lv_e_1_0=ruleexpression_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_statementRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_1_0, 
        		"expression_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_statementAccess().getSSelection_statementParserRuleCall_2_0()); 
	    }
		lv_s_2_0=ruleselection_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_statementRule());
	        }
       		set(
       			$current, 
       			"s",
        		lv_s_2_0, 
        		"selection_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_statementAccess().getIIteration_statementParserRuleCall_3_0()); 
	    }
		lv_i_3_0=ruleiteration_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_statementRule());
	        }
       		set(
       			$current, 
       			"i",
        		lv_i_3_0, 
        		"iteration_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_statementAccess().getJJump_statementParserRuleCall_4_0()); 
	    }
		lv_j_4_0=rulejump_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_statementRule());
	        }
       		set(
       			$current, 
       			"j",
        		lv_j_4_0, 
        		"jump_statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulecompound_statement
entryRulecompound_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompound_statementRule()); }
	 iv_rulecompound_statement=rulecompound_statement 
	 { $current=$iv_rulecompound_statement.current; } 
	 EOF 
;

// Rule compound_statement
rulecompound_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCompound_statementAccess().getCompound_statementAction_0(),
            $current);
    }
)this_LEFT_BRACE_1=RULE_LEFT_BRACE
    { 
    newLeafNode(this_LEFT_BRACE_1, grammarAccess.getCompound_statementAccess().getLEFT_BRACETerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompound_statementAccess().getSStatementParserRuleCall_2_0()); 
	    }
		lv_s_2_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompound_statementRule());
	        }
       		add(
       			$current, 
       			"s",
        		lv_s_2_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_RIGHT_BRACE_3=RULE_RIGHT_BRACE
    { 
    newLeafNode(this_RIGHT_BRACE_3, grammarAccess.getCompound_statementAccess().getRIGHT_BRACETerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRulestatement_no_new_scope
entryRulestatement_no_new_scope returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_no_new_scopeRule()); }
	 iv_rulestatement_no_new_scope=rulestatement_no_new_scope 
	 { $current=$iv_rulestatement_no_new_scope.current; } 
	 EOF 
;

// Rule statement_no_new_scope
rulestatement_no_new_scope returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_no_new_scopeAccess().getCCompound_statement_no_new_scopeParserRuleCall_0_0()); 
	    }
		lv_c_0_0=rulecompound_statement_no_new_scope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_no_new_scopeRule());
	        }
       		set(
       			$current, 
       			"c",
        		lv_c_0_0, 
        		"compound_statement_no_new_scope");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_no_new_scopeAccess().getSSimple_statementParserRuleCall_1_0()); 
	    }
		lv_s_1_0=rulesimple_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_no_new_scopeRule());
	        }
       		set(
       			$current, 
       			"s",
        		lv_s_1_0, 
        		"simple_statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulecompound_statement_no_new_scope
entryRulecompound_statement_no_new_scope returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompound_statement_no_new_scopeRule()); }
	 iv_rulecompound_statement_no_new_scope=rulecompound_statement_no_new_scope 
	 { $current=$iv_rulecompound_statement_no_new_scope.current; } 
	 EOF 
;

// Rule compound_statement_no_new_scope
rulecompound_statement_no_new_scope returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCompound_statement_no_new_scopeAccess().getCompound_statement_no_new_scopeAction_0(),
            $current);
    }
)this_LEFT_BRACE_1=RULE_LEFT_BRACE
    { 
    newLeafNode(this_LEFT_BRACE_1, grammarAccess.getCompound_statement_no_new_scopeAccess().getLEFT_BRACETerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompound_statement_no_new_scopeAccess().getSStatementParserRuleCall_2_0()); 
	    }
		lv_s_2_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompound_statement_no_new_scopeRule());
	        }
       		add(
       			$current, 
       			"s",
        		lv_s_2_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_RIGHT_BRACE_3=RULE_RIGHT_BRACE
    { 
    newLeafNode(this_RIGHT_BRACE_3, grammarAccess.getCompound_statement_no_new_scopeAccess().getRIGHT_BRACETerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleexpression_statement
entryRuleexpression_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_statementRule()); }
	 iv_ruleexpression_statement=ruleexpression_statement 
	 { $current=$iv_ruleexpression_statement.current; } 
	 EOF 
;

// Rule expression_statement
ruleexpression_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_statementAccess().getExpression_statementAction_0_0(),
            $current);
    }
)this_SEMICOLON_1=RULE_SEMICOLON
    { 
    newLeafNode(this_SEMICOLON_1, grammarAccess.getExpression_statementAccess().getSEMICOLONTerminalRuleCall_0_1()); 
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_statementAccess().getEExpressionParserRuleCall_1_0_0()); 
	    }
		lv_e_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_statementRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_SEMICOLON_3=RULE_SEMICOLON
    { 
    newLeafNode(this_SEMICOLON_3, grammarAccess.getExpression_statementAccess().getSEMICOLONTerminalRuleCall_1_1()); 
    }
))
;





// Entry rule entryRuleconstant_expression
entryRuleconstant_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstant_expressionRule()); }
	 iv_ruleconstant_expression=ruleconstant_expression 
	 { $current=$iv_ruleconstant_expression.current; } 
	 EOF 
;

// Rule constant_expression
ruleconstant_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstant_expressionAccess().getCConditional_expressionParserRuleCall_0()); 
	    }
		lv_c_0_0=ruleconditional_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstant_expressionRule());
	        }
       		set(
       			$current, 
       			"c",
        		lv_c_0_0, 
        		"conditional_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleselection_statement
entryRuleselection_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelection_statementRule()); }
	 iv_ruleselection_statement=ruleselection_statement 
	 { $current=$iv_ruleselection_statement.current; } 
	 EOF 
;

// Rule selection_statement
ruleselection_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_IF_0=RULE_IF
    { 
    newLeafNode(this_IF_0, grammarAccess.getSelection_statementAccess().getIFTerminalRuleCall_0()); 
    }
this_LEFT_PAREN_1=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_1, grammarAccess.getSelection_statementAccess().getLEFT_PARENTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelection_statementAccess().getEExpressionParserRuleCall_2_0()); 
	    }
		lv_e_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelection_statementRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RIGHT_PAREN_3=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_3, grammarAccess.getSelection_statementAccess().getRIGHT_PARENTerminalRuleCall_3()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelection_statementAccess().getAStatementParserRuleCall_4_0()); 
	    }
		lv_a_4_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelection_statementRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_4_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_ELSE_5=RULE_ELSE
    { 
    newLeafNode(this_ELSE_5, grammarAccess.getSelection_statementAccess().getELSETerminalRuleCall_5_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelection_statementAccess().getBStatementParserRuleCall_5_1_0()); 
	    }
		lv_b_6_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelection_statementRule());
	        }
       		set(
       			$current, 
       			"b",
        		lv_b_6_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulecondition
entryRulecondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_rulecondition=rulecondition 
	 { $current=$iv_rulecondition.current; } 
	 EOF 
;

// Rule condition
rulecondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getEExpressionParserRuleCall_0()); 
	    }
		lv_e_0_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_0_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleiteration_statement
entryRuleiteration_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIteration_statementRule()); }
	 iv_ruleiteration_statement=ruleiteration_statement 
	 { $current=$iv_ruleiteration_statement.current; } 
	 EOF 
;

// Rule iteration_statement
ruleiteration_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_WHILE_0=RULE_WHILE
    { 
    newLeafNode(this_WHILE_0, grammarAccess.getIteration_statementAccess().getWHILETerminalRuleCall_0_0()); 
    }
this_LEFT_PAREN_1=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_1, grammarAccess.getIteration_statementAccess().getLEFT_PARENTerminalRuleCall_0_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIteration_statementAccess().getCConditionParserRuleCall_0_2_0()); 
	    }
		lv_c_2_0=rulecondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIteration_statementRule());
	        }
       		set(
       			$current, 
       			"c",
        		lv_c_2_0, 
        		"condition");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RIGHT_PAREN_3=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_3, grammarAccess.getIteration_statementAccess().getRIGHT_PARENTerminalRuleCall_0_3()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIteration_statementAccess().getSnnsStatement_no_new_scopeParserRuleCall_0_4_0()); 
	    }
		lv_snns_4_0=rulestatement_no_new_scope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIteration_statementRule());
	        }
       		set(
       			$current, 
       			"snns",
        		lv_snns_4_0, 
        		"statement_no_new_scope");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(this_DO_5=RULE_DO
    { 
    newLeafNode(this_DO_5, grammarAccess.getIteration_statementAccess().getDOTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIteration_statementAccess().getSStatementParserRuleCall_1_1_0()); 
	    }
		lv_s_6_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIteration_statementRule());
	        }
       		set(
       			$current, 
       			"s",
        		lv_s_6_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)this_WHILE_7=RULE_WHILE
    { 
    newLeafNode(this_WHILE_7, grammarAccess.getIteration_statementAccess().getWHILETerminalRuleCall_1_2()); 
    }
this_LEFT_PAREN_8=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_8, grammarAccess.getIteration_statementAccess().getLEFT_PARENTerminalRuleCall_1_3()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIteration_statementAccess().getEExpressionParserRuleCall_1_4_0()); 
	    }
		lv_e_9_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIteration_statementRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_9_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RIGHT_PAREN_10=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_10, grammarAccess.getIteration_statementAccess().getRIGHT_PARENTerminalRuleCall_1_5()); 
    }
this_SEMICOLON_11=RULE_SEMICOLON
    { 
    newLeafNode(this_SEMICOLON_11, grammarAccess.getIteration_statementAccess().getSEMICOLONTerminalRuleCall_1_6()); 
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getIteration_statementAccess().getUUnroll_modifierParserRuleCall_2_0_0()); 
	    }
		lv_u_12_0=ruleunroll_modifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIteration_statementRule());
	        }
       		set(
       			$current, 
       			"u",
        		lv_u_12_0, 
        		"unroll_modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)this_FOR_13=RULE_FOR
    { 
    newLeafNode(this_FOR_13, grammarAccess.getIteration_statementAccess().getFORTerminalRuleCall_2_1()); 
    }
this_LEFT_PAREN_14=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_14, grammarAccess.getIteration_statementAccess().getLEFT_PARENTerminalRuleCall_2_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIteration_statementAccess().getInitFor_init_statementParserRuleCall_2_3_0()); 
	    }
		lv_init_15_0=rulefor_init_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIteration_statementRule());
	        }
       		set(
       			$current, 
       			"init",
        		lv_init_15_0, 
        		"for_init_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIteration_statementAccess().getRemFor_rest_statementParserRuleCall_2_4_0()); 
	    }
		lv_rem_16_0=rulefor_rest_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIteration_statementRule());
	        }
       		set(
       			$current, 
       			"rem",
        		lv_rem_16_0, 
        		"for_rest_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RIGHT_PAREN_17=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_17, grammarAccess.getIteration_statementAccess().getRIGHT_PARENTerminalRuleCall_2_5()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIteration_statementAccess().getSnnsStatement_no_new_scopeParserRuleCall_2_6_0()); 
	    }
		lv_snns_18_0=rulestatement_no_new_scope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIteration_statementRule());
	        }
       		set(
       			$current, 
       			"snns",
        		lv_snns_18_0, 
        		"statement_no_new_scope");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(this_FOR_19=RULE_FOR
    { 
    newLeafNode(this_FOR_19, grammarAccess.getIteration_statementAccess().getFORTerminalRuleCall_3_0()); 
    }
this_LEFT_PAREN_20=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_20, grammarAccess.getIteration_statementAccess().getLEFT_PARENTerminalRuleCall_3_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIteration_statementAccess().getInitFor_init_statementParserRuleCall_3_2_0()); 
	    }
		lv_init_21_0=rulefor_init_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIteration_statementRule());
	        }
       		set(
       			$current, 
       			"init",
        		lv_init_21_0, 
        		"for_init_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIteration_statementAccess().getRemFor_rest_statementParserRuleCall_3_3_0()); 
	    }
		lv_rem_22_0=rulefor_rest_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIteration_statementRule());
	        }
       		set(
       			$current, 
       			"rem",
        		lv_rem_22_0, 
        		"for_rest_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RIGHT_PAREN_23=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_23, grammarAccess.getIteration_statementAccess().getRIGHT_PARENTerminalRuleCall_3_4()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIteration_statementAccess().getSnnsStatement_no_new_scopeParserRuleCall_3_5_0()); 
	    }
		lv_snns_24_0=rulestatement_no_new_scope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIteration_statementRule());
	        }
       		set(
       			$current, 
       			"snns",
        		lv_snns_24_0, 
        		"statement_no_new_scope");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleunroll_modifier
entryRuleunroll_modifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnroll_modifierRule()); }
	 iv_ruleunroll_modifier=ruleunroll_modifier 
	 { $current=$iv_ruleunroll_modifier.current; } 
	 EOF 
;

// Rule unroll_modifier
ruleunroll_modifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_UNROLL_0=RULE_UNROLL
    { 
    newLeafNode(this_UNROLL_0, grammarAccess.getUnroll_modifierAccess().getUNROLLTerminalRuleCall_0()); 
    }
this_LEFT_PAREN_1=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_1, grammarAccess.getUnroll_modifierAccess().getLEFT_PARENTerminalRuleCall_1()); 
    }
(
(
		lv_m_2_0=RULE_INTCONSTANT
		{
			newLeafNode(lv_m_2_0, grammarAccess.getUnroll_modifierAccess().getMINTCONSTANTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnroll_modifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"m",
        		lv_m_2_0, 
        		"INTCONSTANT");
	    }

)
)this_COMMA_3=RULE_COMMA
    { 
    newLeafNode(this_COMMA_3, grammarAccess.getUnroll_modifierAccess().getCOMMATerminalRuleCall_3()); 
    }
(
(
		lv_c_4_0=RULE_INTCONSTANT
		{
			newLeafNode(lv_c_4_0, grammarAccess.getUnroll_modifierAccess().getCINTCONSTANTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnroll_modifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"c",
        		lv_c_4_0, 
        		"INTCONSTANT");
	    }

)
)this_RIGHT_PAREN_5=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_5, grammarAccess.getUnroll_modifierAccess().getRIGHT_PARENTerminalRuleCall_5()); 
    }
)
;





// Entry rule entryRulefor_init_statement
entryRulefor_init_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFor_init_statementRule()); }
	 iv_rulefor_init_statement=rulefor_init_statement 
	 { $current=$iv_rulefor_init_statement.current; } 
	 EOF 
;

// Rule for_init_statement
rulefor_init_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFor_init_statementAccess().getEExpression_statementParserRuleCall_0_0()); 
	    }
		lv_e_0_0=ruleexpression_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_init_statementRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_0_0, 
        		"expression_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_init_statementAccess().getDDeclaration_statementParserRuleCall_1_0()); 
	    }
		lv_d_1_0=ruledeclaration_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_init_statementRule());
	        }
       		set(
       			$current, 
       			"d",
        		lv_d_1_0, 
        		"declaration_statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulefor_rest_statement
entryRulefor_rest_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFor_rest_statementRule()); }
	 iv_rulefor_rest_statement=rulefor_rest_statement 
	 { $current=$iv_rulefor_rest_statement.current; } 
	 EOF 
;

// Rule for_rest_statement
rulefor_rest_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFor_rest_statementAccess().getFor_rest_statementAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_rest_statementAccess().getCConditionParserRuleCall_0_1_0()); 
	    }
		lv_c_1_0=rulecondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_rest_statementRule());
	        }
       		set(
       			$current, 
       			"c",
        		lv_c_1_0, 
        		"condition");
	        afterParserOrEnumRuleCall();
	    }

)
)this_SEMICOLON_2=RULE_SEMICOLON
    { 
    newLeafNode(this_SEMICOLON_2, grammarAccess.getFor_rest_statementAccess().getSEMICOLONTerminalRuleCall_0_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_rest_statementAccess().getEExpressionParserRuleCall_0_3_0()); 
	    }
		lv_e_3_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_rest_statementRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_3_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFor_rest_statementAccess().getFor_rest_statementAction_1_0(),
            $current);
    }
)this_SEMICOLON_5=RULE_SEMICOLON
    { 
    newLeafNode(this_SEMICOLON_5, grammarAccess.getFor_rest_statementAccess().getSEMICOLONTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_rest_statementAccess().getEExpressionParserRuleCall_1_2_0()); 
	    }
		lv_e_6_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_rest_statementRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_6_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?))
;





// Entry rule entryRulejump_statement
entryRulejump_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJump_statementRule()); }
	 iv_rulejump_statement=rulejump_statement 
	 { $current=$iv_rulejump_statement.current; } 
	 EOF 
;

// Rule jump_statement
rulejump_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getJump_statementAccess().getJump_statementAction_0_0(),
            $current);
    }
)this_CONTINUE_1=RULE_CONTINUE
    { 
    newLeafNode(this_CONTINUE_1, grammarAccess.getJump_statementAccess().getCONTINUETerminalRuleCall_0_1()); 
    }
this_SEMICOLON_2=RULE_SEMICOLON
    { 
    newLeafNode(this_SEMICOLON_2, grammarAccess.getJump_statementAccess().getSEMICOLONTerminalRuleCall_0_2()); 
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getJump_statementAccess().getJump_statementAction_1_0(),
            $current);
    }
)this_BREAK_4=RULE_BREAK
    { 
    newLeafNode(this_BREAK_4, grammarAccess.getJump_statementAccess().getBREAKTerminalRuleCall_1_1()); 
    }
this_SEMICOLON_5=RULE_SEMICOLON
    { 
    newLeafNode(this_SEMICOLON_5, grammarAccess.getJump_statementAccess().getSEMICOLONTerminalRuleCall_1_2()); 
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getJump_statementAccess().getJump_statementAction_2_0(),
            $current);
    }
)this_DISCARD_7=RULE_DISCARD
    { 
    newLeafNode(this_DISCARD_7, grammarAccess.getJump_statementAccess().getDISCARDTerminalRuleCall_2_1()); 
    }
this_SEMICOLON_8=RULE_SEMICOLON
    { 
    newLeafNode(this_SEMICOLON_8, grammarAccess.getJump_statementAccess().getSEMICOLONTerminalRuleCall_2_2()); 
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getJump_statementAccess().getJump_statementAction_3_0(),
            $current);
    }
)this_RETURN_10=RULE_RETURN
    { 
    newLeafNode(this_RETURN_10, grammarAccess.getJump_statementAccess().getRETURNTerminalRuleCall_3_1()); 
    }
this_SEMICOLON_11=RULE_SEMICOLON
    { 
    newLeafNode(this_SEMICOLON_11, grammarAccess.getJump_statementAccess().getSEMICOLONTerminalRuleCall_3_2()); 
    }
)
    |(this_RETURN_12=RULE_RETURN
    { 
    newLeafNode(this_RETURN_12, grammarAccess.getJump_statementAccess().getRETURNTerminalRuleCall_4_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJump_statementAccess().getEExpressionParserRuleCall_4_1_0()); 
	    }
		lv_e_13_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJump_statementRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_13_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_SEMICOLON_14=RULE_SEMICOLON
    { 
    newLeafNode(this_SEMICOLON_14, grammarAccess.getJump_statementAccess().getSEMICOLONTerminalRuleCall_4_2()); 
    }
))
;





// Entry rule entryRuletranslation_unit
entryRuletranslation_unit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTranslation_unitRule()); }
	 iv_ruletranslation_unit=ruletranslation_unit 
	 { $current=$iv_ruletranslation_unit.current; } 
	 EOF 
;

// Rule translation_unit
ruletranslation_unit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getTranslation_unitAccess().getEExternal_declarationParserRuleCall_0()); 
	    }
		lv_e_0_0=ruleexternal_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTranslation_unitRule());
	        }
       		add(
       			$current, 
       			"e",
        		lv_e_0_0, 
        		"external_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleexternal_declaration
entryRuleexternal_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExternal_declarationRule()); }
	 iv_ruleexternal_declaration=ruleexternal_declaration 
	 { $current=$iv_ruleexternal_declaration.current; } 
	 EOF 
;

// Rule external_declaration
ruleexternal_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExternal_declarationAccess().getFFunction_definitionParserRuleCall_0_0()); 
	    }
		lv_f_0_0=rulefunction_definition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExternal_declarationRule());
	        }
       		set(
       			$current, 
       			"f",
        		lv_f_0_0, 
        		"function_definition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExternal_declarationAccess().getDDeclarationParserRuleCall_1_0()); 
	    }
		lv_d_1_0=ruledeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExternal_declarationRule());
	        }
       		set(
       			$current, 
       			"d",
        		lv_d_1_0, 
        		"declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExternal_declarationAccess().getGGlue_blockParserRuleCall_2_0()); 
	    }
		lv_g_2_0=ruleglue_block		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExternal_declarationRule());
	        }
       		set(
       			$current, 
       			"g",
        		lv_g_2_0, 
        		"glue_block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulefunction_definition
entryRulefunction_definition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunction_definitionRule()); }
	 iv_rulefunction_definition=rulefunction_definition 
	 { $current=$iv_rulefunction_definition.current; } 
	 EOF 
;

// Rule function_definition
rulefunction_definition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_definitionAccess().getPFunction_prototypeParserRuleCall_0_0()); 
	    }
		lv_p_0_0=rulefunction_prototype		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_definitionRule());
	        }
       		set(
       			$current, 
       			"p",
        		lv_p_0_0, 
        		"function_prototype");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_definitionAccess().getSCompound_statement_no_new_scopeParserRuleCall_1_0()); 
	    }
		lv_s_1_0=rulecompound_statement_no_new_scope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_definitionRule());
	        }
       		set(
       			$current, 
       			"s",
        		lv_s_1_0, 
        		"compound_statement_no_new_scope");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleglue_block
entryRuleglue_block returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlue_blockRule()); }
	 iv_ruleglue_block=ruleglue_block 
	 { $current=$iv_ruleglue_block.current; } 
	 EOF 
;

// Rule glue_block
ruleglue_block returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_g_0_0=RULE_T_GLUE_BLOCK
		{
			newLeafNode(lv_g_0_0, grammarAccess.getGlue_blockAccess().getGT_GLUE_BLOCKTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGlue_blockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"g",
        		lv_g_0_0, 
        		"T_GLUE_BLOCK");
	    }

)
)
;





RULE_TYPE : ('float2'|'float3'|'float4'|'float'|'int2'|'int3'|'int4'|'int'|'bool2'|'bool3'|'bool4'|'bool'|'sampler'|'lsampler'|'fsampler');

RULE_BOOLCONSTANT : ('true'|'false');

RULE_STAR : '*';

RULE_SLASH : '/';

RULE_PLUS : '+';

RULE_DASH : '-';

RULE_LT : '<';

RULE_GT : '>';

RULE_LTEQ : '<=';

RULE_GTEQ : '>=';

RULE_EQEQ : '==';

RULE_NEQ : '!=';

RULE_AND : '&&';

RULE_XOR : '^^';

RULE_OR : '||';

RULE_INC : '++';

RULE_DEC : '--';

RULE_STAREQ : '*=';

RULE_SLASHEQ : '/=';

RULE_PLUSEQ : '+=';

RULE_DASHEQ : '-=';

RULE_LEFT_PAREN : '(';

RULE_RIGHT_PAREN : ')';

RULE_LEFT_BRACKET : '[';

RULE_RIGHT_BRACKET : ']';

RULE_LEFT_BRACE : '{';

RULE_RIGHT_BRACE : '}';

RULE_LEFT_FRENCH : '<<';

RULE_RIGHT_FRENCH : '>>';

RULE_DOT : '.';

RULE_COMMA : ',';

RULE_EQUAL : '=';

RULE_BANG : '!';

RULE_TILDE : '~';

RULE_QUESTION : '?';

RULE_COLON : ':';

RULE_SEMICOLON : ';';

RULE_IF : 'if';

RULE_ELSE : 'else';

RULE_WHILE : 'while';

RULE_DO : 'do';

RULE_FOR : 'for';

RULE_UNROLL : 'unroll';

RULE_CONTINUE : 'continue';

RULE_BREAK : 'break';

RULE_DISCARD : 'discard';

RULE_RETURN : 'return';

RULE_VOID : 'void';

RULE_RGBA_FIELDS : (RULE_DOT RULE_RFIELD RULE_RFIELD RULE_RFIELD RULE_RFIELD|RULE_DOT RULE_RFIELD RULE_RFIELD RULE_RFIELD|RULE_DOT RULE_RFIELD RULE_RFIELD|RULE_DOT RULE_RFIELD);

fragment RULE_RFIELD : ('r'|'g'|'b'|'a');

RULE_XYZW_FIELDS : (RULE_DOT RULE_XFIELD RULE_XFIELD RULE_XFIELD RULE_XFIELD|RULE_DOT RULE_XFIELD RULE_XFIELD RULE_XFIELD|RULE_DOT RULE_XFIELD RULE_XFIELD|RULE_DOT RULE_XFIELD);

fragment RULE_XFIELD : ('x'|'y'|'z'|'w');

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|RULE_DIGIT)*;

fragment RULE_LETTER : ('$'|'A'..'Z'|'a'..'z'|'_');

fragment RULE_DIGIT : '0'..'9';

RULE_INTCONSTANT : ('0'|'1'..'9' RULE_DIGIT*);

RULE_FLOATCONSTANT : (RULE_DIGIT+ '.' RULE_DIGIT*|'.' RULE_DIGIT+);

RULE_WS : (' '|'\r'|'\t'|'\n');

RULE_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_LINE_COMMENT : '//' ~(('\n'|'\r'))* '\r'? '\n';

RULE_T_GLUE_BLOCK : RULE_LEFT_FRENCH .* RULE_RIGHT_FRENCH;


