/*
* generated by Xtext
*/
grammar InternalDecoraDsl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package at.bestsolution.efxclipse.tooling.decora.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.bestsolution.efxclipse.tooling.decora.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.bestsolution.efxclipse.tooling.decora.services.DecoraDslGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private DecoraDslGrammarAccess grammarAccess;
 	
    public InternalDecoraDslParser(TokenStream input, DecoraDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "field_selection";	
   	}
   	
   	@Override
   	protected DecoraDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulefield_selection
entryRulefield_selection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getField_selectionRule()); }
	 iv_rulefield_selection=rulefield_selection 
	 { $current=$iv_rulefield_selection.current; } 
	 EOF 
;

// Rule field_selection
rulefield_selection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getField_selectionAccess().getRRGBA_FIELDSParserRuleCall_0_0()); 
	    }
		lv_r_0_0=ruleRGBA_FIELDS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_selectionRule());
	        }
       		set(
       			$current, 
       			"r",
        		lv_r_0_0, 
        		"RGBA_FIELDS");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_x_1_0=RULE_XYZW_FIELDS
		{
			newLeafNode(lv_x_1_0, grammarAccess.getField_selectionAccess().getXXYZW_FIELDSTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getField_selectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"x",
        		lv_x_1_0, 
        		"XYZW_FIELDS");
	    }

)
))
;









// Entry rule entryRuleRGBA_FIELDS
entryRuleRGBA_FIELDS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRGBA_FIELDSRule()); } 
	 iv_ruleRGBA_FIELDS=ruleRGBA_FIELDS 
	 { $current=$iv_ruleRGBA_FIELDS.current.getText(); }  
	 EOF 
;

// Rule RGBA_FIELDS
ruleRGBA_FIELDS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_DOT_0=RULE_DOT    {
		$current.merge(this_DOT_0);
    }

    { 
    newLeafNode(this_DOT_0, grammarAccess.getRGBA_FIELDSAccess().getDOTTerminalRuleCall_0_0()); 
    }
    this_RFIELD_1=RULE_RFIELD    {
		$current.merge(this_RFIELD_1);
    }

    { 
    newLeafNode(this_RFIELD_1, grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_0_1()); 
    }
    this_RFIELD_2=RULE_RFIELD    {
		$current.merge(this_RFIELD_2);
    }

    { 
    newLeafNode(this_RFIELD_2, grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_0_2()); 
    }
    this_RFIELD_3=RULE_RFIELD    {
		$current.merge(this_RFIELD_3);
    }

    { 
    newLeafNode(this_RFIELD_3, grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_0_3()); 
    }
    this_RFIELD_4=RULE_RFIELD    {
		$current.merge(this_RFIELD_4);
    }

    { 
    newLeafNode(this_RFIELD_4, grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_0_4()); 
    }
)
    |(    this_DOT_5=RULE_DOT    {
		$current.merge(this_DOT_5);
    }

    { 
    newLeafNode(this_DOT_5, grammarAccess.getRGBA_FIELDSAccess().getDOTTerminalRuleCall_1_0()); 
    }
    this_RFIELD_6=RULE_RFIELD    {
		$current.merge(this_RFIELD_6);
    }

    { 
    newLeafNode(this_RFIELD_6, grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_1_1()); 
    }
    this_RFIELD_7=RULE_RFIELD    {
		$current.merge(this_RFIELD_7);
    }

    { 
    newLeafNode(this_RFIELD_7, grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_1_2()); 
    }
    this_RFIELD_8=RULE_RFIELD    {
		$current.merge(this_RFIELD_8);
    }

    { 
    newLeafNode(this_RFIELD_8, grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_1_3()); 
    }
)
    |(    this_DOT_9=RULE_DOT    {
		$current.merge(this_DOT_9);
    }

    { 
    newLeafNode(this_DOT_9, grammarAccess.getRGBA_FIELDSAccess().getDOTTerminalRuleCall_2_0()); 
    }
    this_RFIELD_10=RULE_RFIELD    {
		$current.merge(this_RFIELD_10);
    }

    { 
    newLeafNode(this_RFIELD_10, grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_2_1()); 
    }
    this_RFIELD_11=RULE_RFIELD    {
		$current.merge(this_RFIELD_11);
    }

    { 
    newLeafNode(this_RFIELD_11, grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_2_2()); 
    }
)
    |(    this_DOT_12=RULE_DOT    {
		$current.merge(this_DOT_12);
    }

    { 
    newLeafNode(this_DOT_12, grammarAccess.getRGBA_FIELDSAccess().getDOTTerminalRuleCall_3_0()); 
    }
    this_RFIELD_13=RULE_RFIELD    {
		$current.merge(this_RFIELD_13);
    }

    { 
    newLeafNode(this_RFIELD_13, grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_3_1()); 
    }
))
    ;







RULE_RFIELD : ('r'|'g'|'b'|'a');

RULE_XYZW_FIELDS : (RULE_DOT RULE_XFIELD RULE_XFIELD RULE_XFIELD RULE_XFIELD|RULE_DOT RULE_XFIELD RULE_XFIELD RULE_XFIELD|RULE_DOT RULE_XFIELD RULE_XFIELD|RULE_DOT RULE_XFIELD);

RULE_XFIELD : ('x'|'y'|'z'|'w');

RULE_LETTER : ('$'|'A'..'Z'|'a'..'z'|'_');

RULE_DIGIT : '0'..'9';

RULE_INTCONSTANT : ('0'|'1'..'9' RULE_DIGIT*);

RULE_FLOATCONSTANT : (RULE_DIGIT+ '.' RULE_DIGIT*|'.' RULE_DIGIT+);

RULE_WS : (' '|'\r'|'\t'|'\n');

RULE_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_LINE_COMMENT : '//' ~(('\n'|'\r'))* '\r'? '\n';

RULE_T_GLUE_BLOCK : RULE_LEFT_FRENCH .* RULE_RIGHT_FRENCH;

RULE_STAR : '*';

RULE_SLASH : '/';

RULE_PLUS : '+';

RULE_DASH : '-';

RULE_LT : '<';

RULE_GT : '>';

RULE_LTEQ : '<=';

RULE_GTEQ : '>=';

RULE_EQEQ : '==';

RULE_NEQ : '!=';

RULE_AND : '&&';

RULE_XOR : '^^';

RULE_OR : '||';

RULE_INC : '++';

RULE_DEC : '--';

RULE_STAREQ : '*=';

RULE_SLASHEQ : '/=';

RULE_PLUSEQ : '+=';

RULE_DASHEQ : '-=';

RULE_LEFT_PAREN : '(';

RULE_RIGHT_PAREN : ')';

RULE_LEFT_BRACKET : '[';

RULE_RIGHT_BRACKET : ']';

RULE_LEFT_BRACE : '{';

RULE_RIGHT_BRACE : '}';

RULE_LEFT_FRENCH : '<<';

RULE_RIGHT_FRENCH : '>>';

RULE_DOT : '.';

RULE_COMMA : ',';

RULE_EQUAL : '=';

RULE_BANG : '!';

RULE_TILDE : '~';

RULE_QUESTION : '?';

RULE_COLON : ':';

RULE_SEMICOLON : ';';

RULE_IF : 'if';

RULE_ELSE : 'else';

RULE_WHILE : 'while';

RULE_DO : 'do';

RULE_FOR : 'for';

RULE_UNROLL : 'unroll';

RULE_CONTINUE : 'continue';

RULE_BREAK : 'break';

RULE_DISCARD : 'discard';

RULE_RETURN : 'return';

RULE_VOID : 'void';


