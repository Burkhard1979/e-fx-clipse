/*
* generated by Xtext
*/
package at.bestsolution.efxclipse.tooling.decora.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import at.bestsolution.efxclipse.tooling.decora.services.DecoraDslGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class DecoraDslParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private DecoraDslGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_UnitAssignment(this, this, 0, inst);
			case 1: return new Field_selection_Alternatives(this, this, 1, inst);
			case 2: return new Primary_expression_Alternatives(this, this, 2, inst);
			case 3: return new Primary_or_call_Alternatives(this, this, 3, inst);
			case 4: return new Postfix_expression_Alternatives(this, this, 4, inst);
			case 5: return new Function_call_Alternatives(this, this, 5, inst);
			case 6: return new Function_call_parameter_list_Group(this, this, 6, inst);
			case 7: return new Unary_expression_Alternatives(this, this, 7, inst);
			case 8: return new Multiplicative_expression_Group(this, this, 8, inst);
			case 9: return new Additive_expression_Group(this, this, 9, inst);
			case 10: return new Relational_expression_Group(this, this, 10, inst);
			case 11: return new Equality_expression_Group(this, this, 11, inst);
			case 12: return new Logical_and_expression_Group(this, this, 12, inst);
			case 13: return new Logical_xor_expression_Group(this, this, 13, inst);
			case 14: return new Logical_or_expression_Group(this, this, 14, inst);
			case 15: return new Ternary_part_Group(this, this, 15, inst);
			case 16: return new Conditional_expression_Group(this, this, 16, inst);
			case 17: return new Assignment_expression_Alternatives(this, this, 17, inst);
			case 18: return new Expression_EAssignment(this, this, 18, inst);
			case 19: return new Function_prototype_Group(this, this, 19, inst);
			case 20: return new Parameter_declaration_Group(this, this, 20, inst);
			case 21: return new Parameter_declaration_list_Group(this, this, 21, inst);
			case 22: return new Declaration_identifier_and_init_Group(this, this, 22, inst);
			case 23: return new Single_declaration_Group(this, this, 23, inst);
			case 24: return new Declaration_Group(this, this, 24, inst);
			case 25: return new Fully_specified_type_Alternatives(this, this, 25, inst);
			case 26: return new Type_specifier_Group(this, this, 26, inst);
			case 27: return new Array_brackets_Group(this, this, 27, inst);
			case 28: return new Initializer_EAssignment(this, this, 28, inst);
			case 29: return new Declaration_statement_DAssignment(this, this, 29, inst);
			case 30: return new Statement_Alternatives(this, this, 30, inst);
			case 31: return new Simple_statement_Alternatives(this, this, 31, inst);
			case 32: return new Compound_statement_Group(this, this, 32, inst);
			case 33: return new Statement_no_new_scope_Alternatives(this, this, 33, inst);
			case 34: return new Compound_statement_no_new_scope_Group(this, this, 34, inst);
			case 35: return new Expression_statement_Alternatives(this, this, 35, inst);
			case 36: return new Constant_expression_CAssignment(this, this, 36, inst);
			case 37: return new Selection_statement_Group(this, this, 37, inst);
			case 38: return new Condition_EAssignment(this, this, 38, inst);
			case 39: return new Iteration_statement_Alternatives(this, this, 39, inst);
			case 40: return new Unroll_modifier_Group(this, this, 40, inst);
			case 41: return new For_init_statement_Alternatives(this, this, 41, inst);
			case 42: return new For_rest_statement_Alternatives(this, this, 42, inst);
			case 43: return new Jump_statement_Alternatives(this, this, 43, inst);
			case 44: return new Translation_unit_EAssignment(this, this, 44, inst);
			case 45: return new External_declaration_Alternatives(this, this, 45, inst);
			case 46: return new Function_definition_Group(this, this, 46, inst);
			case 47: return new Glue_block_GAssignment(this, this, 47, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 * 	unit=translation_unit;
 *
 **/

// unit=translation_unit
protected class Model_UnitAssignment extends AssignmentToken  {
	
	public Model_UnitAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getUnitAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Translation_unit_EAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getModelRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("unit",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("unit");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTranslation_unitRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getUnitTranslation_unitParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Model ****************/


/************ begin Rule field_selection ****************
 *
 * // returns [String fields]
 * field_selection:
 * 	r= // { $fields = $r.text; }
 * 	RGBA_FIELDS | x= // { $fields = $x.text; }
 * 	XYZW_FIELDS;
 *
 **/

// r= // { $fields = $r.text; }
// RGBA_FIELDS | x= // { $fields = $x.text; }
// XYZW_FIELDS
protected class Field_selection_Alternatives extends AlternativesToken {

	public Field_selection_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getField_selectionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Field_selection_RAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Field_selection_XAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getField_selectionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// r= // { $fields = $r.text; }
// RGBA_FIELDS
protected class Field_selection_RAssignment_0 extends AssignmentToken  {
	
	public Field_selection_RAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getField_selectionAccess().getRAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("r",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("r");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getField_selectionAccess().getRRGBA_FIELDSTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getField_selectionAccess().getRRGBA_FIELDSTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// x= // { $fields = $x.text; }
// XYZW_FIELDS
protected class Field_selection_XAssignment_1 extends AssignmentToken  {
	
	public Field_selection_XAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getField_selectionAccess().getXAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("x",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("x");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getField_selectionAccess().getXXYZW_FIELDSTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getField_selectionAccess().getXXYZW_FIELDSTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule field_selection ****************/


/************ begin Rule primary_expression ****************
 *
 * primary_expression returns // returns [Expr expr]
 * Expr: //    { $expr = tm.variable($IDENTIFIER.text); }
 * 	IDENTIFIER //{ $expr = tm.parenExpr($e.expr); }
 * 	| //   { $expr = tm.literal(Type.INT, Integer.valueOf($INTCONSTANT.text)); }
 * 	INTCONSTANT | // { $expr = tm.literal(Type.FLOAT, Float.valueOf($FLOATCONSTANT.text)); }
 * 	FLOATCONSTANT | //  { $expr = tm.literal(Type.BOOL, Boolean.valueOf($BOOLCONSTANT.text)); }
 * 	BOOLCONSTANT | LEFT_PAREN e=expression RIGHT_PAREN;
 *
 **/

// //    { $expr = tm.variable($IDENTIFIER.text); }
// IDENTIFIER //{ $expr = tm.parenExpr($e.expr); }
// | //   { $expr = tm.literal(Type.INT, Integer.valueOf($INTCONSTANT.text)); }
// INTCONSTANT | // { $expr = tm.literal(Type.FLOAT, Float.valueOf($FLOATCONSTANT.text)); }
// FLOATCONSTANT | //  { $expr = tm.literal(Type.BOOL, Boolean.valueOf($BOOLCONSTANT.text)); }
// BOOLCONSTANT | LEFT_PAREN e=expression RIGHT_PAREN
protected class Primary_expression_Alternatives extends AlternativesToken {

	public Primary_expression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrimary_expressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_expression_IDENTIFIERTerminalRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Primary_expression_Group_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPrimary_expressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //    { $expr = tm.variable($IDENTIFIER.text); }
// IDENTIFIER
protected class Primary_expression_IDENTIFIERTerminalRuleCall_0 extends UnassignedTextToken {

	public Primary_expression_IDENTIFIERTerminalRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimary_expressionAccess().getIDENTIFIERTerminalRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// LEFT_PAREN e=expression RIGHT_PAREN
protected class Primary_expression_Group_4 extends GroupToken {
	
	public Primary_expression_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimary_expressionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_expression_RIGHT_PARENTerminalRuleCall_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LEFT_PAREN
protected class Primary_expression_LEFT_PARENTerminalRuleCall_4_0 extends UnassignedTextToken {

	public Primary_expression_LEFT_PARENTerminalRuleCall_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimary_expressionAccess().getLEFT_PARENTerminalRuleCall_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// e=expression
protected class Primary_expression_EAssignment_4_1 extends AssignmentToken  {
	
	public Primary_expression_EAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimary_expressionAccess().getEAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_EAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPrimary_expressionAccess().getEExpressionParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Primary_expression_LEFT_PARENTerminalRuleCall_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// RIGHT_PAREN
protected class Primary_expression_RIGHT_PARENTerminalRuleCall_4_2 extends UnassignedTextToken {

	public Primary_expression_RIGHT_PARENTerminalRuleCall_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimary_expressionAccess().getRIGHT_PARENTerminalRuleCall_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_expression_EAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule primary_expression ****************/


/************ begin Rule primary_or_call ****************
 *
 * primary_or_call returns Expr:
 * 	e= //{ $expr = $e.expr; }
 * 	primary_expression | f= //{ $expr = $f.expr; }
 * 	function_call;
 *
 **/

// e= //{ $expr = $e.expr; }
// primary_expression | f= //{ $expr = $f.expr; }
// function_call
protected class Primary_or_call_Alternatives extends AlternativesToken {

	public Primary_or_call_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrimary_or_callAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_or_call_EAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Primary_or_call_FAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPrimary_or_callRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// e= //{ $expr = $e.expr; }
// primary_expression
protected class Primary_or_call_EAssignment_0 extends AssignmentToken  {
	
	public Primary_or_call_EAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimary_or_callAccess().getEAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimary_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPrimary_or_callAccess().getEPrimary_expressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// f= //{ $expr = $f.expr; }
// function_call
protected class Primary_or_call_FAssignment_1 extends AssignmentToken  {
	
	public Primary_or_call_FAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimary_or_callAccess().getFAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_call_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("f",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("f");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunction_callRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPrimary_or_callAccess().getFFunction_callParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule primary_or_call ****************/


/************ begin Rule postfix_expression ****************
 *
 * //
 * // TODO: not sure how to do this properly without mutual left-recursion;
 * // for now we hack it to allow:
 * //   arr[3].rgb
 * //   arr[3]
 * //   val.rgb
 * //   val++
 * //   val--
 * //   val
 * // but not things like:
 * //   arr[3].r++
 * //
 * //{ $expr = $e.expr; }
 * postfix_expression returns Expr:
 * 	e=primary_or_call LEFT_BRACKET ae=expression RIGHT_BRACKET fs=field_selection //{ $expr = tm.fieldSelect(tm.arrayAccess($e.expr, $ae.expr), $fs.fields); }
 * 	//{ $expr = tm.arrayAccess($e.expr, $ae.expr); }
 * 	//{ $expr = tm.fieldSelect($e.expr, $fs.fields); }
 * 	//{ $expr = tm.unary(UnaryOpType.INC, $e.expr); }
 * 	//{ $expr = tm.unary(UnaryOpType.DEC, $e.expr); }
 * 	| e=primary_or_call LEFT_BRACKET ae=expression RIGHT_BRACKET | e=primary_or_call fs=field_selection | e=primary_or_call
 * 	INC | e=primary_or_call DEC | e=primary_or_call;
 *
 **/

// e=primary_or_call LEFT_BRACKET ae=expression RIGHT_BRACKET fs=field_selection //{ $expr = tm.fieldSelect(tm.arrayAccess($e.expr, $ae.expr), $fs.fields); }
// //{ $expr = tm.arrayAccess($e.expr, $ae.expr); }
// //{ $expr = tm.fieldSelect($e.expr, $fs.fields); }
// //{ $expr = tm.unary(UnaryOpType.INC, $e.expr); }
// //{ $expr = tm.unary(UnaryOpType.DEC, $e.expr); }
// | e=primary_or_call LEFT_BRACKET ae=expression RIGHT_BRACKET | e=primary_or_call fs=field_selection | e=primary_or_call
// INC | e=primary_or_call DEC | e=primary_or_call
protected class Postfix_expression_Alternatives extends AlternativesToken {

	public Postfix_expression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postfix_expression_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Postfix_expression_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Postfix_expression_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Postfix_expression_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Postfix_expression_Group_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Postfix_expression_EAssignment_5(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPostfix_expressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// e=primary_or_call LEFT_BRACKET ae=expression RIGHT_BRACKET fs=field_selection
protected class Postfix_expression_Group_0 extends GroupToken {
	
	public Postfix_expression_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postfix_expression_FsAssignment_0_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// e=primary_or_call
protected class Postfix_expression_EAssignment_0_0 extends AssignmentToken  {
	
	public Postfix_expression_EAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getEAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_or_call_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimary_or_callRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPostfix_expressionAccess().getEPrimary_or_callParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// LEFT_BRACKET
protected class Postfix_expression_LEFT_BRACKETTerminalRuleCall_0_1 extends UnassignedTextToken {

	public Postfix_expression_LEFT_BRACKETTerminalRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getLEFT_BRACKETTerminalRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postfix_expression_EAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ae=expression
protected class Postfix_expression_AeAssignment_0_2 extends AssignmentToken  {
	
	public Postfix_expression_AeAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getAeAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_EAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ae",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ae");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPostfix_expressionAccess().getAeExpressionParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Postfix_expression_LEFT_BRACKETTerminalRuleCall_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// RIGHT_BRACKET
protected class Postfix_expression_RIGHT_BRACKETTerminalRuleCall_0_3 extends UnassignedTextToken {

	public Postfix_expression_RIGHT_BRACKETTerminalRuleCall_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getRIGHT_BRACKETTerminalRuleCall_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postfix_expression_AeAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// fs=field_selection
protected class Postfix_expression_FsAssignment_0_4 extends AssignmentToken  {
	
	public Postfix_expression_FsAssignment_0_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getFsAssignment_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Field_selection_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("fs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("fs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getField_selectionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPostfix_expressionAccess().getFsField_selectionParserRuleCall_0_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Postfix_expression_RIGHT_BRACKETTerminalRuleCall_0_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// e=primary_or_call LEFT_BRACKET ae=expression RIGHT_BRACKET
protected class Postfix_expression_Group_1 extends GroupToken {
	
	public Postfix_expression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postfix_expression_RIGHT_BRACKETTerminalRuleCall_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// e=primary_or_call
protected class Postfix_expression_EAssignment_1_0 extends AssignmentToken  {
	
	public Postfix_expression_EAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getEAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_or_call_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimary_or_callRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPostfix_expressionAccess().getEPrimary_or_callParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// LEFT_BRACKET
protected class Postfix_expression_LEFT_BRACKETTerminalRuleCall_1_1 extends UnassignedTextToken {

	public Postfix_expression_LEFT_BRACKETTerminalRuleCall_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getLEFT_BRACKETTerminalRuleCall_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postfix_expression_EAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ae=expression
protected class Postfix_expression_AeAssignment_1_2 extends AssignmentToken  {
	
	public Postfix_expression_AeAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getAeAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_EAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ae",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ae");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPostfix_expressionAccess().getAeExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Postfix_expression_LEFT_BRACKETTerminalRuleCall_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// RIGHT_BRACKET
protected class Postfix_expression_RIGHT_BRACKETTerminalRuleCall_1_3 extends UnassignedTextToken {

	public Postfix_expression_RIGHT_BRACKETTerminalRuleCall_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getRIGHT_BRACKETTerminalRuleCall_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postfix_expression_AeAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// e=primary_or_call fs=field_selection
protected class Postfix_expression_Group_2 extends GroupToken {
	
	public Postfix_expression_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postfix_expression_FsAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// e=primary_or_call
protected class Postfix_expression_EAssignment_2_0 extends AssignmentToken  {
	
	public Postfix_expression_EAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getEAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_or_call_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimary_or_callRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPostfix_expressionAccess().getEPrimary_or_callParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// fs=field_selection
protected class Postfix_expression_FsAssignment_2_1 extends AssignmentToken  {
	
	public Postfix_expression_FsAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getFsAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Field_selection_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("fs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("fs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getField_selectionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPostfix_expressionAccess().getFsField_selectionParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Postfix_expression_EAssignment_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// e=primary_or_call INC
protected class Postfix_expression_Group_3 extends GroupToken {
	
	public Postfix_expression_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postfix_expression_INCTerminalRuleCall_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// e=primary_or_call
protected class Postfix_expression_EAssignment_3_0 extends AssignmentToken  {
	
	public Postfix_expression_EAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getEAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_or_call_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimary_or_callRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPostfix_expressionAccess().getEPrimary_or_callParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// INC
protected class Postfix_expression_INCTerminalRuleCall_3_1 extends UnassignedTextToken {

	public Postfix_expression_INCTerminalRuleCall_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getINCTerminalRuleCall_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postfix_expression_EAssignment_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// e=primary_or_call DEC
protected class Postfix_expression_Group_4 extends GroupToken {
	
	public Postfix_expression_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postfix_expression_DECTerminalRuleCall_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// e=primary_or_call
protected class Postfix_expression_EAssignment_4_0 extends AssignmentToken  {
	
	public Postfix_expression_EAssignment_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getEAssignment_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_or_call_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimary_or_callRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPostfix_expressionAccess().getEPrimary_or_callParserRuleCall_4_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// DEC
protected class Postfix_expression_DECTerminalRuleCall_4_1 extends UnassignedTextToken {

	public Postfix_expression_DECTerminalRuleCall_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getDECTerminalRuleCall_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postfix_expression_EAssignment_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// e=primary_or_call
protected class Postfix_expression_EAssignment_5 extends AssignmentToken  {
	
	public Postfix_expression_EAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPostfix_expressionAccess().getEAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_or_call_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimary_or_callRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPostfix_expressionAccess().getEPrimary_or_callParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule postfix_expression ****************/


/************ begin Rule function_call ****************
 *
 * // From the GLSL spec...
 * // Grammar Note: Constructors look like functions, but lexical
 * // analysis recognized most of them as keywords.  They are now
 * // recognized through "type_specifier".
 * //            {
 * //                Type type = Type.fromToken($ts.text);
 * //                $expr = tm.vectorCtor(type, p!=null ? $p.exprList : null);
 * //            }
 * function_call returns Expr:
 * 	id=IDENTIFIER LEFT_PAREN p=function_call_parameter_list? RIGHT_PAREN //            {
 * 	//                $expr = tm.call($id.text, p!=null ? $p.exprList : null);
 * 	//            }
 * 	| ts=type_specifier LEFT_PAREN p=function_call_parameter_list? RIGHT_PAREN;
 *
 **/

// id=IDENTIFIER LEFT_PAREN p=function_call_parameter_list? RIGHT_PAREN //            {
// //                $expr = tm.call($id.text, p!=null ? $p.exprList : null);
// //            }
// | ts=type_specifier LEFT_PAREN p=function_call_parameter_list? RIGHT_PAREN
protected class Function_call_Alternatives extends AlternativesToken {

	public Function_call_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFunction_callAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_call_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Function_call_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunction_callRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// id=IDENTIFIER LEFT_PAREN p=function_call_parameter_list? RIGHT_PAREN
protected class Function_call_Group_0 extends GroupToken {
	
	public Function_call_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunction_callAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_call_RIGHT_PARENTerminalRuleCall_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// id=IDENTIFIER
protected class Function_call_IdAssignment_0_0 extends AssignmentToken  {
	
	public Function_call_IdAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunction_callAccess().getIdAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("id",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("id");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFunction_callAccess().getIdIDENTIFIERTerminalRuleCall_0_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFunction_callAccess().getIdIDENTIFIERTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// LEFT_PAREN
protected class Function_call_LEFT_PARENTerminalRuleCall_0_1 extends UnassignedTextToken {

	public Function_call_LEFT_PARENTerminalRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFunction_callAccess().getLEFT_PARENTerminalRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_call_IdAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// p=function_call_parameter_list?
protected class Function_call_PAssignment_0_2 extends AssignmentToken  {
	
	public Function_call_PAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunction_callAccess().getPAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_call_parameter_list_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("p",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("p");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunction_call_parameter_listRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunction_callAccess().getPFunction_call_parameter_listParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Function_call_LEFT_PARENTerminalRuleCall_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// RIGHT_PAREN
protected class Function_call_RIGHT_PARENTerminalRuleCall_0_3 extends UnassignedTextToken {

	public Function_call_RIGHT_PARENTerminalRuleCall_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFunction_callAccess().getRIGHT_PARENTerminalRuleCall_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_call_PAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Function_call_LEFT_PARENTerminalRuleCall_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// ts=type_specifier LEFT_PAREN p=function_call_parameter_list? RIGHT_PAREN
protected class Function_call_Group_1 extends GroupToken {
	
	public Function_call_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunction_callAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_call_RIGHT_PARENTerminalRuleCall_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ts=type_specifier
protected class Function_call_TsAssignment_1_0 extends AssignmentToken  {
	
	public Function_call_TsAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunction_callAccess().getTsAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_specifier_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ts",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getType_specifierRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunction_callAccess().getTsType_specifierParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// LEFT_PAREN
protected class Function_call_LEFT_PARENTerminalRuleCall_1_1 extends UnassignedTextToken {

	public Function_call_LEFT_PARENTerminalRuleCall_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFunction_callAccess().getLEFT_PARENTerminalRuleCall_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_call_TsAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// p=function_call_parameter_list?
protected class Function_call_PAssignment_1_2 extends AssignmentToken  {
	
	public Function_call_PAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunction_callAccess().getPAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_call_parameter_list_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("p",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("p");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunction_call_parameter_listRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunction_callAccess().getPFunction_call_parameter_listParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Function_call_LEFT_PARENTerminalRuleCall_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// RIGHT_PAREN
protected class Function_call_RIGHT_PARENTerminalRuleCall_1_3 extends UnassignedTextToken {

	public Function_call_RIGHT_PARENTerminalRuleCall_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFunction_callAccess().getRIGHT_PARENTerminalRuleCall_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_call_PAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Function_call_LEFT_PARENTerminalRuleCall_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}



/************ end Rule function_call ****************/


/************ begin Rule function_call_parameter_list ****************
 *
 * //returns [List<Expr> exprList = new ArrayList<Expr>()]
 * function_call_parameter_list:
 * 	a+= //{ $exprList.add($a.expr); }
 * 	assignment_expression (COMMA a+= //{$exprList.add($a.expr); }
 * 	assignment_expression)*;
 *
 **/

// a+= //{ $exprList.add($a.expr); }
// assignment_expression (COMMA a+= //{$exprList.add($a.expr); }
// assignment_expression)*
protected class Function_call_parameter_list_Group extends GroupToken {
	
	public Function_call_parameter_list_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunction_call_parameter_listAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_call_parameter_list_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Function_call_parameter_list_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunction_call_parameter_listRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a+= //{ $exprList.add($a.expr); }
// assignment_expression
protected class Function_call_parameter_list_AAssignment_0 extends AssignmentToken  {
	
	public Function_call_parameter_list_AAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunction_call_parameter_listAccess().getAAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Assignment_expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignment_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunction_call_parameter_listAccess().getAAssignment_expressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (COMMA a+= //{$exprList.add($a.expr); }
// assignment_expression)*
protected class Function_call_parameter_list_Group_1 extends GroupToken {
	
	public Function_call_parameter_list_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunction_call_parameter_listAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_call_parameter_list_AAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class Function_call_parameter_list_COMMATerminalRuleCall_1_0 extends UnassignedTextToken {

	public Function_call_parameter_list_COMMATerminalRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFunction_call_parameter_listAccess().getCOMMATerminalRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_call_parameter_list_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Function_call_parameter_list_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// a+= //{$exprList.add($a.expr); }
// assignment_expression
protected class Function_call_parameter_list_AAssignment_1_1 extends AssignmentToken  {
	
	public Function_call_parameter_list_AAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunction_call_parameter_listAccess().getAAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Assignment_expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignment_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunction_call_parameter_listAccess().getAAssignment_expressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Function_call_parameter_list_COMMATerminalRuleCall_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule function_call_parameter_list ****************/


/************ begin Rule unary_expression ****************
 *
 * unary_expression returns Expr:
 * 	p=postfix_expression //{ $expr = $p.expr; }
 * 	//{ $expr = tm.unary(UnaryOpType.INC,     $u.expr); }
 * 	//{ $expr = tm.unary(UnaryOpType.DEC,     $u.expr); }
 * 	//{ $expr = tm.unary(UnaryOpType.PLUS,    $u.expr); }
 * 	//{ $expr = tm.unary(UnaryOpType.MINUS,   $u.expr); }
 * 	//{ $expr = tm.unary(UnaryOpType.NOT,     $u.expr); }
 * 	| INC u=unary_expression | DEC u=unary_expression | PLUS u=unary_expression | DASH u=unary_expression | BANG
 * 	u=unary_expression;
 *
 **/

// p=postfix_expression //{ $expr = $p.expr; }
// //{ $expr = tm.unary(UnaryOpType.INC,     $u.expr); }
// //{ $expr = tm.unary(UnaryOpType.DEC,     $u.expr); }
// //{ $expr = tm.unary(UnaryOpType.PLUS,    $u.expr); }
// //{ $expr = tm.unary(UnaryOpType.MINUS,   $u.expr); }
// //{ $expr = tm.unary(UnaryOpType.NOT,     $u.expr); }
// | INC u=unary_expression | DEC u=unary_expression | PLUS u=unary_expression | DASH u=unary_expression | BANG
// u=unary_expression
protected class Unary_expression_Alternatives extends AlternativesToken {

	public Unary_expression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unary_expression_PAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Unary_expression_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Unary_expression_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Unary_expression_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Unary_expression_Group_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Unary_expression_Group_5(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnary_expressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// p=postfix_expression
protected class Unary_expression_PAssignment_0 extends AssignmentToken  {
	
	public Unary_expression_PAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getPAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postfix_expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("p",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("p");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostfix_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUnary_expressionAccess().getPPostfix_expressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// INC u=unary_expression
protected class Unary_expression_Group_1 extends GroupToken {
	
	public Unary_expression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unary_expression_UAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// INC
protected class Unary_expression_INCTerminalRuleCall_1_0 extends UnassignedTextToken {

	public Unary_expression_INCTerminalRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getINCTerminalRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// u=unary_expression
protected class Unary_expression_UAssignment_1_1 extends AssignmentToken  {
	
	public Unary_expression_UAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getUAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unary_expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("u",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("u");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnary_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUnary_expressionAccess().getUUnary_expressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unary_expression_INCTerminalRuleCall_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// DEC u=unary_expression
protected class Unary_expression_Group_2 extends GroupToken {
	
	public Unary_expression_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unary_expression_UAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// DEC
protected class Unary_expression_DECTerminalRuleCall_2_0 extends UnassignedTextToken {

	public Unary_expression_DECTerminalRuleCall_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getDECTerminalRuleCall_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// u=unary_expression
protected class Unary_expression_UAssignment_2_1 extends AssignmentToken  {
	
	public Unary_expression_UAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getUAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unary_expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("u",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("u");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnary_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUnary_expressionAccess().getUUnary_expressionParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unary_expression_DECTerminalRuleCall_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// PLUS u=unary_expression
protected class Unary_expression_Group_3 extends GroupToken {
	
	public Unary_expression_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unary_expression_UAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PLUS
protected class Unary_expression_PLUSTerminalRuleCall_3_0 extends UnassignedTextToken {

	public Unary_expression_PLUSTerminalRuleCall_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getPLUSTerminalRuleCall_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// u=unary_expression
protected class Unary_expression_UAssignment_3_1 extends AssignmentToken  {
	
	public Unary_expression_UAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getUAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unary_expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("u",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("u");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnary_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUnary_expressionAccess().getUUnary_expressionParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unary_expression_PLUSTerminalRuleCall_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// DASH u=unary_expression
protected class Unary_expression_Group_4 extends GroupToken {
	
	public Unary_expression_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unary_expression_UAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// DASH
protected class Unary_expression_DASHTerminalRuleCall_4_0 extends UnassignedTextToken {

	public Unary_expression_DASHTerminalRuleCall_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getDASHTerminalRuleCall_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// u=unary_expression
protected class Unary_expression_UAssignment_4_1 extends AssignmentToken  {
	
	public Unary_expression_UAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getUAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unary_expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("u",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("u");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnary_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUnary_expressionAccess().getUUnary_expressionParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unary_expression_DASHTerminalRuleCall_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// BANG u=unary_expression
protected class Unary_expression_Group_5 extends GroupToken {
	
	public Unary_expression_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unary_expression_UAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// BANG
protected class Unary_expression_BANGTerminalRuleCall_5_0 extends UnassignedTextToken {

	public Unary_expression_BANGTerminalRuleCall_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getBANGTerminalRuleCall_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// u=unary_expression
protected class Unary_expression_UAssignment_5_1 extends AssignmentToken  {
	
	public Unary_expression_UAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnary_expressionAccess().getUAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unary_expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("u",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("u");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnary_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUnary_expressionAccess().getUUnary_expressionParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unary_expression_BANGTerminalRuleCall_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule unary_expression ****************/


/************ begin Rule multiplicative_expression ****************
 *
 * // From the GLSL spec...
 * // Grammar Note:  No traditional style type casts.
 * // From the GLSL spec...
 * // Grammar Note:  No '*' or '&' unary ops.  Pointers are not supported.
 * multiplicative_expression returns Expr:
 * 	a= //{ $expr = $a.expr; }
 * 	unary_expression (STAR b+=multiplicative_expression //{ $expr = tm.binary(BinaryOpType.MUL, $expr, $b.expr); }
 * 	//{ $expr = tm.binary(BinaryOpType.DIV, $expr, $b.expr); }
 * 	| SLASH b+=multiplicative_expression)*;
 *
 **/

// a= //{ $expr = $a.expr; }
// unary_expression (STAR b+=multiplicative_expression //{ $expr = tm.binary(BinaryOpType.MUL, $expr, $b.expr); }
// //{ $expr = tm.binary(BinaryOpType.DIV, $expr, $b.expr); }
// | SLASH b+=multiplicative_expression)*
protected class Multiplicative_expression_Group extends GroupToken {
	
	public Multiplicative_expression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicative_expressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicative_expression_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Multiplicative_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiplicative_expressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a= //{ $expr = $a.expr; }
// unary_expression
protected class Multiplicative_expression_AAssignment_0 extends AssignmentToken  {
	
	public Multiplicative_expression_AAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicative_expressionAccess().getAAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unary_expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnary_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMultiplicative_expressionAccess().getAUnary_expressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (STAR b+=multiplicative_expression //{ $expr = tm.binary(BinaryOpType.MUL, $expr, $b.expr); }
// //{ $expr = tm.binary(BinaryOpType.DIV, $expr, $b.expr); }
// | SLASH b+=multiplicative_expression)*
protected class Multiplicative_expression_Alternatives_1 extends AlternativesToken {

	public Multiplicative_expression_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMultiplicative_expressionAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicative_expression_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Multiplicative_expression_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// STAR b+=multiplicative_expression
protected class Multiplicative_expression_Group_1_0 extends GroupToken {
	
	public Multiplicative_expression_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicative_expressionAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicative_expression_BAssignment_1_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// STAR
protected class Multiplicative_expression_STARTerminalRuleCall_1_0_0 extends UnassignedTextToken {

	public Multiplicative_expression_STARTerminalRuleCall_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultiplicative_expressionAccess().getSTARTerminalRuleCall_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicative_expression_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Multiplicative_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// b+=multiplicative_expression
protected class Multiplicative_expression_BAssignment_1_0_1 extends AssignmentToken  {
	
	public Multiplicative_expression_BAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicative_expressionAccess().getBAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicative_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("b",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("b");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicative_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMultiplicative_expressionAccess().getBMultiplicative_expressionParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Multiplicative_expression_STARTerminalRuleCall_1_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// SLASH b+=multiplicative_expression
protected class Multiplicative_expression_Group_1_1 extends GroupToken {
	
	public Multiplicative_expression_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicative_expressionAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicative_expression_BAssignment_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SLASH
protected class Multiplicative_expression_SLASHTerminalRuleCall_1_1_0 extends UnassignedTextToken {

	public Multiplicative_expression_SLASHTerminalRuleCall_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultiplicative_expressionAccess().getSLASHTerminalRuleCall_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicative_expression_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Multiplicative_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// b+=multiplicative_expression
protected class Multiplicative_expression_BAssignment_1_1_1 extends AssignmentToken  {
	
	public Multiplicative_expression_BAssignment_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicative_expressionAccess().getBAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicative_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("b",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("b");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicative_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMultiplicative_expressionAccess().getBMultiplicative_expressionParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Multiplicative_expression_SLASHTerminalRuleCall_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule multiplicative_expression ****************/


/************ begin Rule additive_expression ****************
 *
 * additive_expression returns Expr:
 * 	a= //{ $expr = $a.expr; }
 * 	multiplicative_expression (PLUS b+=multiplicative_expression //{ $expr = tm.binary(BinaryOpType.ADD, $expr, $b.expr); }
 * 	//{ $expr = tm.binary(BinaryOpType.SUB, $expr, $b.expr); }
 * 	| DASH b+=multiplicative_expression)*;
 *
 **/

// a= //{ $expr = $a.expr; }
// multiplicative_expression (PLUS b+=multiplicative_expression //{ $expr = tm.binary(BinaryOpType.ADD, $expr, $b.expr); }
// //{ $expr = tm.binary(BinaryOpType.SUB, $expr, $b.expr); }
// | DASH b+=multiplicative_expression)*
protected class Additive_expression_Group extends GroupToken {
	
	public Additive_expression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAdditive_expressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Additive_expression_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Additive_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditive_expressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a= //{ $expr = $a.expr; }
// multiplicative_expression
protected class Additive_expression_AAssignment_0 extends AssignmentToken  {
	
	public Additive_expression_AAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditive_expressionAccess().getAAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicative_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicative_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAdditive_expressionAccess().getAMultiplicative_expressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (PLUS b+=multiplicative_expression //{ $expr = tm.binary(BinaryOpType.ADD, $expr, $b.expr); }
// //{ $expr = tm.binary(BinaryOpType.SUB, $expr, $b.expr); }
// | DASH b+=multiplicative_expression)*
protected class Additive_expression_Alternatives_1 extends AlternativesToken {

	public Additive_expression_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAdditive_expressionAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Additive_expression_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Additive_expression_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// PLUS b+=multiplicative_expression
protected class Additive_expression_Group_1_0 extends GroupToken {
	
	public Additive_expression_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAdditive_expressionAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Additive_expression_BAssignment_1_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PLUS
protected class Additive_expression_PLUSTerminalRuleCall_1_0_0 extends UnassignedTextToken {

	public Additive_expression_PLUSTerminalRuleCall_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAdditive_expressionAccess().getPLUSTerminalRuleCall_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Additive_expression_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Additive_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// b+=multiplicative_expression
protected class Additive_expression_BAssignment_1_0_1 extends AssignmentToken  {
	
	public Additive_expression_BAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditive_expressionAccess().getBAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicative_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("b",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("b");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicative_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAdditive_expressionAccess().getBMultiplicative_expressionParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Additive_expression_PLUSTerminalRuleCall_1_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// DASH b+=multiplicative_expression
protected class Additive_expression_Group_1_1 extends GroupToken {
	
	public Additive_expression_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAdditive_expressionAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Additive_expression_BAssignment_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// DASH
protected class Additive_expression_DASHTerminalRuleCall_1_1_0 extends UnassignedTextToken {

	public Additive_expression_DASHTerminalRuleCall_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAdditive_expressionAccess().getDASHTerminalRuleCall_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Additive_expression_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Additive_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// b+=multiplicative_expression
protected class Additive_expression_BAssignment_1_1_1 extends AssignmentToken  {
	
	public Additive_expression_BAssignment_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditive_expressionAccess().getBAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicative_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("b",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("b");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicative_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAdditive_expressionAccess().getBMultiplicative_expressionParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Additive_expression_DASHTerminalRuleCall_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule additive_expression ****************/


/************ begin Rule relational_expression ****************
 *
 * relational_expression returns Expr:
 * 	a= //{ $expr = $a.expr; }
 * 	additive_expression (LTEQ b+=additive_expression //{ $expr = tm.binary(BinaryOpType.LTEQ, $expr, $b.expr); }
 * 	//{ $expr = tm.binary(BinaryOpType.GTEQ, $expr, $b.expr); }
 * 	//{ $expr = tm.binary(BinaryOpType.LT,   $expr, $b.expr); }
 * 	//{ $expr = tm.binary(BinaryOpType.GT,   $expr, $b.expr); }
 * 	| GTEQ b+=additive_expression | LT b+=additive_expression | GT b+=additive_expression)*;
 *
 **/

// a= //{ $expr = $a.expr; }
// additive_expression (LTEQ b+=additive_expression //{ $expr = tm.binary(BinaryOpType.LTEQ, $expr, $b.expr); }
// //{ $expr = tm.binary(BinaryOpType.GTEQ, $expr, $b.expr); }
// //{ $expr = tm.binary(BinaryOpType.LT,   $expr, $b.expr); }
// //{ $expr = tm.binary(BinaryOpType.GT,   $expr, $b.expr); }
// | GTEQ b+=additive_expression | LT b+=additive_expression | GT b+=additive_expression)*
protected class Relational_expression_Group extends GroupToken {
	
	public Relational_expression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelational_expressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expression_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Relational_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRelational_expressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a= //{ $expr = $a.expr; }
// additive_expression
protected class Relational_expression_AAssignment_0 extends AssignmentToken  {
	
	public Relational_expression_AAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelational_expressionAccess().getAAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Additive_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdditive_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRelational_expressionAccess().getAAdditive_expressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (LTEQ b+=additive_expression //{ $expr = tm.binary(BinaryOpType.LTEQ, $expr, $b.expr); }
// //{ $expr = tm.binary(BinaryOpType.GTEQ, $expr, $b.expr); }
// //{ $expr = tm.binary(BinaryOpType.LT,   $expr, $b.expr); }
// //{ $expr = tm.binary(BinaryOpType.GT,   $expr, $b.expr); }
// | GTEQ b+=additive_expression | LT b+=additive_expression | GT b+=additive_expression)*
protected class Relational_expression_Alternatives_1 extends AlternativesToken {

	public Relational_expression_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRelational_expressionAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expression_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Relational_expression_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Relational_expression_Group_1_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Relational_expression_Group_1_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// LTEQ b+=additive_expression
protected class Relational_expression_Group_1_0 extends GroupToken {
	
	public Relational_expression_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelational_expressionAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expression_BAssignment_1_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LTEQ
protected class Relational_expression_LTEQTerminalRuleCall_1_0_0 extends UnassignedTextToken {

	public Relational_expression_LTEQTerminalRuleCall_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelational_expressionAccess().getLTEQTerminalRuleCall_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expression_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Relational_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// b+=additive_expression
protected class Relational_expression_BAssignment_1_0_1 extends AssignmentToken  {
	
	public Relational_expression_BAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelational_expressionAccess().getBAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Additive_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("b",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("b");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdditive_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRelational_expressionAccess().getBAdditive_expressionParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Relational_expression_LTEQTerminalRuleCall_1_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// GTEQ b+=additive_expression
protected class Relational_expression_Group_1_1 extends GroupToken {
	
	public Relational_expression_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelational_expressionAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expression_BAssignment_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// GTEQ
protected class Relational_expression_GTEQTerminalRuleCall_1_1_0 extends UnassignedTextToken {

	public Relational_expression_GTEQTerminalRuleCall_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelational_expressionAccess().getGTEQTerminalRuleCall_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expression_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Relational_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// b+=additive_expression
protected class Relational_expression_BAssignment_1_1_1 extends AssignmentToken  {
	
	public Relational_expression_BAssignment_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelational_expressionAccess().getBAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Additive_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("b",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("b");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdditive_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRelational_expressionAccess().getBAdditive_expressionParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Relational_expression_GTEQTerminalRuleCall_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// LT b+=additive_expression
protected class Relational_expression_Group_1_2 extends GroupToken {
	
	public Relational_expression_Group_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelational_expressionAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expression_BAssignment_1_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LT
protected class Relational_expression_LTTerminalRuleCall_1_2_0 extends UnassignedTextToken {

	public Relational_expression_LTTerminalRuleCall_1_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelational_expressionAccess().getLTTerminalRuleCall_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expression_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Relational_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// b+=additive_expression
protected class Relational_expression_BAssignment_1_2_1 extends AssignmentToken  {
	
	public Relational_expression_BAssignment_1_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelational_expressionAccess().getBAssignment_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Additive_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("b",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("b");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdditive_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRelational_expressionAccess().getBAdditive_expressionParserRuleCall_1_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Relational_expression_LTTerminalRuleCall_1_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// GT b+=additive_expression
protected class Relational_expression_Group_1_3 extends GroupToken {
	
	public Relational_expression_Group_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelational_expressionAccess().getGroup_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expression_BAssignment_1_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// GT
protected class Relational_expression_GTTerminalRuleCall_1_3_0 extends UnassignedTextToken {

	public Relational_expression_GTTerminalRuleCall_1_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelational_expressionAccess().getGTTerminalRuleCall_1_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expression_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Relational_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// b+=additive_expression
protected class Relational_expression_BAssignment_1_3_1 extends AssignmentToken  {
	
	public Relational_expression_BAssignment_1_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelational_expressionAccess().getBAssignment_1_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Additive_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("b",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("b");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdditive_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRelational_expressionAccess().getBAdditive_expressionParserRuleCall_1_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Relational_expression_GTTerminalRuleCall_1_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule relational_expression ****************/


/************ begin Rule equality_expression ****************
 *
 * equality_expression returns Expr:
 * 	a= //{ $expr = $a.expr; }
 * 	relational_expression (EQEQ b+=relational_expression //{ $expr = tm.binary(BinaryOpType.EQEQ, $expr, $b.expr); }
 * 	//{ $expr = tm.binary(BinaryOpType.NEQ,  $expr, $b.expr); }
 * 	| NEQ b+=relational_expression)*;
 *
 **/

// a= //{ $expr = $a.expr; }
// relational_expression (EQEQ b+=relational_expression //{ $expr = tm.binary(BinaryOpType.EQEQ, $expr, $b.expr); }
// //{ $expr = tm.binary(BinaryOpType.NEQ,  $expr, $b.expr); }
// | NEQ b+=relational_expression)*
protected class Equality_expression_Group extends GroupToken {
	
	public Equality_expression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEquality_expressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Equality_expression_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Equality_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEquality_expressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a= //{ $expr = $a.expr; }
// relational_expression
protected class Equality_expression_AAssignment_0 extends AssignmentToken  {
	
	public Equality_expression_AAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEquality_expressionAccess().getAAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelational_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEquality_expressionAccess().getARelational_expressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (EQEQ b+=relational_expression //{ $expr = tm.binary(BinaryOpType.EQEQ, $expr, $b.expr); }
// //{ $expr = tm.binary(BinaryOpType.NEQ,  $expr, $b.expr); }
// | NEQ b+=relational_expression)*
protected class Equality_expression_Alternatives_1 extends AlternativesToken {

	public Equality_expression_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEquality_expressionAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Equality_expression_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Equality_expression_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// EQEQ b+=relational_expression
protected class Equality_expression_Group_1_0 extends GroupToken {
	
	public Equality_expression_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEquality_expressionAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Equality_expression_BAssignment_1_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// EQEQ
protected class Equality_expression_EQEQTerminalRuleCall_1_0_0 extends UnassignedTextToken {

	public Equality_expression_EQEQTerminalRuleCall_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEquality_expressionAccess().getEQEQTerminalRuleCall_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Equality_expression_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Equality_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// b+=relational_expression
protected class Equality_expression_BAssignment_1_0_1 extends AssignmentToken  {
	
	public Equality_expression_BAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEquality_expressionAccess().getBAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("b",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("b");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelational_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEquality_expressionAccess().getBRelational_expressionParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Equality_expression_EQEQTerminalRuleCall_1_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// NEQ b+=relational_expression
protected class Equality_expression_Group_1_1 extends GroupToken {
	
	public Equality_expression_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEquality_expressionAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Equality_expression_BAssignment_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// NEQ
protected class Equality_expression_NEQTerminalRuleCall_1_1_0 extends UnassignedTextToken {

	public Equality_expression_NEQTerminalRuleCall_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEquality_expressionAccess().getNEQTerminalRuleCall_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Equality_expression_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Equality_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// b+=relational_expression
protected class Equality_expression_BAssignment_1_1_1 extends AssignmentToken  {
	
	public Equality_expression_BAssignment_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEquality_expressionAccess().getBAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("b",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("b");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelational_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEquality_expressionAccess().getBRelational_expressionParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Equality_expression_NEQTerminalRuleCall_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule equality_expression ****************/


/************ begin Rule logical_and_expression ****************
 *
 * logical_and_expression returns Expr:
 * 	a= //{ $expr = $a.expr; }
 * 	equality_expression (AND b+= //{ $expr = tm.binary(BinaryOpType.AND, $expr, $b.expr); }
 * 	equality_expression)*;
 *
 **/

// a= //{ $expr = $a.expr; }
// equality_expression (AND b+= //{ $expr = tm.binary(BinaryOpType.AND, $expr, $b.expr); }
// equality_expression)*
protected class Logical_and_expression_Group extends GroupToken {
	
	public Logical_and_expression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLogical_and_expressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Logical_and_expression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Logical_and_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLogical_and_expressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a= //{ $expr = $a.expr; }
// equality_expression
protected class Logical_and_expression_AAssignment_0 extends AssignmentToken  {
	
	public Logical_and_expression_AAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLogical_and_expressionAccess().getAAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Equality_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEquality_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLogical_and_expressionAccess().getAEquality_expressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (AND b+= //{ $expr = tm.binary(BinaryOpType.AND, $expr, $b.expr); }
// equality_expression)*
protected class Logical_and_expression_Group_1 extends GroupToken {
	
	public Logical_and_expression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLogical_and_expressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Logical_and_expression_BAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// AND
protected class Logical_and_expression_ANDTerminalRuleCall_1_0 extends UnassignedTextToken {

	public Logical_and_expression_ANDTerminalRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLogical_and_expressionAccess().getANDTerminalRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Logical_and_expression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Logical_and_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// b+= //{ $expr = tm.binary(BinaryOpType.AND, $expr, $b.expr); }
// equality_expression
protected class Logical_and_expression_BAssignment_1_1 extends AssignmentToken  {
	
	public Logical_and_expression_BAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLogical_and_expressionAccess().getBAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Equality_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("b",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("b");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEquality_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLogical_and_expressionAccess().getBEquality_expressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Logical_and_expression_ANDTerminalRuleCall_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule logical_and_expression ****************/


/************ begin Rule logical_xor_expression ****************
 *
 * logical_xor_expression returns Expr:
 * 	a= //{ $expr = $a.expr; }
 * 	logical_and_expression (XOR b+= //{ $expr = tm.binary(BinaryOpType.XOR, $expr, $b.expr); }
 * 	logical_and_expression)*;
 *
 **/

// a= //{ $expr = $a.expr; }
// logical_and_expression (XOR b+= //{ $expr = tm.binary(BinaryOpType.XOR, $expr, $b.expr); }
// logical_and_expression)*
protected class Logical_xor_expression_Group extends GroupToken {
	
	public Logical_xor_expression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLogical_xor_expressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Logical_xor_expression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Logical_xor_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLogical_xor_expressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a= //{ $expr = $a.expr; }
// logical_and_expression
protected class Logical_xor_expression_AAssignment_0 extends AssignmentToken  {
	
	public Logical_xor_expression_AAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLogical_xor_expressionAccess().getAAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Logical_and_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLogical_and_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLogical_xor_expressionAccess().getALogical_and_expressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (XOR b+= //{ $expr = tm.binary(BinaryOpType.XOR, $expr, $b.expr); }
// logical_and_expression)*
protected class Logical_xor_expression_Group_1 extends GroupToken {
	
	public Logical_xor_expression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLogical_xor_expressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Logical_xor_expression_BAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// XOR
protected class Logical_xor_expression_XORTerminalRuleCall_1_0 extends UnassignedTextToken {

	public Logical_xor_expression_XORTerminalRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLogical_xor_expressionAccess().getXORTerminalRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Logical_xor_expression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Logical_xor_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// b+= //{ $expr = tm.binary(BinaryOpType.XOR, $expr, $b.expr); }
// logical_and_expression
protected class Logical_xor_expression_BAssignment_1_1 extends AssignmentToken  {
	
	public Logical_xor_expression_BAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLogical_xor_expressionAccess().getBAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Logical_and_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("b",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("b");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLogical_and_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLogical_xor_expressionAccess().getBLogical_and_expressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Logical_xor_expression_XORTerminalRuleCall_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule logical_xor_expression ****************/


/************ begin Rule logical_or_expression ****************
 *
 * logical_or_expression returns Expr:
 * 	a= //{ $expr = $a.expr; }
 * 	logical_xor_expression (OR b+= //{ $expr = tm.binary(BinaryOpType.OR, $expr, $b.expr); }
 * 	logical_xor_expression)*;
 *
 **/

// a= //{ $expr = $a.expr; }
// logical_xor_expression (OR b+= //{ $expr = tm.binary(BinaryOpType.OR, $expr, $b.expr); }
// logical_xor_expression)*
protected class Logical_or_expression_Group extends GroupToken {
	
	public Logical_or_expression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLogical_or_expressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Logical_or_expression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Logical_or_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLogical_or_expressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a= //{ $expr = $a.expr; }
// logical_xor_expression
protected class Logical_or_expression_AAssignment_0 extends AssignmentToken  {
	
	public Logical_or_expression_AAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLogical_or_expressionAccess().getAAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Logical_xor_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLogical_xor_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLogical_or_expressionAccess().getALogical_xor_expressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (OR b+= //{ $expr = tm.binary(BinaryOpType.OR, $expr, $b.expr); }
// logical_xor_expression)*
protected class Logical_or_expression_Group_1 extends GroupToken {
	
	public Logical_or_expression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLogical_or_expressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Logical_or_expression_BAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// OR
protected class Logical_or_expression_ORTerminalRuleCall_1_0 extends UnassignedTextToken {

	public Logical_or_expression_ORTerminalRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLogical_or_expressionAccess().getORTerminalRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Logical_or_expression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Logical_or_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// b+= //{ $expr = tm.binary(BinaryOpType.OR, $expr, $b.expr); }
// logical_xor_expression
protected class Logical_or_expression_BAssignment_1_1 extends AssignmentToken  {
	
	public Logical_or_expression_BAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLogical_or_expressionAccess().getBAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Logical_xor_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("b",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("b");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLogical_xor_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLogical_or_expressionAccess().getBLogical_xor_expressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Logical_or_expression_ORTerminalRuleCall_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule logical_or_expression ****************/


/************ begin Rule ternary_part ****************
 *
 * ternary_part:
 * 	QUESTION expression COLON a=assignment_expression;
 *
 **/

// QUESTION expression COLON a=assignment_expression
protected class Ternary_part_Group extends GroupToken {
	
	public Ternary_part_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTernary_partAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Ternary_part_AAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// QUESTION
protected class Ternary_part_QUESTIONTerminalRuleCall_0 extends UnassignedTextToken {

	public Ternary_part_QUESTIONTerminalRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTernary_partAccess().getQUESTIONTerminalRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// expression
protected class Ternary_part_ExpressionParserRuleCall_1 extends RuleCallToken {
	
	public Ternary_part_ExpressionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTernary_partAccess().getExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_EAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Expression_EAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Ternary_part_QUESTIONTerminalRuleCall_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// COLON
protected class Ternary_part_COLONTerminalRuleCall_2 extends UnassignedTextToken {

	public Ternary_part_COLONTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTernary_partAccess().getCOLONTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Ternary_part_ExpressionParserRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a=assignment_expression
protected class Ternary_part_AAssignment_3 extends AssignmentToken  {
	
	public Ternary_part_AAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTernary_partAccess().getAAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Assignment_expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignment_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTernary_partAccess().getAAssignment_expressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Ternary_part_COLONTerminalRuleCall_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ternary_part ****************/


/************ begin Rule conditional_expression ****************
 *
 * // TODO: handle ternary
 * conditional_expression returns Expr:
 * 	a=logical_or_expression //{ $expr = $a.expr; }
 * 	t=ternary_part?;
 *
 **/

// a=logical_or_expression //{ $expr = $a.expr; }
// t=ternary_part?
protected class Conditional_expression_Group extends GroupToken {
	
	public Conditional_expression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConditional_expressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Conditional_expression_TAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Conditional_expression_AAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConditional_expressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a=logical_or_expression
protected class Conditional_expression_AAssignment_0 extends AssignmentToken  {
	
	public Conditional_expression_AAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConditional_expressionAccess().getAAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Logical_or_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLogical_or_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConditional_expressionAccess().getALogical_or_expressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// //{ $expr = $a.expr; }
// t=ternary_part?
protected class Conditional_expression_TAssignment_1 extends AssignmentToken  {
	
	public Conditional_expression_TAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConditional_expressionAccess().getTAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Ternary_part_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("t",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("t");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTernary_partRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConditional_expressionAccess().getTTernary_partParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Conditional_expression_AAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule conditional_expression ****************/


/************ begin Rule assignment_expression ****************
 *
 * //{ $expr = $c.expr; }
 * assignment_expression returns Expr:
 * 	a=unary_expression op=assignment_operator b+=assignment_expression //{ $expr = tm.binary(BinaryOpType.forSymbol($op.text), $a.expr, $b.expr); }
 * 	| c=conditional_expression;
 *
 **/

// a=unary_expression op=assignment_operator b+=assignment_expression //{ $expr = tm.binary(BinaryOpType.forSymbol($op.text), $a.expr, $b.expr); }
// | c=conditional_expression
protected class Assignment_expression_Alternatives extends AlternativesToken {

	public Assignment_expression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAssignment_expressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Assignment_expression_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Assignment_expression_CAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssignment_expressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a=unary_expression op=assignment_operator b+=assignment_expression
protected class Assignment_expression_Group_0 extends GroupToken {
	
	public Assignment_expression_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignment_expressionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Assignment_expression_BAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a=unary_expression
protected class Assignment_expression_AAssignment_0_0 extends AssignmentToken  {
	
	public Assignment_expression_AAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignment_expressionAccess().getAAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unary_expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnary_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssignment_expressionAccess().getAUnary_expressionParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// op=assignment_operator
protected class Assignment_expression_OpAssignment_0_1 extends AssignmentToken  {
	
	public Assignment_expression_OpAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignment_expressionAccess().getOpAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Assignment_expression_AAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAssignment_expressionAccess().getOpAssignment_operatorParserRuleCall_0_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAssignment_expressionAccess().getOpAssignment_operatorParserRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}

// b+=assignment_expression
protected class Assignment_expression_BAssignment_0_2 extends AssignmentToken  {
	
	public Assignment_expression_BAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignment_expressionAccess().getBAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Assignment_expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("b",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("b");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignment_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssignment_expressionAccess().getBAssignment_expressionParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Assignment_expression_OpAssignment_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// c=conditional_expression
protected class Assignment_expression_CAssignment_1 extends AssignmentToken  {
	
	public Assignment_expression_CAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignment_expressionAccess().getCAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Conditional_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("c",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("c");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConditional_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssignment_expressionAccess().getCConditional_expressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule assignment_expression ****************/



/************ begin Rule expression ****************
 *
 * // TODO: handle expression lists?
 * //expression returns [List<Expr> exprList = new ArrayList<Expr>()]
 * //        : e=assignment_expression { $exprList.add($e.expr); }
 * //          (COMMA e=assignment_expression { $exprList.add($e.expr); })*
 * //        ;
 * expression returns Expr:
 * 	e= //{ $expr = $e.expr; }
 * 	assignment_expression;
 *
 **/

// e= //{ $expr = $e.expr; }
// assignment_expression
protected class Expression_EAssignment extends AssignmentToken  {
	
	public Expression_EAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionAccess().getEAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Assignment_expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignment_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpressionAccess().getEAssignment_expressionParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule expression ****************/


/************ begin Rule function_prototype ****************
 *
 * //returns [Function func]
 * //            {
 * //                Type type = Type.fromToken($t.text);
 * //                $func = symbols.declareFunction($id.text, type, (p != null) ? $p.paramList : null);
 * //            }
 * function_prototype:
 * 	t=type_specifier id=IDENTIFIER LEFT_PAREN p=parameter_declaration_list? RIGHT_PAREN;
 *
 **/

// t=type_specifier id=IDENTIFIER LEFT_PAREN p=parameter_declaration_list? RIGHT_PAREN
protected class Function_prototype_Group extends GroupToken {
	
	public Function_prototype_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunction_prototypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_prototype_RIGHT_PARENTerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunction_prototypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// t=type_specifier
protected class Function_prototype_TAssignment_0 extends AssignmentToken  {
	
	public Function_prototype_TAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunction_prototypeAccess().getTAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_specifier_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("t",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("t");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getType_specifierRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunction_prototypeAccess().getTType_specifierParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// id=IDENTIFIER
protected class Function_prototype_IdAssignment_1 extends AssignmentToken  {
	
	public Function_prototype_IdAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunction_prototypeAccess().getIdAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_prototype_TAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("id",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("id");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFunction_prototypeAccess().getIdIDENTIFIERTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFunction_prototypeAccess().getIdIDENTIFIERTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// LEFT_PAREN
protected class Function_prototype_LEFT_PARENTerminalRuleCall_2 extends UnassignedTextToken {

	public Function_prototype_LEFT_PARENTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFunction_prototypeAccess().getLEFT_PARENTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_prototype_IdAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// p=parameter_declaration_list?
protected class Function_prototype_PAssignment_3 extends AssignmentToken  {
	
	public Function_prototype_PAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunction_prototypeAccess().getPAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_declaration_list_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("p",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("p");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameter_declaration_listRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunction_prototypeAccess().getPParameter_declaration_listParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Function_prototype_LEFT_PARENTerminalRuleCall_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// RIGHT_PAREN
protected class Function_prototype_RIGHT_PARENTerminalRuleCall_4 extends UnassignedTextToken {

	public Function_prototype_RIGHT_PARENTerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFunction_prototypeAccess().getRIGHT_PARENTerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_prototype_PAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Function_prototype_LEFT_PARENTerminalRuleCall_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule function_prototype ****************/


/************ begin Rule parameter_declaration ****************
 *
 * //returns [Param param]
 * //            {
 * //                Type type = Type.fromToken($t.text);
 * //                $param = new Param($id.text, type);
 * //            }
 * parameter_declaration:
 * 	t=type_specifier id=IDENTIFIER;
 *
 **/

// t=type_specifier id=IDENTIFIER
protected class Parameter_declaration_Group extends GroupToken {
	
	public Parameter_declaration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameter_declarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_declaration_IdAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParameter_declarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// t=type_specifier
protected class Parameter_declaration_TAssignment_0 extends AssignmentToken  {
	
	public Parameter_declaration_TAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameter_declarationAccess().getTAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_specifier_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("t",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("t");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getType_specifierRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameter_declarationAccess().getTType_specifierParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// id=IDENTIFIER
protected class Parameter_declaration_IdAssignment_1 extends AssignmentToken  {
	
	public Parameter_declaration_IdAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameter_declarationAccess().getIdAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_declaration_TAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("id",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("id");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getParameter_declarationAccess().getIdIDENTIFIERTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getParameter_declarationAccess().getIdIDENTIFIERTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule parameter_declaration ****************/


/************ begin Rule parameter_declaration_list ****************
 *
 * //returns [List<Param> paramList = new ArrayList<Param>()]
 * parameter_declaration_list:
 * 	p+= //{ $paramList.add($p.param); }
 * 	parameter_declaration (COMMA p+=parameter_declaration)* / *{ $paramList.add($p.param); }* /;
 *
 **/

// p+= //{ $paramList.add($p.param); }
// parameter_declaration (COMMA p+=parameter_declaration)* / *{ $paramList.add($p.param); }* /
protected class Parameter_declaration_list_Group extends GroupToken {
	
	public Parameter_declaration_list_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameter_declaration_listAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_declaration_list_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Parameter_declaration_list_PAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParameter_declaration_listRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// p+= //{ $paramList.add($p.param); }
// parameter_declaration
protected class Parameter_declaration_list_PAssignment_0 extends AssignmentToken  {
	
	public Parameter_declaration_list_PAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameter_declaration_listAccess().getPAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_declaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("p",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("p");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameter_declarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameter_declaration_listAccess().getPParameter_declarationParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (COMMA p+=parameter_declaration)*
protected class Parameter_declaration_list_Group_1 extends GroupToken {
	
	public Parameter_declaration_list_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameter_declaration_listAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_declaration_list_PAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class Parameter_declaration_list_COMMATerminalRuleCall_1_0 extends UnassignedTextToken {

	public Parameter_declaration_list_COMMATerminalRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParameter_declaration_listAccess().getCOMMATerminalRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_declaration_list_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Parameter_declaration_list_PAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// p+=parameter_declaration
protected class Parameter_declaration_list_PAssignment_1_1 extends AssignmentToken  {
	
	public Parameter_declaration_list_PAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameter_declaration_listAccess().getPAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_declaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("p",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("p");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameter_declarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameter_declaration_listAccess().getPParameter_declarationParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Parameter_declaration_list_COMMATerminalRuleCall_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule parameter_declaration_list ****************/


/************ begin Rule declaration_identifier_and_init ****************
 *
 * //returns [String name, Expr arrayInit, Expr init]
 * declaration_identifier_and_init:
 * 	id= //{ $name = $id.text; }
 * 	IDENTIFIER (LEFT_BRACKET ae=constant_expression / *{ $arrayInit = $ae.expr; }* / RIGHT_BRACKET)? (EQUAL e=initializer)?
 * 	/ *{ $init = $e.expr; }* /;
 *
 **/

// id= //{ $name = $id.text; }
// IDENTIFIER (LEFT_BRACKET ae=constant_expression / *{ $arrayInit = $ae.expr; }* / RIGHT_BRACKET)? (EQUAL e=initializer)?
// / *{ $init = $e.expr; }* /
protected class Declaration_identifier_and_init_Group extends GroupToken {
	
	public Declaration_identifier_and_init_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclaration_identifier_and_initAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_identifier_and_init_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declaration_identifier_and_init_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Declaration_identifier_and_init_IdAssignment_0(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDeclaration_identifier_and_initRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// id= //{ $name = $id.text; }
// IDENTIFIER
protected class Declaration_identifier_and_init_IdAssignment_0 extends AssignmentToken  {
	
	public Declaration_identifier_and_init_IdAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclaration_identifier_and_initAccess().getIdAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("id",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("id");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDeclaration_identifier_and_initAccess().getIdIDENTIFIERTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDeclaration_identifier_and_initAccess().getIdIDENTIFIERTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// (LEFT_BRACKET ae=constant_expression / *{ $arrayInit = $ae.expr; }* / RIGHT_BRACKET)?
protected class Declaration_identifier_and_init_Group_1 extends GroupToken {
	
	public Declaration_identifier_and_init_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclaration_identifier_and_initAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_identifier_and_init_RIGHT_BRACKETTerminalRuleCall_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LEFT_BRACKET
protected class Declaration_identifier_and_init_LEFT_BRACKETTerminalRuleCall_1_0 extends UnassignedTextToken {

	public Declaration_identifier_and_init_LEFT_BRACKETTerminalRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDeclaration_identifier_and_initAccess().getLEFT_BRACKETTerminalRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_identifier_and_init_IdAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ae=constant_expression
protected class Declaration_identifier_and_init_AeAssignment_1_1 extends AssignmentToken  {
	
	public Declaration_identifier_and_init_AeAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclaration_identifier_and_initAccess().getAeAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constant_expression_CAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ae",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ae");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstant_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDeclaration_identifier_and_initAccess().getAeConstant_expressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Declaration_identifier_and_init_LEFT_BRACKETTerminalRuleCall_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// / *{ $arrayInit = $ae.expr; }* / RIGHT_BRACKET
protected class Declaration_identifier_and_init_RIGHT_BRACKETTerminalRuleCall_1_2 extends UnassignedTextToken {

	public Declaration_identifier_and_init_RIGHT_BRACKETTerminalRuleCall_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDeclaration_identifier_and_initAccess().getRIGHT_BRACKETTerminalRuleCall_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_identifier_and_init_AeAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// (EQUAL e=initializer)?
protected class Declaration_identifier_and_init_Group_2 extends GroupToken {
	
	public Declaration_identifier_and_init_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclaration_identifier_and_initAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_identifier_and_init_EAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// EQUAL
protected class Declaration_identifier_and_init_EQUALTerminalRuleCall_2_0 extends UnassignedTextToken {

	public Declaration_identifier_and_init_EQUALTerminalRuleCall_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDeclaration_identifier_and_initAccess().getEQUALTerminalRuleCall_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_identifier_and_init_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declaration_identifier_and_init_IdAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// e=initializer
protected class Declaration_identifier_and_init_EAssignment_2_1 extends AssignmentToken  {
	
	public Declaration_identifier_and_init_EAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclaration_identifier_and_initAccess().getEAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Initializer_EAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInitializerRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDeclaration_identifier_and_initAccess().getEInitializerParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Declaration_identifier_and_init_EQUALTerminalRuleCall_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule declaration_identifier_and_init ****************/


/************ begin Rule single_declaration ****************
 *
 * //returns [VarDecl decl]
 * //          {
 * //              int arraySize = -1;
 * //              Expr ainit = $d.arrayInit;
 * //              if (ainit != null) {
 * //                  if (ainit instanceof LiteralExpr) {
 * //                      Object val = ((LiteralExpr)ainit).getValue();
 * //                      if (!(val instanceof Integer)) {
 * //                          throw new RuntimeException("Array size must be an integer");
 * //                      }
 * //                      arraySize = ((Integer)val).intValue();
 * //                  } else if (ainit instanceof VariableExpr) {
 * //                      Variable var = ((VariableExpr)ainit).getVariable();
 * //                      Object val = var.getConstValue();
 * //                      if (!(val instanceof Integer) || var.getQualifier() != Qualifier.CONST) {
 * //                          throw new RuntimeException("Array size must be a constant integer");
 * //                      }
 * //                      arraySize = ((Integer)val).intValue();
 * //                  }
 * //              }
 * //
 * //              Object constValue = null;
 * //              if ($t.qual == Qualifier.CONST) {
 * //                  Expr cinit = $d.init;
 * //                  if (cinit == null) {
 * //                      throw new RuntimeException("Constant value must be initialized");
 * //                  }
 * //                  // TODO: for now, allow some basic expressions on the rhs
 * //                  // of the constant declaration...
 * //                  //if (!(cinit instanceof LiteralExpr)) {
 * //                  //    throw new RuntimeException("Constant initializer must be a literal (for now)");
 * //                  //}
 * //                  Type ctype = cinit.getResultType();
 * //                  if (ctype != $t.type) {
 * //                      throw new RuntimeException("Constant type must match that of initializer");
 * //                  }
 * //                  if (cinit instanceof LiteralExpr) {
 * //                      constValue = ((LiteralExpr)cinit).getValue();
 * //                  } else {
 * //                      // TODO: This is gross, but to support complex constant
 * //                      // initializers (such as "const FOO = BAR / 42.0;") we
 * //                      // will just save the full text of the rhs and hope that
 * //                      // the backend does the right thing with it.  The real
 * //                      // solution obviously would be to evaluate the expression
 * //                      // now and reduce it to a single value.
 * //                      constValue = $d.init.toString();
 * //                  }
 * //              }
 * //
 * //              Variable var =
 * //                  symbols.declareVariable($d.name,
 * //                                          $t.type, $t.qual, $t.precision,
 * //                                          arraySize, constValue);
 * //              $decl = tm.varDecl(var, $d.init);
 * //          }
 * single_declaration:
 * 	t=fully_specified_type d=declaration_identifier_and_init;
 *
 **/

// t=fully_specified_type d=declaration_identifier_and_init
protected class Single_declaration_Group extends GroupToken {
	
	public Single_declaration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSingle_declarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Single_declaration_DAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSingle_declarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// t=fully_specified_type
protected class Single_declaration_TAssignment_0 extends AssignmentToken  {
	
	public Single_declaration_TAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSingle_declarationAccess().getTAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Fully_specified_type_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("t",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("t");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFully_specified_typeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSingle_declarationAccess().getTFully_specified_typeParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// d=declaration_identifier_and_init
protected class Single_declaration_DAssignment_1 extends AssignmentToken  {
	
	public Single_declaration_DAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSingle_declarationAccess().getDAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_identifier_and_init_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("d",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("d");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclaration_identifier_and_initRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSingle_declarationAccess().getDDeclaration_identifier_and_initParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Single_declaration_TAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule single_declaration ****************/


/************ begin Rule declaration ****************
 *
 * //returns [List<VarDecl> declList = new ArrayList<VarDecl>()]
 * declaration:
 * 	s= //{ $declList.add($s.decl); }
 * 	single_declaration (COMMA d+=declaration_identifier_and_init)* //          {
 * 	//              Variable base = $s.decl.getVariable();
 * 	//              Variable var =
 * 	//                  symbols.declareVariable($d.name,
 * 	//                                          base.getType(),
 * 	//                                          base.getQualifier(),
 * 	//                                          base.getPrecision());
 * 	//              $declList.add(tm.varDecl(var, $d.init));
 * 	//          }
 * 	SEMICOLON;
 *
 **/

// s= //{ $declList.add($s.decl); }
// single_declaration (COMMA d+=declaration_identifier_and_init)* //          {
// //              Variable base = $s.decl.getVariable();
// //              Variable var =
// //                  symbols.declareVariable($d.name,
// //                                          base.getType(),
// //                                          base.getQualifier(),
// //                                          base.getPrecision());
// //              $declList.add(tm.varDecl(var, $d.init));
// //          }
// SEMICOLON
protected class Declaration_Group extends GroupToken {
	
	public Declaration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_SEMICOLONTerminalRuleCall_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// s= //{ $declList.add($s.decl); }
// single_declaration
protected class Declaration_SAssignment_0 extends AssignmentToken  {
	
	public Declaration_SAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclarationAccess().getSAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Single_declaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("s",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("s");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSingle_declarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDeclarationAccess().getSSingle_declarationParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (COMMA d+=declaration_identifier_and_init)*
protected class Declaration_Group_1 extends GroupToken {
	
	public Declaration_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclarationAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_DAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class Declaration_COMMATerminalRuleCall_1_0 extends UnassignedTextToken {

	public Declaration_COMMATerminalRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDeclarationAccess().getCOMMATerminalRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declaration_SAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// d+=declaration_identifier_and_init
protected class Declaration_DAssignment_1_1 extends AssignmentToken  {
	
	public Declaration_DAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclarationAccess().getDAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_identifier_and_init_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("d",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("d");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclaration_identifier_and_initRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDeclarationAccess().getDDeclaration_identifier_and_initParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Declaration_COMMATerminalRuleCall_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// SEMICOLON
protected class Declaration_SEMICOLONTerminalRuleCall_2 extends UnassignedTextToken {

	public Declaration_SEMICOLONTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDeclarationAccess().getSEMICOLONTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declaration_SAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule declaration ****************/


/************ begin Rule fully_specified_type ****************
 *
 * // From GLSL spec...
 * // Grammar Note:  No 'enum', or 'typedef'. 
 * //returns [Qualifier qual, Precision precision, Type type]
 * //            {
 * //                $type = Type.fromToken($ts.text);
 * //            }
 * fully_specified_type:
 * 	tq=type_qualifier tp=type_precision ts=type_specifier //            {
 * 	//                $qual = Qualifier.fromToken($tq.text);
 * 	//                $precision = Precision.fromToken($tp.text);
 * 	//                $type = Type.fromToken($ts.text);
 * 	//            }
 * 	//            {
 * 	//                $qual = Qualifier.fromToken($tq.text);
 * 	//                $type = Type.fromToken($ts.text);
 * 	//            }
 * 	//            {
 * 	//                $precision = Precision.fromToken($tp.text);
 * 	//                $type = Type.fromToken($ts.text);
 * 	//            }
 * 	| tq=type_qualifier ts=type_specifier | tp=type_precision ts=type_specifier | ts=type_specifier;
 *
 **/

// tq=type_qualifier tp=type_precision ts=type_specifier //            {
// //                $qual = Qualifier.fromToken($tq.text);
// //                $precision = Precision.fromToken($tp.text);
// //                $type = Type.fromToken($ts.text);
// //            }
// //            {
// //                $qual = Qualifier.fromToken($tq.text);
// //                $type = Type.fromToken($ts.text);
// //            }
// //            {
// //                $precision = Precision.fromToken($tp.text);
// //                $type = Type.fromToken($ts.text);
// //            }
// | tq=type_qualifier ts=type_specifier | tp=type_precision ts=type_specifier | ts=type_specifier
protected class Fully_specified_type_Alternatives extends AlternativesToken {

	public Fully_specified_type_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFully_specified_typeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Fully_specified_type_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Fully_specified_type_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Fully_specified_type_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Fully_specified_type_TsAssignment_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFully_specified_typeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// tq=type_qualifier tp=type_precision ts=type_specifier
protected class Fully_specified_type_Group_0 extends GroupToken {
	
	public Fully_specified_type_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFully_specified_typeAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Fully_specified_type_TsAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// tq=type_qualifier
protected class Fully_specified_type_TqAssignment_0_0 extends AssignmentToken  {
	
	public Fully_specified_type_TqAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFully_specified_typeAccess().getTqAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tq",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tq");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFully_specified_typeAccess().getTqType_qualifierParserRuleCall_0_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getFully_specified_typeAccess().getTqType_qualifierParserRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// tp=type_precision
protected class Fully_specified_type_TpAssignment_0_1 extends AssignmentToken  {
	
	public Fully_specified_type_TpAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFully_specified_typeAccess().getTpAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Fully_specified_type_TqAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tp",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tp");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFully_specified_typeAccess().getTpType_precisionParserRuleCall_0_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getFully_specified_typeAccess().getTpType_precisionParserRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}

// ts=type_specifier
protected class Fully_specified_type_TsAssignment_0_2 extends AssignmentToken  {
	
	public Fully_specified_type_TsAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFully_specified_typeAccess().getTsAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_specifier_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ts",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getType_specifierRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFully_specified_typeAccess().getTsType_specifierParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Fully_specified_type_TpAssignment_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// tq=type_qualifier ts=type_specifier
protected class Fully_specified_type_Group_1 extends GroupToken {
	
	public Fully_specified_type_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFully_specified_typeAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Fully_specified_type_TsAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// tq=type_qualifier
protected class Fully_specified_type_TqAssignment_1_0 extends AssignmentToken  {
	
	public Fully_specified_type_TqAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFully_specified_typeAccess().getTqAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tq",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tq");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFully_specified_typeAccess().getTqType_qualifierParserRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getFully_specified_typeAccess().getTqType_qualifierParserRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// ts=type_specifier
protected class Fully_specified_type_TsAssignment_1_1 extends AssignmentToken  {
	
	public Fully_specified_type_TsAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFully_specified_typeAccess().getTsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_specifier_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ts",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getType_specifierRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFully_specified_typeAccess().getTsType_specifierParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Fully_specified_type_TqAssignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// tp=type_precision ts=type_specifier
protected class Fully_specified_type_Group_2 extends GroupToken {
	
	public Fully_specified_type_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFully_specified_typeAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Fully_specified_type_TsAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// tp=type_precision
protected class Fully_specified_type_TpAssignment_2_0 extends AssignmentToken  {
	
	public Fully_specified_type_TpAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFully_specified_typeAccess().getTpAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tp",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tp");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFully_specified_typeAccess().getTpType_precisionParserRuleCall_2_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getFully_specified_typeAccess().getTpType_precisionParserRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// ts=type_specifier
protected class Fully_specified_type_TsAssignment_2_1 extends AssignmentToken  {
	
	public Fully_specified_type_TsAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFully_specified_typeAccess().getTsAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_specifier_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ts",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getType_specifierRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFully_specified_typeAccess().getTsType_specifierParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Fully_specified_type_TpAssignment_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ts=type_specifier
protected class Fully_specified_type_TsAssignment_3 extends AssignmentToken  {
	
	public Fully_specified_type_TsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFully_specified_typeAccess().getTsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_specifier_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ts",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getType_specifierRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFully_specified_typeAccess().getTsType_specifierParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule fully_specified_type ****************/




/************ begin Rule type_specifier ****************
 *
 * type_specifier:
 * 	{type_specifier} type_specifier_nonarray array_brackets?;
 *
 **/

// {type_specifier} type_specifier_nonarray array_brackets?
protected class Type_specifier_Group extends GroupToken {
	
	public Type_specifier_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getType_specifierAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_specifier_Array_bracketsParserRuleCall_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Type_specifier_Type_specifier_nonarrayParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstant_expressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getType_specifierAccess().getType_specifierAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {type_specifier}
protected class Type_specifier_Type_specifierAction_0 extends ActionToken  {

	public Type_specifier_Type_specifierAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getType_specifierAccess().getType_specifierAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// type_specifier_nonarray
protected class Type_specifier_Type_specifier_nonarrayParserRuleCall_1 extends UnassignedTextToken {

	public Type_specifier_Type_specifier_nonarrayParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getType_specifierAccess().getType_specifier_nonarrayParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_specifier_Type_specifierAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// array_brackets?
protected class Type_specifier_Array_bracketsParserRuleCall_2 extends RuleCallToken {
	
	public Type_specifier_Array_bracketsParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getType_specifierAccess().getArray_bracketsParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Array_brackets_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Array_brackets_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_specifier_Type_specifier_nonarrayParserRuleCall_1(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule type_specifier ****************/


/************ begin Rule array_brackets ****************
 *
 * array_brackets:
 * 	LEFT_BRACKET constant_expression RIGHT_BRACKET;
 *
 **/

// LEFT_BRACKET constant_expression RIGHT_BRACKET
protected class Array_brackets_Group extends GroupToken {
	
	public Array_brackets_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArray_bracketsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Array_brackets_RIGHT_BRACKETTerminalRuleCall_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstant_expressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// LEFT_BRACKET
protected class Array_brackets_LEFT_BRACKETTerminalRuleCall_0 extends UnassignedTextToken {

	public Array_brackets_LEFT_BRACKETTerminalRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArray_bracketsAccess().getLEFT_BRACKETTerminalRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// constant_expression
protected class Array_brackets_Constant_expressionParserRuleCall_1 extends RuleCallToken {
	
	public Array_brackets_Constant_expressionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArray_bracketsAccess().getConstant_expressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constant_expression_CAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Constant_expression_CAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Array_brackets_LEFT_BRACKETTerminalRuleCall_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// RIGHT_BRACKET
protected class Array_brackets_RIGHT_BRACKETTerminalRuleCall_2 extends UnassignedTextToken {

	public Array_brackets_RIGHT_BRACKETTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArray_bracketsAccess().getRIGHT_BRACKETTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Array_brackets_Constant_expressionParserRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule array_brackets ****************/



/************ begin Rule initializer ****************
 *
 * //returns [Expr expr]
 * initializer:
 * 	e= //{ $expr = $e.expr; }
 * 	assignment_expression;
 *
 **/

// e= //{ $expr = $e.expr; }
// assignment_expression
protected class Initializer_EAssignment extends AssignmentToken  {
	
	public Initializer_EAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInitializerAccess().getEAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Assignment_expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInitializerRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignment_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInitializerAccess().getEAssignment_expressionParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule initializer ****************/


/************ begin Rule declaration_statement ****************
 *
 * //returns [Stmt stmt]
 * declaration_statement:
 * 	d= //{ $stmt = tm.declStmt($d.declList); }
 * 	declaration;
 *
 **/

// d= //{ $stmt = tm.declStmt($d.declList); }
// declaration
protected class Declaration_statement_DAssignment extends AssignmentToken  {
	
	public Declaration_statement_DAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclaration_statementAccess().getDAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDeclaration_statementRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("d",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("d");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDeclaration_statementAccess().getDDeclarationParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule declaration_statement ****************/


/************ begin Rule statement ****************
 *
 * //returns [Stmt stmt]
 * statement:
 * 	c= //{ $stmt = $c.stmt; }
 * 	compound_statement | s= //{ $stmt = $s.stmt; }
 * 	simple_statement;
 *
 **/

// c= //{ $stmt = $c.stmt; }
// compound_statement | s= //{ $stmt = $s.stmt; }
// simple_statement
protected class Statement_Alternatives extends AlternativesToken {

	public Statement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStatementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_CAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statement_SAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// c= //{ $stmt = $c.stmt; }
// compound_statement
protected class Statement_CAssignment_0 extends AssignmentToken  {
	
	public Statement_CAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementAccess().getCAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compound_statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("c",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("c");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompound_statementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatementAccess().getCCompound_statementParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// s= //{ $stmt = $s.stmt; }
// simple_statement
protected class Statement_SAssignment_1 extends AssignmentToken  {
	
	public Statement_SAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementAccess().getSAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Simple_statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("s",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("s");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimple_statementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatementAccess().getSSimple_statementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule statement ****************/


/************ begin Rule simple_statement ****************
 *
 * // From GLSL spec...
 * // Grammar Note:  No labeled statements; 'goto' is not supported. 
 * //returns [Stmt stmt]
 * simple_statement:
 * 	d= //{ $stmt = $d.stmt; }
 * 	declaration_statement | e= //{ $stmt = $e.stmt; }
 * 	expression_statement | s= //{ $stmt = $s.stmt; }
 * 	selection_statement | i= //{ $stmt = $i.stmt; }
 * 	iteration_statement | j= //{ $stmt = $j.stmt; }
 * 	jump_statement;
 *
 **/

// d= //{ $stmt = $d.stmt; }
// declaration_statement | e= //{ $stmt = $e.stmt; }
// expression_statement | s= //{ $stmt = $s.stmt; }
// selection_statement | i= //{ $stmt = $i.stmt; }
// iteration_statement | j= //{ $stmt = $j.stmt; }
// jump_statement
protected class Simple_statement_Alternatives extends AlternativesToken {

	public Simple_statement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSimple_statementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Simple_statement_DAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Simple_statement_EAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Simple_statement_SAssignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Simple_statement_IAssignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Simple_statement_JAssignment_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimple_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// d= //{ $stmt = $d.stmt; }
// declaration_statement
protected class Simple_statement_DAssignment_0 extends AssignmentToken  {
	
	public Simple_statement_DAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimple_statementAccess().getDAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_statement_DAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("d",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("d");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclaration_statementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimple_statementAccess().getDDeclaration_statementParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// e= //{ $stmt = $e.stmt; }
// expression_statement
protected class Simple_statement_EAssignment_1 extends AssignmentToken  {
	
	public Simple_statement_EAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimple_statementAccess().getEAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_statementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimple_statementAccess().getEExpression_statementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// s= //{ $stmt = $s.stmt; }
// selection_statement
protected class Simple_statement_SAssignment_2 extends AssignmentToken  {
	
	public Simple_statement_SAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimple_statementAccess().getSAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Selection_statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("s",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("s");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSelection_statementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimple_statementAccess().getSSelection_statementParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// i= //{ $stmt = $i.stmt; }
// iteration_statement
protected class Simple_statement_IAssignment_3 extends AssignmentToken  {
	
	public Simple_statement_IAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimple_statementAccess().getIAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("i",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("i");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIteration_statementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimple_statementAccess().getIIteration_statementParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// j= //{ $stmt = $j.stmt; }
// jump_statement
protected class Simple_statement_JAssignment_4 extends AssignmentToken  {
	
	public Simple_statement_JAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimple_statementAccess().getJAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Jump_statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("j",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("j");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getJump_statementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimple_statementAccess().getJJump_statementParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule simple_statement ****************/


/************ begin Rule compound_statement ****************
 *
 * //returns [Stmt stmt]
 * //@init {
 * //    List<Stmt> stmtList = new ArrayList<Stmt>();
 * //}
 * //{ $stmt = tm.compoundStmt(stmtList); }
 * compound_statement:
 * 	{compound_statement} LEFT_BRACE s+=statement* / *{ stmtList.add($s.stmt); }* / RIGHT_BRACE;
 *
 **/

// {compound_statement} LEFT_BRACE s+=statement* / *{ stmtList.add($s.stmt); }* / RIGHT_BRACE
protected class Compound_statement_Group extends GroupToken {
	
	public Compound_statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompound_statementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compound_statement_RIGHT_BRACETerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCompound_statementAccess().getCompound_statementAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {compound_statement}
protected class Compound_statement_Compound_statementAction_0 extends ActionToken  {

	public Compound_statement_Compound_statementAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCompound_statementAccess().getCompound_statementAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// LEFT_BRACE
protected class Compound_statement_LEFT_BRACETerminalRuleCall_1 extends UnassignedTextToken {

	public Compound_statement_LEFT_BRACETerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompound_statementAccess().getLEFT_BRACETerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compound_statement_Compound_statementAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// s+=statement*
protected class Compound_statement_SAssignment_2 extends AssignmentToken  {
	
	public Compound_statement_SAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompound_statementAccess().getSAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("s",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("s");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCompound_statementAccess().getSStatementParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Compound_statement_SAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Compound_statement_LEFT_BRACETerminalRuleCall_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// RIGHT_BRACE
protected class Compound_statement_RIGHT_BRACETerminalRuleCall_3 extends UnassignedTextToken {

	public Compound_statement_RIGHT_BRACETerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompound_statementAccess().getRIGHT_BRACETerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compound_statement_SAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Compound_statement_LEFT_BRACETerminalRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule compound_statement ****************/


/************ begin Rule statement_no_new_scope ****************
 *
 * //returns [Stmt stmt]
 * statement_no_new_scope:
 * 	c= //{ $stmt = $c.stmt; }
 * 	compound_statement_no_new_scope | s= //{ $stmt = $s.stmt; }
 * 	simple_statement;
 *
 **/

// c= //{ $stmt = $c.stmt; }
// compound_statement_no_new_scope | s= //{ $stmt = $s.stmt; }
// simple_statement
protected class Statement_no_new_scope_Alternatives extends AlternativesToken {

	public Statement_no_new_scope_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStatement_no_new_scopeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_no_new_scope_CAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statement_no_new_scope_SAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatement_no_new_scopeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// c= //{ $stmt = $c.stmt; }
// compound_statement_no_new_scope
protected class Statement_no_new_scope_CAssignment_0 extends AssignmentToken  {
	
	public Statement_no_new_scope_CAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatement_no_new_scopeAccess().getCAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compound_statement_no_new_scope_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("c",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("c");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompound_statement_no_new_scopeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatement_no_new_scopeAccess().getCCompound_statement_no_new_scopeParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// s= //{ $stmt = $s.stmt; }
// simple_statement
protected class Statement_no_new_scope_SAssignment_1 extends AssignmentToken  {
	
	public Statement_no_new_scope_SAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatement_no_new_scopeAccess().getSAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Simple_statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("s",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("s");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimple_statementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatement_no_new_scopeAccess().getSSimple_statementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule statement_no_new_scope ****************/


/************ begin Rule compound_statement_no_new_scope ****************
 *
 * //returns [Stmt stmt]
 * //@init {
 * //    List<Stmt> stmtList = new ArrayList<Stmt>();
 * //}
 * //{ $stmt = tm.compoundStmt(stmtList); }
 * compound_statement_no_new_scope:
 * 	{compound_statement_no_new_scope} LEFT_BRACE s+=statement* / *{ stmtList.add($s.stmt); }* / RIGHT_BRACE;
 *
 **/

// {compound_statement_no_new_scope} LEFT_BRACE s+=statement* / *{ stmtList.add($s.stmt); }* / RIGHT_BRACE
protected class Compound_statement_no_new_scope_Group extends GroupToken {
	
	public Compound_statement_no_new_scope_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompound_statement_no_new_scopeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compound_statement_no_new_scope_RIGHT_BRACETerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCompound_statement_no_new_scopeAccess().getCompound_statement_no_new_scopeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {compound_statement_no_new_scope}
protected class Compound_statement_no_new_scope_Compound_statement_no_new_scopeAction_0 extends ActionToken  {

	public Compound_statement_no_new_scope_Compound_statement_no_new_scopeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCompound_statement_no_new_scopeAccess().getCompound_statement_no_new_scopeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// LEFT_BRACE
protected class Compound_statement_no_new_scope_LEFT_BRACETerminalRuleCall_1 extends UnassignedTextToken {

	public Compound_statement_no_new_scope_LEFT_BRACETerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompound_statement_no_new_scopeAccess().getLEFT_BRACETerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compound_statement_no_new_scope_Compound_statement_no_new_scopeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// s+=statement*
protected class Compound_statement_no_new_scope_SAssignment_2 extends AssignmentToken  {
	
	public Compound_statement_no_new_scope_SAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompound_statement_no_new_scopeAccess().getSAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("s",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("s");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCompound_statement_no_new_scopeAccess().getSStatementParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Compound_statement_no_new_scope_SAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Compound_statement_no_new_scope_LEFT_BRACETerminalRuleCall_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// RIGHT_BRACE
protected class Compound_statement_no_new_scope_RIGHT_BRACETerminalRuleCall_3 extends UnassignedTextToken {

	public Compound_statement_no_new_scope_RIGHT_BRACETerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompound_statement_no_new_scopeAccess().getRIGHT_BRACETerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compound_statement_no_new_scope_SAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Compound_statement_no_new_scope_LEFT_BRACETerminalRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule compound_statement_no_new_scope ****************/


/************ begin Rule expression_statement ****************
 *
 * //returns [Stmt stmt]
 * expression_statement:
 * 	{expression_statement} SEMICOLON //{ $stmt = tm.exprStmt(null); }
 * 	//{ $stmt = tm.exprStmt($e.expr); }
 * 	| e=expression SEMICOLON;
 *
 **/

// {expression_statement} SEMICOLON //{ $stmt = tm.exprStmt(null); }
// //{ $stmt = tm.exprStmt($e.expr); }
// | e=expression SEMICOLON
protected class Expression_statement_Alternatives extends AlternativesToken {

	public Expression_statement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExpression_statementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_statement_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_statement_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {expression_statement} SEMICOLON
protected class Expression_statement_Group_0 extends GroupToken {
	
	public Expression_statement_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_statementAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_statement_SEMICOLONTerminalRuleCall_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {expression_statement}
protected class Expression_statement_Expression_statementAction_0_0 extends ActionToken  {

	public Expression_statement_Expression_statementAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExpression_statementAccess().getExpression_statementAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// SEMICOLON
protected class Expression_statement_SEMICOLONTerminalRuleCall_0_1 extends UnassignedTextToken {

	public Expression_statement_SEMICOLONTerminalRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpression_statementAccess().getSEMICOLONTerminalRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_statement_Expression_statementAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// e=expression SEMICOLON
protected class Expression_statement_Group_1 extends GroupToken {
	
	public Expression_statement_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_statementAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_statement_SEMICOLONTerminalRuleCall_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// e=expression
protected class Expression_statement_EAssignment_1_0 extends AssignmentToken  {
	
	public Expression_statement_EAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_statementAccess().getEAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_EAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpression_statementAccess().getEExpressionParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// SEMICOLON
protected class Expression_statement_SEMICOLONTerminalRuleCall_1_1 extends UnassignedTextToken {

	public Expression_statement_SEMICOLONTerminalRuleCall_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpression_statementAccess().getSEMICOLONTerminalRuleCall_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_statement_EAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule expression_statement ****************/


/************ begin Rule constant_expression ****************
 *
 * //returns [Expr expr]
 * constant_expression:
 * 	c= //{ $expr = $c.expr; }
 * 	conditional_expression;
 *
 **/

// c= //{ $expr = $c.expr; }
// conditional_expression
protected class Constant_expression_CAssignment extends AssignmentToken  {
	
	public Constant_expression_CAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstant_expressionAccess().getCAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Conditional_expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstant_expressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("c",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("c");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConditional_expressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstant_expressionAccess().getCConditional_expressionParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule constant_expression ****************/


/************ begin Rule selection_statement ****************
 *
 * //returns [Stmt stmt]
 * //{ $stmt = tm.selectStmt($e.expr, $a.stmt, (b != null) ? $b.stmt : null); }
 * selection_statement:
 * 	IF LEFT_PAREN e=expression RIGHT_PAREN a=statement (ELSE b=statement)?;
 *
 **/

// IF LEFT_PAREN e=expression RIGHT_PAREN a=statement (ELSE b=statement)?
protected class Selection_statement_Group extends GroupToken {
	
	public Selection_statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelection_statementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Selection_statement_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Selection_statement_AAssignment_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelection_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// IF
protected class Selection_statement_IFTerminalRuleCall_0 extends UnassignedTextToken {

	public Selection_statement_IFTerminalRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSelection_statementAccess().getIFTerminalRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// LEFT_PAREN
protected class Selection_statement_LEFT_PARENTerminalRuleCall_1 extends UnassignedTextToken {

	public Selection_statement_LEFT_PARENTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSelection_statementAccess().getLEFT_PARENTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Selection_statement_IFTerminalRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// e=expression
protected class Selection_statement_EAssignment_2 extends AssignmentToken  {
	
	public Selection_statement_EAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelection_statementAccess().getEAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_EAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelection_statementAccess().getEExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Selection_statement_LEFT_PARENTerminalRuleCall_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// RIGHT_PAREN
protected class Selection_statement_RIGHT_PARENTerminalRuleCall_3 extends UnassignedTextToken {

	public Selection_statement_RIGHT_PARENTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSelection_statementAccess().getRIGHT_PARENTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Selection_statement_EAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a=statement
protected class Selection_statement_AAssignment_4 extends AssignmentToken  {
	
	public Selection_statement_AAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelection_statementAccess().getAAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelection_statementAccess().getAStatementParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Selection_statement_RIGHT_PARENTerminalRuleCall_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (ELSE b=statement)?
protected class Selection_statement_Group_5 extends GroupToken {
	
	public Selection_statement_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelection_statementAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Selection_statement_BAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ELSE
protected class Selection_statement_ELSETerminalRuleCall_5_0 extends UnassignedTextToken {

	public Selection_statement_ELSETerminalRuleCall_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSelection_statementAccess().getELSETerminalRuleCall_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Selection_statement_AAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// b=statement
protected class Selection_statement_BAssignment_5_1 extends AssignmentToken  {
	
	public Selection_statement_BAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelection_statementAccess().getBAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("b",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("b");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelection_statementAccess().getBStatementParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Selection_statement_ELSETerminalRuleCall_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule selection_statement ****************/


/************ begin Rule condition ****************
 *
 * // TODO: implement second half?
 * //returns [Expr expr]
 * //        | fully_specified_type IDENTIFIER EQUAL initializer
 * condition:
 * 	e= //{$expr = $e.expr; }
 * 	expression;
 *
 **/

// e= //{$expr = $e.expr; }
// expression
protected class Condition_EAssignment extends AssignmentToken  {
	
	public Condition_EAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConditionAccess().getEAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_EAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConditionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConditionAccess().getEExpressionParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule condition ****************/


/************ begin Rule iteration_statement ****************
 *
 * //returns [Stmt stmt]
 * //{ $stmt = tm.forStmt($init.stmt, $rem.cond, $rem.expr, $snns.stmt, -1, -1); }
 * iteration_statement:
 * 	WHILE LEFT_PAREN c=condition RIGHT_PAREN snns=statement_no_new_scope //{ $stmt = tm.whileStmt($c.expr, $snns.stmt); }
 * 	//{ $stmt = tm.doWhileStmt($s.stmt, $e.expr); }
 * 	//{ $stmt = tm.forStmt($init.stmt, $rem.cond, $rem.expr, $snns.stmt, $u.max, $u.check); }
 * 	| DO s=statement WHILE LEFT_PAREN e=expression RIGHT_PAREN SEMICOLON | u=unroll_modifier FOR LEFT_PAREN
 * 	init=for_init_statement rem=for_rest_statement RIGHT_PAREN snns=statement_no_new_scope | FOR LEFT_PAREN
 * 	init=for_init_statement rem=for_rest_statement RIGHT_PAREN snns=statement_no_new_scope;
 *
 **/

// WHILE LEFT_PAREN c=condition RIGHT_PAREN snns=statement_no_new_scope //{ $stmt = tm.whileStmt($c.expr, $snns.stmt); }
// //{ $stmt = tm.doWhileStmt($s.stmt, $e.expr); }
// //{ $stmt = tm.forStmt($init.stmt, $rem.cond, $rem.expr, $snns.stmt, $u.max, $u.check); }
// | DO s=statement WHILE LEFT_PAREN e=expression RIGHT_PAREN SEMICOLON | u=unroll_modifier FOR LEFT_PAREN
// init=for_init_statement rem=for_rest_statement RIGHT_PAREN snns=statement_no_new_scope | FOR LEFT_PAREN
// init=for_init_statement rem=for_rest_statement RIGHT_PAREN snns=statement_no_new_scope
protected class Iteration_statement_Alternatives extends AlternativesToken {

	public Iteration_statement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Iteration_statement_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Iteration_statement_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Iteration_statement_Group_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIteration_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// WHILE LEFT_PAREN c=condition RIGHT_PAREN snns=statement_no_new_scope
protected class Iteration_statement_Group_0 extends GroupToken {
	
	public Iteration_statement_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_SnnsAssignment_0_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// WHILE
protected class Iteration_statement_WHILETerminalRuleCall_0_0 extends UnassignedTextToken {

	public Iteration_statement_WHILETerminalRuleCall_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getWHILETerminalRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// LEFT_PAREN
protected class Iteration_statement_LEFT_PARENTerminalRuleCall_0_1 extends UnassignedTextToken {

	public Iteration_statement_LEFT_PARENTerminalRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getLEFT_PARENTerminalRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_WHILETerminalRuleCall_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// c=condition
protected class Iteration_statement_CAssignment_0_2 extends AssignmentToken  {
	
	public Iteration_statement_CAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getCAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Condition_EAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("c",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("c");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConditionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIteration_statementAccess().getCConditionParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Iteration_statement_LEFT_PARENTerminalRuleCall_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// RIGHT_PAREN
protected class Iteration_statement_RIGHT_PARENTerminalRuleCall_0_3 extends UnassignedTextToken {

	public Iteration_statement_RIGHT_PARENTerminalRuleCall_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getRIGHT_PARENTerminalRuleCall_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_CAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// snns=statement_no_new_scope
protected class Iteration_statement_SnnsAssignment_0_4 extends AssignmentToken  {
	
	public Iteration_statement_SnnsAssignment_0_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getSnnsAssignment_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_no_new_scope_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("snns",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("snns");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatement_no_new_scopeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIteration_statementAccess().getSnnsStatement_no_new_scopeParserRuleCall_0_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Iteration_statement_RIGHT_PARENTerminalRuleCall_0_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// DO s=statement WHILE LEFT_PAREN e=expression RIGHT_PAREN SEMICOLON
protected class Iteration_statement_Group_1 extends GroupToken {
	
	public Iteration_statement_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_SEMICOLONTerminalRuleCall_1_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// DO
protected class Iteration_statement_DOTerminalRuleCall_1_0 extends UnassignedTextToken {

	public Iteration_statement_DOTerminalRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getDOTerminalRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// s=statement
protected class Iteration_statement_SAssignment_1_1 extends AssignmentToken  {
	
	public Iteration_statement_SAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getSAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("s",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("s");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIteration_statementAccess().getSStatementParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Iteration_statement_DOTerminalRuleCall_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// WHILE
protected class Iteration_statement_WHILETerminalRuleCall_1_2 extends UnassignedTextToken {

	public Iteration_statement_WHILETerminalRuleCall_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getWHILETerminalRuleCall_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_SAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LEFT_PAREN
protected class Iteration_statement_LEFT_PARENTerminalRuleCall_1_3 extends UnassignedTextToken {

	public Iteration_statement_LEFT_PARENTerminalRuleCall_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getLEFT_PARENTerminalRuleCall_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_WHILETerminalRuleCall_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// e=expression
protected class Iteration_statement_EAssignment_1_4 extends AssignmentToken  {
	
	public Iteration_statement_EAssignment_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getEAssignment_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_EAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIteration_statementAccess().getEExpressionParserRuleCall_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Iteration_statement_LEFT_PARENTerminalRuleCall_1_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// RIGHT_PAREN
protected class Iteration_statement_RIGHT_PARENTerminalRuleCall_1_5 extends UnassignedTextToken {

	public Iteration_statement_RIGHT_PARENTerminalRuleCall_1_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getRIGHT_PARENTerminalRuleCall_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_EAssignment_1_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMICOLON
protected class Iteration_statement_SEMICOLONTerminalRuleCall_1_6 extends UnassignedTextToken {

	public Iteration_statement_SEMICOLONTerminalRuleCall_1_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getSEMICOLONTerminalRuleCall_1_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_RIGHT_PARENTerminalRuleCall_1_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// u=unroll_modifier FOR LEFT_PAREN init=for_init_statement rem=for_rest_statement RIGHT_PAREN snns=statement_no_new_scope
protected class Iteration_statement_Group_2 extends GroupToken {
	
	public Iteration_statement_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_SnnsAssignment_2_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// u=unroll_modifier
protected class Iteration_statement_UAssignment_2_0 extends AssignmentToken  {
	
	public Iteration_statement_UAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getUAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unroll_modifier_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("u",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("u");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnroll_modifierRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIteration_statementAccess().getUUnroll_modifierParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// FOR
protected class Iteration_statement_FORTerminalRuleCall_2_1 extends UnassignedTextToken {

	public Iteration_statement_FORTerminalRuleCall_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getFORTerminalRuleCall_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_UAssignment_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LEFT_PAREN
protected class Iteration_statement_LEFT_PARENTerminalRuleCall_2_2 extends UnassignedTextToken {

	public Iteration_statement_LEFT_PARENTerminalRuleCall_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getLEFT_PARENTerminalRuleCall_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_FORTerminalRuleCall_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// init=for_init_statement
protected class Iteration_statement_InitAssignment_2_3 extends AssignmentToken  {
	
	public Iteration_statement_InitAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getInitAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_init_statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("init",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("init");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFor_init_statementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIteration_statementAccess().getInitFor_init_statementParserRuleCall_2_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Iteration_statement_LEFT_PARENTerminalRuleCall_2_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// rem=for_rest_statement
protected class Iteration_statement_RemAssignment_2_4 extends AssignmentToken  {
	
	public Iteration_statement_RemAssignment_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getRemAssignment_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_rest_statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rem",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rem");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFor_rest_statementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIteration_statementAccess().getRemFor_rest_statementParserRuleCall_2_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Iteration_statement_InitAssignment_2_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// RIGHT_PAREN
protected class Iteration_statement_RIGHT_PARENTerminalRuleCall_2_5 extends UnassignedTextToken {

	public Iteration_statement_RIGHT_PARENTerminalRuleCall_2_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getRIGHT_PARENTerminalRuleCall_2_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_RemAssignment_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// snns=statement_no_new_scope
protected class Iteration_statement_SnnsAssignment_2_6 extends AssignmentToken  {
	
	public Iteration_statement_SnnsAssignment_2_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getSnnsAssignment_2_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_no_new_scope_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("snns",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("snns");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatement_no_new_scopeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIteration_statementAccess().getSnnsStatement_no_new_scopeParserRuleCall_2_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Iteration_statement_RIGHT_PARENTerminalRuleCall_2_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// FOR LEFT_PAREN init=for_init_statement rem=for_rest_statement RIGHT_PAREN snns=statement_no_new_scope
protected class Iteration_statement_Group_3 extends GroupToken {
	
	public Iteration_statement_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_SnnsAssignment_3_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// FOR
protected class Iteration_statement_FORTerminalRuleCall_3_0 extends UnassignedTextToken {

	public Iteration_statement_FORTerminalRuleCall_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getFORTerminalRuleCall_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// LEFT_PAREN
protected class Iteration_statement_LEFT_PARENTerminalRuleCall_3_1 extends UnassignedTextToken {

	public Iteration_statement_LEFT_PARENTerminalRuleCall_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getLEFT_PARENTerminalRuleCall_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_FORTerminalRuleCall_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// init=for_init_statement
protected class Iteration_statement_InitAssignment_3_2 extends AssignmentToken  {
	
	public Iteration_statement_InitAssignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getInitAssignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_init_statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("init",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("init");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFor_init_statementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIteration_statementAccess().getInitFor_init_statementParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Iteration_statement_LEFT_PARENTerminalRuleCall_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// rem=for_rest_statement
protected class Iteration_statement_RemAssignment_3_3 extends AssignmentToken  {
	
	public Iteration_statement_RemAssignment_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getRemAssignment_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_rest_statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rem",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rem");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFor_rest_statementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIteration_statementAccess().getRemFor_rest_statementParserRuleCall_3_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Iteration_statement_InitAssignment_3_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// RIGHT_PAREN
protected class Iteration_statement_RIGHT_PARENTerminalRuleCall_3_4 extends UnassignedTextToken {

	public Iteration_statement_RIGHT_PARENTerminalRuleCall_3_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getRIGHT_PARENTerminalRuleCall_3_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Iteration_statement_RemAssignment_3_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// snns=statement_no_new_scope
protected class Iteration_statement_SnnsAssignment_3_5 extends AssignmentToken  {
	
	public Iteration_statement_SnnsAssignment_3_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteration_statementAccess().getSnnsAssignment_3_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_no_new_scope_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("snns",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("snns");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatement_no_new_scopeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIteration_statementAccess().getSnnsStatement_no_new_scopeParserRuleCall_3_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Iteration_statement_RIGHT_PARENTerminalRuleCall_3_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule iteration_statement ****************/


/************ begin Rule unroll_modifier ****************
 *
 * //returns [int max, int check]
 * //{ $max = Integer.valueOf($m.text); $check = Integer.valueOf($c.text); }
 * unroll_modifier:
 * 	UNROLL LEFT_PAREN m=INTCONSTANT COMMA c=INTCONSTANT RIGHT_PAREN;
 *
 **/

// UNROLL LEFT_PAREN m=INTCONSTANT COMMA c=INTCONSTANT RIGHT_PAREN
protected class Unroll_modifier_Group extends GroupToken {
	
	public Unroll_modifier_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnroll_modifierAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unroll_modifier_RIGHT_PARENTerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnroll_modifierRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// UNROLL
protected class Unroll_modifier_UNROLLTerminalRuleCall_0 extends UnassignedTextToken {

	public Unroll_modifier_UNROLLTerminalRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnroll_modifierAccess().getUNROLLTerminalRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// LEFT_PAREN
protected class Unroll_modifier_LEFT_PARENTerminalRuleCall_1 extends UnassignedTextToken {

	public Unroll_modifier_LEFT_PARENTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnroll_modifierAccess().getLEFT_PARENTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unroll_modifier_UNROLLTerminalRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// m=INTCONSTANT
protected class Unroll_modifier_MAssignment_2 extends AssignmentToken  {
	
	public Unroll_modifier_MAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnroll_modifierAccess().getMAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unroll_modifier_LEFT_PARENTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("m",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("m");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUnroll_modifierAccess().getMINTCONSTANTTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getUnroll_modifierAccess().getMINTCONSTANTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// COMMA
protected class Unroll_modifier_COMMATerminalRuleCall_3 extends UnassignedTextToken {

	public Unroll_modifier_COMMATerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnroll_modifierAccess().getCOMMATerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unroll_modifier_MAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// c=INTCONSTANT
protected class Unroll_modifier_CAssignment_4 extends AssignmentToken  {
	
	public Unroll_modifier_CAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnroll_modifierAccess().getCAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unroll_modifier_COMMATerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("c",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("c");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUnroll_modifierAccess().getCINTCONSTANTTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getUnroll_modifierAccess().getCINTCONSTANTTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// RIGHT_PAREN
protected class Unroll_modifier_RIGHT_PARENTerminalRuleCall_5 extends UnassignedTextToken {

	public Unroll_modifier_RIGHT_PARENTerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnroll_modifierAccess().getRIGHT_PARENTerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unroll_modifier_CAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule unroll_modifier ****************/


/************ begin Rule for_init_statement ****************
 *
 * //returns [Stmt stmt]
 * for_init_statement:
 * 	e= //{ $stmt = $e.stmt; }
 * 	expression_statement | d= //{ $stmt = $d.stmt; }
 * 	declaration_statement;
 *
 **/

// e= //{ $stmt = $e.stmt; }
// expression_statement | d= //{ $stmt = $d.stmt; }
// declaration_statement
protected class For_init_statement_Alternatives extends AlternativesToken {

	public For_init_statement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFor_init_statementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_init_statement_EAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new For_init_statement_DAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFor_init_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// e= //{ $stmt = $e.stmt; }
// expression_statement
protected class For_init_statement_EAssignment_0 extends AssignmentToken  {
	
	public For_init_statement_EAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFor_init_statementAccess().getEAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_statementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFor_init_statementAccess().getEExpression_statementParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// d= //{ $stmt = $d.stmt; }
// declaration_statement
protected class For_init_statement_DAssignment_1 extends AssignmentToken  {
	
	public For_init_statement_DAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFor_init_statementAccess().getDAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_statement_DAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("d",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("d");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclaration_statementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFor_init_statementAccess().getDDeclaration_statementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule for_init_statement ****************/


/************ begin Rule for_rest_statement ****************
 *
 * //returns [Expr cond, Expr expr]
 * for_rest_statement:
 * 	{for_rest_statement} c=condition SEMICOLON e=expression? //{ $cond = $c.expr; if (e != null) $expr = $e.expr; }
 * 	//{ if (e != null) $expr = $e.expr; }
 * 	| {for_rest_statement} SEMICOLON e=expression?;
 *
 **/

// {for_rest_statement} c=condition SEMICOLON e=expression? //{ $cond = $c.expr; if (e != null) $expr = $e.expr; }
// //{ if (e != null) $expr = $e.expr; }
// | {for_rest_statement} SEMICOLON e=expression?
protected class For_rest_statement_Alternatives extends AlternativesToken {

	public For_rest_statement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFor_rest_statementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_rest_statement_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new For_rest_statement_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFor_rest_statementAccess().getFor_rest_statementAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {for_rest_statement} c=condition SEMICOLON e=expression?
protected class For_rest_statement_Group_0 extends GroupToken {
	
	public For_rest_statement_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFor_rest_statementAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_rest_statement_EAssignment_0_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new For_rest_statement_SEMICOLONTerminalRuleCall_0_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// {for_rest_statement}
protected class For_rest_statement_For_rest_statementAction_0_0 extends ActionToken  {

	public For_rest_statement_For_rest_statementAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getFor_rest_statementAccess().getFor_rest_statementAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// c=condition
protected class For_rest_statement_CAssignment_0_1 extends AssignmentToken  {
	
	public For_rest_statement_CAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFor_rest_statementAccess().getCAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Condition_EAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("c",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("c");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConditionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFor_rest_statementAccess().getCConditionParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new For_rest_statement_For_rest_statementAction_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class For_rest_statement_SEMICOLONTerminalRuleCall_0_2 extends UnassignedTextToken {

	public For_rest_statement_SEMICOLONTerminalRuleCall_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFor_rest_statementAccess().getSEMICOLONTerminalRuleCall_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_rest_statement_CAssignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// e=expression?
protected class For_rest_statement_EAssignment_0_3 extends AssignmentToken  {
	
	public For_rest_statement_EAssignment_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFor_rest_statementAccess().getEAssignment_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_EAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFor_rest_statementAccess().getEExpressionParserRuleCall_0_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new For_rest_statement_SEMICOLONTerminalRuleCall_0_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {for_rest_statement} SEMICOLON e=expression?
protected class For_rest_statement_Group_1 extends GroupToken {
	
	public For_rest_statement_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFor_rest_statementAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_rest_statement_EAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new For_rest_statement_SEMICOLONTerminalRuleCall_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// {for_rest_statement}
protected class For_rest_statement_For_rest_statementAction_1_0 extends ActionToken  {

	public For_rest_statement_For_rest_statementAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getFor_rest_statementAccess().getFor_rest_statementAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// SEMICOLON
protected class For_rest_statement_SEMICOLONTerminalRuleCall_1_1 extends UnassignedTextToken {

	public For_rest_statement_SEMICOLONTerminalRuleCall_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFor_rest_statementAccess().getSEMICOLONTerminalRuleCall_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_rest_statement_For_rest_statementAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// e=expression?
protected class For_rest_statement_EAssignment_1_2 extends AssignmentToken  {
	
	public For_rest_statement_EAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFor_rest_statementAccess().getEAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_EAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFor_rest_statementAccess().getEExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new For_rest_statement_SEMICOLONTerminalRuleCall_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule for_rest_statement ****************/


/************ begin Rule jump_statement ****************
 *
 * //returns [Stmt stmt]
 * jump_statement:
 * 	{jump_statement} CONTINUE //{ $stmt = tm.continueStmt(); }
 * 	SEMICOLON //{ $stmt = tm.returnStmt($e.expr); }
 * 	| {jump_statement} BREAK //{ $stmt = tm.breakStmt(); }
 * 	SEMICOLON | {jump_statement} DISCARD //{ $stmt = tm.discardStmt(); }
 * 	SEMICOLON | {jump_statement} RETURN //{ $stmt = tm.returnStmt(null); }
 * 	SEMICOLON | RETURN e=expression SEMICOLON;
 *
 **/

// {jump_statement} CONTINUE //{ $stmt = tm.continueStmt(); }
// SEMICOLON //{ $stmt = tm.returnStmt($e.expr); }
// | {jump_statement} BREAK //{ $stmt = tm.breakStmt(); }
// SEMICOLON | {jump_statement} DISCARD //{ $stmt = tm.discardStmt(); }
// SEMICOLON | {jump_statement} RETURN //{ $stmt = tm.returnStmt(null); }
// SEMICOLON | RETURN e=expression SEMICOLON
protected class Jump_statement_Alternatives extends AlternativesToken {

	public Jump_statement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Jump_statement_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Jump_statement_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Jump_statement_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Jump_statement_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Jump_statement_Group_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getJump_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {jump_statement} CONTINUE //{ $stmt = tm.continueStmt(); }
// SEMICOLON
protected class Jump_statement_Group_0 extends GroupToken {
	
	public Jump_statement_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Jump_statement_SEMICOLONTerminalRuleCall_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {jump_statement}
protected class Jump_statement_Jump_statementAction_0_0 extends ActionToken  {

	public Jump_statement_Jump_statementAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getJump_statementAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// CONTINUE
protected class Jump_statement_CONTINUETerminalRuleCall_0_1 extends UnassignedTextToken {

	public Jump_statement_CONTINUETerminalRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getCONTINUETerminalRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Jump_statement_Jump_statementAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// //{ $stmt = tm.continueStmt(); }
// SEMICOLON
protected class Jump_statement_SEMICOLONTerminalRuleCall_0_2 extends UnassignedTextToken {

	public Jump_statement_SEMICOLONTerminalRuleCall_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getSEMICOLONTerminalRuleCall_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Jump_statement_CONTINUETerminalRuleCall_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {jump_statement} BREAK //{ $stmt = tm.breakStmt(); }
// SEMICOLON
protected class Jump_statement_Group_1 extends GroupToken {
	
	public Jump_statement_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Jump_statement_SEMICOLONTerminalRuleCall_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {jump_statement}
protected class Jump_statement_Jump_statementAction_1_0 extends ActionToken  {

	public Jump_statement_Jump_statementAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getJump_statementAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// BREAK
protected class Jump_statement_BREAKTerminalRuleCall_1_1 extends UnassignedTextToken {

	public Jump_statement_BREAKTerminalRuleCall_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getBREAKTerminalRuleCall_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Jump_statement_Jump_statementAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// //{ $stmt = tm.breakStmt(); }
// SEMICOLON
protected class Jump_statement_SEMICOLONTerminalRuleCall_1_2 extends UnassignedTextToken {

	public Jump_statement_SEMICOLONTerminalRuleCall_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getSEMICOLONTerminalRuleCall_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Jump_statement_BREAKTerminalRuleCall_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {jump_statement} DISCARD //{ $stmt = tm.discardStmt(); }
// SEMICOLON
protected class Jump_statement_Group_2 extends GroupToken {
	
	public Jump_statement_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Jump_statement_SEMICOLONTerminalRuleCall_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {jump_statement}
protected class Jump_statement_Jump_statementAction_2_0 extends ActionToken  {

	public Jump_statement_Jump_statementAction_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getJump_statementAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// DISCARD
protected class Jump_statement_DISCARDTerminalRuleCall_2_1 extends UnassignedTextToken {

	public Jump_statement_DISCARDTerminalRuleCall_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getDISCARDTerminalRuleCall_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Jump_statement_Jump_statementAction_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// //{ $stmt = tm.discardStmt(); }
// SEMICOLON
protected class Jump_statement_SEMICOLONTerminalRuleCall_2_2 extends UnassignedTextToken {

	public Jump_statement_SEMICOLONTerminalRuleCall_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getSEMICOLONTerminalRuleCall_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Jump_statement_DISCARDTerminalRuleCall_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {jump_statement} RETURN //{ $stmt = tm.returnStmt(null); }
// SEMICOLON
protected class Jump_statement_Group_3 extends GroupToken {
	
	public Jump_statement_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Jump_statement_SEMICOLONTerminalRuleCall_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {jump_statement}
protected class Jump_statement_Jump_statementAction_3_0 extends ActionToken  {

	public Jump_statement_Jump_statementAction_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getJump_statementAction_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// RETURN
protected class Jump_statement_RETURNTerminalRuleCall_3_1 extends UnassignedTextToken {

	public Jump_statement_RETURNTerminalRuleCall_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getRETURNTerminalRuleCall_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Jump_statement_Jump_statementAction_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// //{ $stmt = tm.returnStmt(null); }
// SEMICOLON
protected class Jump_statement_SEMICOLONTerminalRuleCall_3_2 extends UnassignedTextToken {

	public Jump_statement_SEMICOLONTerminalRuleCall_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getSEMICOLONTerminalRuleCall_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Jump_statement_RETURNTerminalRuleCall_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// RETURN e=expression SEMICOLON
protected class Jump_statement_Group_4 extends GroupToken {
	
	public Jump_statement_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Jump_statement_SEMICOLONTerminalRuleCall_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// RETURN
protected class Jump_statement_RETURNTerminalRuleCall_4_0 extends UnassignedTextToken {

	public Jump_statement_RETURNTerminalRuleCall_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getRETURNTerminalRuleCall_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// e=expression
protected class Jump_statement_EAssignment_4_1 extends AssignmentToken  {
	
	public Jump_statement_EAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getEAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_EAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getJump_statementAccess().getEExpressionParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Jump_statement_RETURNTerminalRuleCall_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class Jump_statement_SEMICOLONTerminalRuleCall_4_2 extends UnassignedTextToken {

	public Jump_statement_SEMICOLONTerminalRuleCall_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getJump_statementAccess().getSEMICOLONTerminalRuleCall_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Jump_statement_EAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule jump_statement ****************/


/************ begin Rule translation_unit ****************
 *
 * // From GLSL spec...
 * // Grammar Note:  No 'goto'.  Gotos are not supported. 
 * //returns [ProgramUnit prog]
 * //@init {
 * //    List<ExtDecl> declList = new ArrayList<ExtDecl>();
 * //}
 * / *{ declList.addAll($e.res); }* / //{ $prog = tm.programUnit(declList); }
 * translation_unit:
 * 	e+=external_declaration+;
 *
 **/

// e+=external_declaration+
protected class Translation_unit_EAssignment extends AssignmentToken  {
	
	public Translation_unit_EAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTranslation_unitAccess().getEAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new External_declaration_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExternal_declarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTranslation_unitAccess().getEExternal_declarationParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Translation_unit_EAssignment(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule translation_unit ****************/


/************ begin Rule external_declaration ****************
 *
 * //returns [List<ExtDecl> res = new ArrayList<ExtDecl>()]
 * external_declaration:
 * 	f= //{ $res.add($f.def); }
 * 	function_definition | d= //{ $res.addAll($d.declList); }
 * 	declaration | g= //{ $res.add($g.block); }
 * 	glue_block;
 *
 **/

// f= //{ $res.add($f.def); }
// function_definition | d= //{ $res.addAll($d.declList); }
// declaration | g= //{ $res.add($g.block); }
// glue_block
protected class External_declaration_Alternatives extends AlternativesToken {

	public External_declaration_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExternal_declarationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new External_declaration_FAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new External_declaration_DAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new External_declaration_GAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExternal_declarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// f= //{ $res.add($f.def); }
// function_definition
protected class External_declaration_FAssignment_0 extends AssignmentToken  {
	
	public External_declaration_FAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExternal_declarationAccess().getFAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_definition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("f",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("f");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunction_definitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExternal_declarationAccess().getFFunction_definitionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// d= //{ $res.addAll($d.declList); }
// declaration
protected class External_declaration_DAssignment_1 extends AssignmentToken  {
	
	public External_declaration_DAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExternal_declarationAccess().getDAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("d",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("d");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExternal_declarationAccess().getDDeclarationParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// g= //{ $res.add($g.block); }
// glue_block
protected class External_declaration_GAssignment_2 extends AssignmentToken  {
	
	public External_declaration_GAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExternal_declarationAccess().getGAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Glue_block_GAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("g",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("g");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGlue_blockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExternal_declarationAccess().getGGlue_blockParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule external_declaration ****************/


/************ begin Rule function_definition ****************
 *
 * // From GLSL spec...
 * // Grammar Note:  No 'switch'.  Switch statements not supported. 
 * //returns [FuncDef def]
 * //@init {
 * //	symbols.enterFrame();
 * //}
 * function_definition:
 * 	p=function_prototype s= //{ $def = tm.funcDef($p.func, $s.stmt); }
 * 	compound_statement_no_new_scope;
 *
 **/

// p=function_prototype s= //{ $def = tm.funcDef($p.func, $s.stmt); }
// compound_statement_no_new_scope
protected class Function_definition_Group extends GroupToken {
	
	public Function_definition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunction_definitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_definition_SAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunction_definitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// p=function_prototype
protected class Function_definition_PAssignment_0 extends AssignmentToken  {
	
	public Function_definition_PAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunction_definitionAccess().getPAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_prototype_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("p",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("p");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunction_prototypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunction_definitionAccess().getPFunction_prototypeParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// s= //{ $def = tm.funcDef($p.func, $s.stmt); }
// compound_statement_no_new_scope
protected class Function_definition_SAssignment_1 extends AssignmentToken  {
	
	public Function_definition_SAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunction_definitionAccess().getSAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compound_statement_no_new_scope_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("s",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("s");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompound_statement_no_new_scopeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunction_definitionAccess().getSCompound_statement_no_new_scopeParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Function_definition_PAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule function_definition ****************/


/************ begin Rule glue_block ****************
 *
 * //finally {
 * //        symbols.exitFrame();
 * //}
 * //returns [GlueBlock block]
 * glue_block:
 * 	g= //{ $block = tm.glueBlock($g.text.substring(2, $g.text.length()-2)); }
 * 	T_GLUE_BLOCK;
 *
 **/

// g= //{ $block = tm.glueBlock($g.text.substring(2, $g.text.length()-2)); }
// T_GLUE_BLOCK
protected class Glue_block_GAssignment extends AssignmentToken  {
	
	public Glue_block_GAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGlue_blockAccess().getGAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGlue_blockRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("g",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("g");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getGlue_blockAccess().getGT_GLUE_BLOCKTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getGlue_blockAccess().getGT_GLUE_BLOCKTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule glue_block ****************/

}
