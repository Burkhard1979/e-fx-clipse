/*
* generated by Xtext
*/
grammar InternalDecoraDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package at.bestsolution.efxclipse.tooling.decora.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.bestsolution.efxclipse.tooling.decora.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import at.bestsolution.efxclipse.tooling.decora.services.DecoraDslGrammarAccess;

}

@parser::members {
 
 	private DecoraDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DecoraDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRulefield_selection
entryRulefield_selection 
:
{ before(grammarAccess.getField_selectionRule()); }
	 rulefield_selection
{ after(grammarAccess.getField_selectionRule()); } 
	 EOF 
;

// Rule field_selection
rulefield_selection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getField_selectionAccess().getAlternatives()); }
(rule__Field_selection__Alternatives)
{ after(grammarAccess.getField_selectionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleRGBA_FIELDS
entryRuleRGBA_FIELDS 
:
{ before(grammarAccess.getRGBA_FIELDSRule()); }
	 ruleRGBA_FIELDS
{ after(grammarAccess.getRGBA_FIELDSRule()); } 
	 EOF 
;

// Rule RGBA_FIELDS
ruleRGBA_FIELDS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRGBA_FIELDSAccess().getAlternatives()); }
(rule__RGBA_FIELDS__Alternatives)
{ after(grammarAccess.getRGBA_FIELDSAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Field_selection__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getField_selectionAccess().getRAssignment_0()); }
(rule__Field_selection__RAssignment_0)
{ after(grammarAccess.getField_selectionAccess().getRAssignment_0()); }
)

    |(
{ before(grammarAccess.getField_selectionAccess().getXAssignment_1()); }
(rule__Field_selection__XAssignment_1)
{ after(grammarAccess.getField_selectionAccess().getXAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__RGBA_FIELDS__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRGBA_FIELDSAccess().getGroup_0()); }
(rule__RGBA_FIELDS__Group_0__0)
{ after(grammarAccess.getRGBA_FIELDSAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getRGBA_FIELDSAccess().getGroup_1()); }
(rule__RGBA_FIELDS__Group_1__0)
{ after(grammarAccess.getRGBA_FIELDSAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getRGBA_FIELDSAccess().getGroup_2()); }
(rule__RGBA_FIELDS__Group_2__0)
{ after(grammarAccess.getRGBA_FIELDSAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getRGBA_FIELDSAccess().getGroup_3()); }
(rule__RGBA_FIELDS__Group_3__0)
{ after(grammarAccess.getRGBA_FIELDSAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__RGBA_FIELDS__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RGBA_FIELDS__Group_0__0__Impl
	rule__RGBA_FIELDS__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RGBA_FIELDS__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRGBA_FIELDSAccess().getDOTTerminalRuleCall_0_0()); }
	RULE_DOT
{ after(grammarAccess.getRGBA_FIELDSAccess().getDOTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RGBA_FIELDS__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RGBA_FIELDS__Group_0__1__Impl
	rule__RGBA_FIELDS__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RGBA_FIELDS__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_0_1()); }
	RULE_RFIELD
{ after(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RGBA_FIELDS__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RGBA_FIELDS__Group_0__2__Impl
	rule__RGBA_FIELDS__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RGBA_FIELDS__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_0_2()); }
	RULE_RFIELD
{ after(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RGBA_FIELDS__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RGBA_FIELDS__Group_0__3__Impl
	rule__RGBA_FIELDS__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RGBA_FIELDS__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_0_3()); }
	RULE_RFIELD
{ after(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RGBA_FIELDS__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RGBA_FIELDS__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RGBA_FIELDS__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_0_4()); }
	RULE_RFIELD
{ after(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RGBA_FIELDS__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RGBA_FIELDS__Group_1__0__Impl
	rule__RGBA_FIELDS__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RGBA_FIELDS__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRGBA_FIELDSAccess().getDOTTerminalRuleCall_1_0()); }
	RULE_DOT
{ after(grammarAccess.getRGBA_FIELDSAccess().getDOTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RGBA_FIELDS__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RGBA_FIELDS__Group_1__1__Impl
	rule__RGBA_FIELDS__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RGBA_FIELDS__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_1_1()); }
	RULE_RFIELD
{ after(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RGBA_FIELDS__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RGBA_FIELDS__Group_1__2__Impl
	rule__RGBA_FIELDS__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RGBA_FIELDS__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_1_2()); }
	RULE_RFIELD
{ after(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RGBA_FIELDS__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RGBA_FIELDS__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RGBA_FIELDS__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_1_3()); }
	RULE_RFIELD
{ after(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RGBA_FIELDS__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RGBA_FIELDS__Group_2__0__Impl
	rule__RGBA_FIELDS__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RGBA_FIELDS__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRGBA_FIELDSAccess().getDOTTerminalRuleCall_2_0()); }
	RULE_DOT
{ after(grammarAccess.getRGBA_FIELDSAccess().getDOTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RGBA_FIELDS__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RGBA_FIELDS__Group_2__1__Impl
	rule__RGBA_FIELDS__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RGBA_FIELDS__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_2_1()); }
	RULE_RFIELD
{ after(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RGBA_FIELDS__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RGBA_FIELDS__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RGBA_FIELDS__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_2_2()); }
	RULE_RFIELD
{ after(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RGBA_FIELDS__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RGBA_FIELDS__Group_3__0__Impl
	rule__RGBA_FIELDS__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RGBA_FIELDS__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRGBA_FIELDSAccess().getDOTTerminalRuleCall_3_0()); }
	RULE_DOT
{ after(grammarAccess.getRGBA_FIELDSAccess().getDOTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RGBA_FIELDS__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RGBA_FIELDS__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RGBA_FIELDS__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_3_1()); }
	RULE_RFIELD
{ after(grammarAccess.getRGBA_FIELDSAccess().getRFIELDTerminalRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Field_selection__RAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getField_selectionAccess().getRRGBA_FIELDSParserRuleCall_0_0()); }
	ruleRGBA_FIELDS{ after(grammarAccess.getField_selectionAccess().getRRGBA_FIELDSParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field_selection__XAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getField_selectionAccess().getXXYZW_FIELDSTerminalRuleCall_1_0()); }
	RULE_XYZW_FIELDS{ after(grammarAccess.getField_selectionAccess().getXXYZW_FIELDSTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_RFIELD : ('r'|'g'|'b'|'a');

RULE_XYZW_FIELDS : (RULE_DOT RULE_XFIELD RULE_XFIELD RULE_XFIELD RULE_XFIELD|RULE_DOT RULE_XFIELD RULE_XFIELD RULE_XFIELD|RULE_DOT RULE_XFIELD RULE_XFIELD|RULE_DOT RULE_XFIELD);

RULE_XFIELD : ('x'|'y'|'z'|'w');

RULE_LETTER : ('$'|'A'..'Z'|'a'..'z'|'_');

RULE_DIGIT : '0'..'9';

RULE_INTCONSTANT : ('0'|'1'..'9' RULE_DIGIT*);

RULE_FLOATCONSTANT : (RULE_DIGIT+ '.' RULE_DIGIT*|'.' RULE_DIGIT+);

RULE_WS : (' '|'\r'|'\t'|'\n');

RULE_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_LINE_COMMENT : '//' ~(('\n'|'\r'))* '\r'? '\n';

RULE_T_GLUE_BLOCK : RULE_LEFT_FRENCH .* RULE_RIGHT_FRENCH;

RULE_STAR : '*';

RULE_SLASH : '/';

RULE_PLUS : '+';

RULE_DASH : '-';

RULE_LT : '<';

RULE_GT : '>';

RULE_LTEQ : '<=';

RULE_GTEQ : '>=';

RULE_EQEQ : '==';

RULE_NEQ : '!=';

RULE_AND : '&&';

RULE_XOR : '^^';

RULE_OR : '||';

RULE_INC : '++';

RULE_DEC : '--';

RULE_STAREQ : '*=';

RULE_SLASHEQ : '/=';

RULE_PLUSEQ : '+=';

RULE_DASHEQ : '-=';

RULE_LEFT_PAREN : '(';

RULE_RIGHT_PAREN : ')';

RULE_LEFT_BRACKET : '[';

RULE_RIGHT_BRACKET : ']';

RULE_LEFT_BRACE : '{';

RULE_RIGHT_BRACE : '}';

RULE_LEFT_FRENCH : '<<';

RULE_RIGHT_FRENCH : '>>';

RULE_DOT : '.';

RULE_COMMA : ',';

RULE_EQUAL : '=';

RULE_BANG : '!';

RULE_TILDE : '~';

RULE_QUESTION : '?';

RULE_COLON : ':';

RULE_SEMICOLON : ';';

RULE_IF : 'if';

RULE_ELSE : 'else';

RULE_WHILE : 'while';

RULE_DO : 'do';

RULE_FOR : 'for';

RULE_UNROLL : 'unroll';

RULE_CONTINUE : 'continue';

RULE_BREAK : 'break';

RULE_DISCARD : 'discard';

RULE_RETURN : 'return';

RULE_VOID : 'void';


