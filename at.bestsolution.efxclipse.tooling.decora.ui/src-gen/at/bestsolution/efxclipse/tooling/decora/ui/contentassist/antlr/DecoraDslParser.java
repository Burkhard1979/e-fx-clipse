/*
* generated by Xtext
*/
package at.bestsolution.efxclipse.tooling.decora.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import at.bestsolution.efxclipse.tooling.decora.services.DecoraDslGrammarAccess;

public class DecoraDslParser extends AbstractContentAssistParser {
	
	@Inject
	private DecoraDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected at.bestsolution.efxclipse.tooling.decora.ui.contentassist.antlr.internal.InternalDecoraDslParser createParser() {
		at.bestsolution.efxclipse.tooling.decora.ui.contentassist.antlr.internal.InternalDecoraDslParser result = new at.bestsolution.efxclipse.tooling.decora.ui.contentassist.antlr.internal.InternalDecoraDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getField_selectionAccess().getAlternatives(), "rule__Field_selection__Alternatives");
					put(grammarAccess.getTYPEAccess().getAlternatives(), "rule__TYPE__Alternatives");
					put(grammarAccess.getBOOLCONSTANTAccess().getAlternatives(), "rule__BOOLCONSTANT__Alternatives");
					put(grammarAccess.getRGBA_FIELDSAccess().getAlternatives(), "rule__RGBA_FIELDS__Alternatives");
					put(grammarAccess.getIDENTIFIERAccess().getAlternatives_1(), "rule__IDENTIFIER__Alternatives_1");
					put(grammarAccess.getRGBA_FIELDSAccess().getGroup_0(), "rule__RGBA_FIELDS__Group_0__0");
					put(grammarAccess.getRGBA_FIELDSAccess().getGroup_1(), "rule__RGBA_FIELDS__Group_1__0");
					put(grammarAccess.getRGBA_FIELDSAccess().getGroup_2(), "rule__RGBA_FIELDS__Group_2__0");
					put(grammarAccess.getRGBA_FIELDSAccess().getGroup_3(), "rule__RGBA_FIELDS__Group_3__0");
					put(grammarAccess.getIDENTIFIERAccess().getGroup(), "rule__IDENTIFIER__Group__0");
					put(grammarAccess.getField_selectionAccess().getRAssignment_0(), "rule__Field_selection__RAssignment_0");
					put(grammarAccess.getField_selectionAccess().getXAssignment_1(), "rule__Field_selection__XAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			at.bestsolution.efxclipse.tooling.decora.ui.contentassist.antlr.internal.InternalDecoraDslParser typedParser = (at.bestsolution.efxclipse.tooling.decora.ui.contentassist.antlr.internal.InternalDecoraDslParser) parser;
			typedParser.entryRulefield_selection();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_COMMENT", "RULE_LINE_COMMENT", "RULE_WS" };
	}
	
	public DecoraDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DecoraDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
