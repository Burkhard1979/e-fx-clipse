/*
 * generated by Xtext
 */
package at.bestsolution.efxclipse.tooling.fxgraph.ui.contentassist;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.SortedSet;
import java.util.TreeSet;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jdt.core.Flags;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IMethod;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import at.bestsolution.efxclipse.tooling.fxgraph.fXGraph.Element;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class FXGraphProposalProvider extends AbstractFXGraphProposalProvider {
	private Map<String, TypeData> typeCache = new HashMap<String, TypeData>();

	static class TypeData {
		SortedSet<Property> properties = new TreeSet<Property>();
	}

	static class Property implements Comparable<Property> {
		final String name;
		final String owner;

		public Property(String name, String owner) {
			this.name = name;
			this.owner = owner;
		}
		
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((name == null) ? 0 : name.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Property other = (Property) obj;
			if (name == null) {
				if (other.name != null)
					return false;
			} else if (!name.equals(other.name))
				return false;
			return true;
		}

		@Override
		public int compareTo(Property arg0) {
			return name.compareTo(arg0.name);
		}
	}

	static class SingleValueProperty extends Property {

		public SingleValueProperty(String name, String owner) {
			super(name, owner);
		}

	}

	static class PrimitivValueProperty extends SingleValueProperty {

		public PrimitivValueProperty(String name, String owner) {
			super(name, owner);
		}

	}

	static class FloatingValueProperty extends PrimitivValueProperty {

		public FloatingValueProperty(String name, String owner) {
			super(name, owner);
		}

	}

	static class IntegerValueProperty extends PrimitivValueProperty {

		public IntegerValueProperty(String name, String owner) {
			super(name, owner);
		}

	}

	static class BooleanValueProperty extends PrimitivValueProperty {

		public BooleanValueProperty(String name, String owner) {
			super(name, owner);
		}

	}

	static class StringValueProperty extends PrimitivValueProperty {

		public StringValueProperty(String name, String owner) {
			super(name, owner);
		}

	}

	static class ElementValueProperty extends SingleValueProperty {

		public ElementValueProperty(String name, String owner) {
			super(name, owner);
		}

	}

	@Override
	public void complete_Property(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		System.err.println("Content Proposal: " + context.getCurrentModel());
		if (context.getCurrentModel() instanceof Element) {
			Element element = (Element) context.getCurrentModel();
			JvmParameterizedTypeReference typeRef = element.getType();

			TypeData data = typeCache.get(typeRef.getQualifiedName());
			System.err.println(data);
			if (data == null) {
				URI uri = model.eResource().getURI();
				IProject project = ResourcesPlugin.getWorkspace().getRoot()
						.getProject(uri.segment(1));
				IJavaProject jproject = JavaCore.create(project);
				try {
					List<IMethod> allMethods = new ArrayList<IMethod>();
					IType jdtType = jproject.findType(typeRef
							.getQualifiedName());
					allMethods.addAll(Arrays.asList(jdtType.getMethods()));

					while (jdtType != null
							&& jdtType.getSuperclassName() != null) {
						jdtType = jproject
								.findType(jdtType.getSuperclassName());
						if (jdtType != null) {
							allMethods.addAll(Arrays.asList(jdtType
									.getMethods()));
						}
					}
					data = createData(allMethods);
				} catch (JavaModelException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				if( data != null ) {
					for( Property p : data.properties ) {
						acceptor.accept(createCompletionProposal(p.name, p.name + " - " + p.owner, null, context));
					}
				}
			}

		}
		super.complete_Property(model, ruleCall, context, acceptor);
	}

	private TypeData createData(List<IMethod> allMethods)
			throws JavaModelException {
		TypeData d = new TypeData();
		for (IMethod m : allMethods) {
			if( (m.getFlags() & Flags.AccPublic) != Flags.AccPublic ) {
				continue;
			}
			
			if (m.getElementName().startsWith("get")) {
				StringValueProperty p = new StringValueProperty(extractAttributename(m.getElementName()),m.getParent().getElementName());
				d.properties.add(p);
			} else if (m.getElementName().startsWith("is")
					&& "boolean".equals(m.getReturnType())) {
				BooleanValueProperty p = new BooleanValueProperty(extractAttributename(m.getElementName()),m.getParent().getElementName());
				d.properties.add(p);
			}
		}
		return d;
	}
	
	private String extractAttributename(String name) {
		String rv = null;
		if( name.startsWith("get") ) {
			rv = name.substring(3);
		} else if( name.startsWith("is") ) {
			rv = name.substring(2);
		}
		
		if( rv != null ) {
			rv = rv.substring(0, 1).toLowerCase() + rv.substring(1);
		}
		
		return rv;
	}
}
