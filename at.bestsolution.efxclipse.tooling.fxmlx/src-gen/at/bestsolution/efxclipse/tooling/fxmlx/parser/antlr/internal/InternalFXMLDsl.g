/*
* generated by Xtext
*/
grammar InternalFXMLDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package at.bestsolution.efxclipse.tooling.fxmlx.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.bestsolution.efxclipse.tooling.fxmlx.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.bestsolution.efxclipse.tooling.fxmlx.services.FXMLDslGrammarAccess;

}

@parser::members {

 	private FXMLDslGrammarAccess grammarAccess;
 	
    public InternalFXMLDslParser(TokenStream input, FXMLDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "FXML";	
   	}
   	
   	@Override
   	protected FXMLDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFXML
entryRuleFXML returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFXMLRule()); }
	 iv_ruleFXML=ruleFXML 
	 { $current=$iv_ruleFXML.current; } 
	 EOF 
;

// Rule FXML
ruleFXML returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFXMLAccess().getXmlDecXMLDecParserRuleCall_0_0()); 
	    }
		lv_xmlDec_0_0=ruleXMLDec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFXMLRule());
	        }
       		set(
       			$current, 
       			"xmlDec",
        		lv_xmlDec_0_0, 
        		"XMLDec");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFXMLAccess().getProcessingInstructionsProcessingInstructionParserRuleCall_1_0()); 
	    }
		lv_processingInstructions_1_0=ruleProcessingInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFXMLRule());
	        }
       		add(
       			$current, 
       			"processingInstructions",
        		lv_processingInstructions_1_0, 
        		"ProcessingInstruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFXMLAccess().getRootElementElementDefinitionParserRuleCall_2_0()); 
	    }
		lv_rootElement_2_0=ruleElementDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFXMLRule());
	        }
       		set(
       			$current, 
       			"rootElement",
        		lv_rootElement_2_0, 
        		"ElementDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXMLDec
entryRuleXMLDec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXMLDecRule()); }
	 iv_ruleXMLDec=ruleXMLDec 
	 { $current=$iv_ruleXMLDec.current; } 
	 EOF 
;

// Rule XMLDec
ruleXMLDec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<?xml' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXMLDecAccess().getXmlKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXMLDecAccess().getPropsAttributePropertyDefinitionParserRuleCall_1_0()); 
	    }
		lv_props_1_0=ruleAttributePropertyDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMLDecRule());
	        }
       		add(
       			$current, 
       			"props",
        		lv_props_1_0, 
        		"AttributePropertyDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='?>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXMLDecAccess().getQuestionMarkGreaterThanSignKeyword_2());
    }
)
;





// Entry rule entryRuleProcessingInstruction
entryRuleProcessingInstruction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcessingInstructionRule()); }
	 iv_ruleProcessingInstruction=ruleProcessingInstruction 
	 { $current=$iv_ruleProcessingInstruction.current; } 
	 EOF 
;

// Rule ProcessingInstruction
ruleProcessingInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<?' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcessingInstructionAccess().getLessThanSignQuestionMarkKeyword_0());
    }
(
(
		lv_type_1_0=RULE_ID
		{
			newLeafNode(lv_type_1_0, grammarAccess.getProcessingInstructionAccess().getTypeIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcessingInstructionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessingInstructionAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_2_0()); 
	    }
		lv_importedNamespace_2_0=ruleQualifiedNameWithWildCard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessingInstructionRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_2_0, 
        		"QualifiedNameWithWildCard");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='?>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProcessingInstructionAccess().getQuestionMarkGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleElementDefinition
entryRuleElementDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementDefinitionRule()); }
	 iv_ruleElementDefinition=ruleElementDefinition 
	 { $current=$iv_ruleElementDefinition.current; } 
	 EOF 
;

// Rule ElementDefinition
ruleElementDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElementDefinitionAccess().getContainerElementDefinitionParserRuleCall_0()); 
    }
    this_ContainerElementDefinition_0=ruleContainerElementDefinition
    { 
        $current = $this_ContainerElementDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementDefinitionAccess().getEmptyElementDefinitionParserRuleCall_1()); 
    }
    this_EmptyElementDefinition_1=ruleEmptyElementDefinition
    { 
        $current = $this_EmptyElementDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleContainerElementDefinition
entryRuleContainerElementDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContainerElementDefinitionRule()); }
	 iv_ruleContainerElementDefinition=ruleContainerElementDefinition 
	 { $current=$iv_ruleContainerElementDefinition.current; } 
	 EOF 
;

// Rule ContainerElementDefinition
ruleContainerElementDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getContainerElementDefinitionAccess().getLessThanSignKeyword_0_0());
    }
((
(
		lv_namespace_1_0=RULE_ID
		{
			newLeafNode(lv_namespace_1_0, grammarAccess.getContainerElementDefinitionAccess().getNamespaceIDTerminalRuleCall_0_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainerElementDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"namespace",
        		lv_namespace_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getContainerElementDefinitionAccess().getColonKeyword_0_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerElementDefinitionAccess().getNameQualifiedNameParserRuleCall_0_2_0()); 
	    }
		lv_name_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerElementDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerElementDefinitionAccess().getPropertiesAttributePropertyDefinitionParserRuleCall_0_3_0()); 
	    }
		lv_properties_4_0=ruleAttributePropertyDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerElementDefinitionRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_4_0, 
        		"AttributePropertyDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getContainerElementDefinitionAccess().getGreaterThanSignKeyword_0_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerElementDefinitionAccess().getChildrenElementDefinitionParserRuleCall_0_5_0()); 
	    }
		lv_children_6_0=ruleElementDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerElementDefinitionRule());
	        }
       		add(
       			$current, 
       			"children",
        		lv_children_6_0, 
        		"ElementDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_7='</' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getContainerElementDefinitionAccess().getLessThanSignSolidusKeyword_0_6());
    }
((
(
		lv_endnamespace_8_0=RULE_ID
		{
			newLeafNode(lv_endnamespace_8_0, grammarAccess.getContainerElementDefinitionAccess().getEndnamespaceIDTerminalRuleCall_0_7_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainerElementDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"endnamespace",
        		lv_endnamespace_8_0, 
        		"ID");
	    }

)
)	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getContainerElementDefinitionAccess().getColonKeyword_0_7_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerElementDefinitionAccess().getEndnameQualifiedNameParserRuleCall_0_8_0()); 
	    }
		lv_endname_10_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerElementDefinitionRule());
	        }
       		set(
       			$current, 
       			"endname",
        		lv_endname_10_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='>' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getContainerElementDefinitionAccess().getGreaterThanSignKeyword_0_9());
    }
)
    |(	otherlv_12='<' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getContainerElementDefinitionAccess().getLessThanSignKeyword_1_0());
    }
((
(
		lv_namespace_13_0=RULE_ID
		{
			newLeafNode(lv_namespace_13_0, grammarAccess.getContainerElementDefinitionAccess().getNamespaceIDTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainerElementDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"namespace",
        		lv_namespace_13_0, 
        		"ID");
	    }

)
)	otherlv_14=':' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getContainerElementDefinitionAccess().getColonKeyword_1_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerElementDefinitionAccess().getNameQualifiedNameParserRuleCall_1_2_0()); 
	    }
		lv_name_15_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerElementDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_15_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerElementDefinitionAccess().getPropertiesAttributePropertyDefinitionParserRuleCall_1_3_0()); 
	    }
		lv_properties_16_0=ruleAttributePropertyDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerElementDefinitionRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_16_0, 
        		"AttributePropertyDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_17='>' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getContainerElementDefinitionAccess().getGreaterThanSignKeyword_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerElementDefinitionAccess().getContentContentParserRuleCall_1_5_0()); 
	    }
		lv_content_18_0=ruleContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerElementDefinitionRule());
	        }
       		set(
       			$current, 
       			"content",
        		lv_content_18_0, 
        		"Content");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_19='</' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getContainerElementDefinitionAccess().getLessThanSignSolidusKeyword_1_6());
    }
((
(
		lv_endnamespace_20_0=RULE_ID
		{
			newLeafNode(lv_endnamespace_20_0, grammarAccess.getContainerElementDefinitionAccess().getEndnamespaceIDTerminalRuleCall_1_7_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainerElementDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"endnamespace",
        		lv_endnamespace_20_0, 
        		"ID");
	    }

)
)	otherlv_21=':' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getContainerElementDefinitionAccess().getColonKeyword_1_7_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerElementDefinitionAccess().getEndnameQualifiedNameParserRuleCall_1_8_0()); 
	    }
		lv_endname_22_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerElementDefinitionRule());
	        }
       		set(
       			$current, 
       			"endname",
        		lv_endname_22_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_23='>' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getContainerElementDefinitionAccess().getGreaterThanSignKeyword_1_9());
    }
))
;





// Entry rule entryRuleEmptyElementDefinition
entryRuleEmptyElementDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmptyElementDefinitionRule()); }
	 iv_ruleEmptyElementDefinition=ruleEmptyElementDefinition 
	 { $current=$iv_ruleEmptyElementDefinition.current; } 
	 EOF 
;

// Rule EmptyElementDefinition
ruleEmptyElementDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEmptyElementDefinitionAccess().getLessThanSignKeyword_0());
    }
((
(
		lv_namespace_1_0=RULE_ID
		{
			newLeafNode(lv_namespace_1_0, grammarAccess.getEmptyElementDefinitionAccess().getNamespaceIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEmptyElementDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"namespace",
        		lv_namespace_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEmptyElementDefinitionAccess().getColonKeyword_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getEmptyElementDefinitionAccess().getNameQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_name_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmptyElementDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEmptyElementDefinitionAccess().getPropsAttributePropertyDefinitionParserRuleCall_3_0()); 
	    }
		lv_props_4_0=ruleAttributePropertyDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmptyElementDefinitionRule());
	        }
       		add(
       			$current, 
       			"props",
        		lv_props_4_0, 
        		"AttributePropertyDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='/>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEmptyElementDefinitionAccess().getSolidusGreaterThanSignKeyword_4());
    }
)
;





// Entry rule entryRuleAttributePropertyDefinition
entryRuleAttributePropertyDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributePropertyDefinitionRule()); }
	 iv_ruleAttributePropertyDefinition=ruleAttributePropertyDefinition 
	 { $current=$iv_ruleAttributePropertyDefinition.current; } 
	 EOF 
;

// Rule AttributePropertyDefinition
ruleAttributePropertyDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_namespace_0_0=RULE_ID
		{
			newLeafNode(lv_namespace_0_0, grammarAccess.getAttributePropertyDefinitionAccess().getNamespaceIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributePropertyDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"namespace",
        		lv_namespace_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributePropertyDefinitionAccess().getColonKeyword_0_1());
    }
)?(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getAttributePropertyDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributePropertyDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAttributePropertyDefinitionAccess().getEqualsSignKeyword_2());
    }
(
(
		lv_value_4_0=RULE_STRING
		{
			newLeafNode(lv_value_4_0, grammarAccess.getAttributePropertyDefinitionAccess().getValueSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributePropertyDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleContent
entryRuleContent returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getContentRule()); } 
	 iv_ruleContent=ruleContent 
	 { $current=$iv_ruleContent.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Content
ruleContent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT");
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getContentAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getContentAccess().getSTRINGTerminalRuleCall_1()); 
    }

    |    this_ANY_OTHER_2=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_2);
    }

    { 
    newLeafNode(this_ANY_OTHER_2, grammarAccess.getContentAccess().getANY_OTHERTerminalRuleCall_2()); 
    }

    |    this_WS_3=RULE_WS    {
		$current.merge(this_WS_3);
    }

    { 
    newLeafNode(this_WS_3, grammarAccess.getContentAccess().getWSTerminalRuleCall_3()); 
    }

    |
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getContentAccess().getFullStopKeyword_4()); 
    }
)*
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
)    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildCardRule()); } 
	 iv_ruleQualifiedNameWithWildCard=ruleQualifiedNameWithWildCard 
	 { $current=$iv_ruleQualifiedNameWithWildCard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopKeyword_1_0()); 
    }

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildCardAccess().getAsteriskKeyword_1_1()); 
    }
)?)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

RULE_ML_COMMENT : '<!--' ( options {greedy=false;} : . )*'-->';


