/*
* generated by Xtext
*/

package at.bestsolution.efxclipse.tooling.fxmlx.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class FXMLDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FXMLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FXML");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXmlDecAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cXmlDecXMLDecParserRuleCall_0_0 = (RuleCall)cXmlDecAssignment_0.eContents().get(0);
		private final Assignment cProcessingInstructionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProcessingInstructionsProcessingInstructionParserRuleCall_1_0 = (RuleCall)cProcessingInstructionsAssignment_1.eContents().get(0);
		private final Assignment cRootElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRootElementElementDefinitionParserRuleCall_2_0 = (RuleCall)cRootElementAssignment_2.eContents().get(0);
		
		//FXML:
		//	xmlDec=XMLDec processingInstructions+=ProcessingInstruction* rootElement=ElementDefinition;
		public ParserRule getRule() { return rule; }

		//xmlDec=XMLDec processingInstructions+=ProcessingInstruction* rootElement=ElementDefinition
		public Group getGroup() { return cGroup; }

		//xmlDec=XMLDec
		public Assignment getXmlDecAssignment_0() { return cXmlDecAssignment_0; }

		//XMLDec
		public RuleCall getXmlDecXMLDecParserRuleCall_0_0() { return cXmlDecXMLDecParserRuleCall_0_0; }

		//processingInstructions+=ProcessingInstruction*
		public Assignment getProcessingInstructionsAssignment_1() { return cProcessingInstructionsAssignment_1; }

		//ProcessingInstruction
		public RuleCall getProcessingInstructionsProcessingInstructionParserRuleCall_1_0() { return cProcessingInstructionsProcessingInstructionParserRuleCall_1_0; }

		//rootElement=ElementDefinition
		public Assignment getRootElementAssignment_2() { return cRootElementAssignment_2; }

		//ElementDefinition
		public RuleCall getRootElementElementDefinitionParserRuleCall_2_0() { return cRootElementElementDefinitionParserRuleCall_2_0; }
	}

	public class XMLDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMLDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXmlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropsAttributePropertyDefinitionParserRuleCall_1_0 = (RuleCall)cPropsAssignment_1.eContents().get(0);
		private final Keyword cQuestionMarkGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XMLDec:
		//	"<?xml" props+=AttributePropertyDefinition+ "?>";
		public ParserRule getRule() { return rule; }

		//"<?xml" props+=AttributePropertyDefinition+ "?>"
		public Group getGroup() { return cGroup; }

		//"<?xml"
		public Keyword getXmlKeyword_0() { return cXmlKeyword_0; }

		//props+=AttributePropertyDefinition+
		public Assignment getPropsAssignment_1() { return cPropsAssignment_1; }

		//AttributePropertyDefinition
		public RuleCall getPropsAttributePropertyDefinitionParserRuleCall_1_0() { return cPropsAttributePropertyDefinitionParserRuleCall_1_0; }

		//"?>"
		public Keyword getQuestionMarkGreaterThanSignKeyword_2() { return cQuestionMarkGreaterThanSignKeyword_2; }
	}

	public class ProcessingInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessingInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_2_0 = (RuleCall)cImportedNamespaceAssignment_2.eContents().get(0);
		private final Keyword cQuestionMarkGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProcessingInstruction:
		//	"<?" type=ID importedNamespace=QualifiedNameWithWildCard "?>";
		public ParserRule getRule() { return rule; }

		//"<?" type=ID importedNamespace=QualifiedNameWithWildCard "?>"
		public Group getGroup() { return cGroup; }

		//"<?"
		public Keyword getLessThanSignQuestionMarkKeyword_0() { return cLessThanSignQuestionMarkKeyword_0; }

		//type=ID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_2() { return cImportedNamespaceAssignment_2; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_2_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_2_0; }

		//"?>"
		public Keyword getQuestionMarkGreaterThanSignKeyword_3() { return cQuestionMarkGreaterThanSignKeyword_3; }
	}

	public class ElementDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContainerElementDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEmptyElementDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElementDefinition:
		//	ContainerElementDefinition | EmptyElementDefinition;
		public ParserRule getRule() { return rule; }

		//ContainerElementDefinition | EmptyElementDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//ContainerElementDefinition
		public RuleCall getContainerElementDefinitionParserRuleCall_0() { return cContainerElementDefinitionParserRuleCall_0; }

		//EmptyElementDefinition
		public RuleCall getEmptyElementDefinitionParserRuleCall_1() { return cEmptyElementDefinitionParserRuleCall_1; }
	}

	public class ContainerElementDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContainerElementDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNamespaceAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNamespaceIDTerminalRuleCall_1_0_0 = (RuleCall)cNamespaceAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesAttributePropertyDefinitionParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cContentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContentPCDataParserRuleCall_5_0 = (RuleCall)cContentAssignment_5.eContents().get(0);
		private final Assignment cChildrenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cChildrenElementDefinitionParserRuleCall_6_0 = (RuleCall)cChildrenAssignment_6.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cEndnamespaceAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cEndnamespaceIDTerminalRuleCall_8_0_0 = (RuleCall)cEndnamespaceAssignment_8_0.eContents().get(0);
		private final Keyword cColonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cEndnameAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cEndnameQualifiedNameParserRuleCall_9_0 = (RuleCall)cEndnameAssignment_9.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ContainerElementDefinition:
		//	"<" (namespace=ID ":")? name=QualifiedName properties+=AttributePropertyDefinition* ">" content=PCData?
		//	children+=ElementDefinition* "</" (endnamespace=ID ":")? endname=QualifiedName ">";
		public ParserRule getRule() { return rule; }

		//"<" (namespace=ID ":")? name=QualifiedName properties+=AttributePropertyDefinition* ">" content=PCData?
		//children+=ElementDefinition* "</" (endnamespace=ID ":")? endname=QualifiedName ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//(namespace=ID ":")?
		public Group getGroup_1() { return cGroup_1; }

		//namespace=ID
		public Assignment getNamespaceAssignment_1_0() { return cNamespaceAssignment_1_0; }

		//ID
		public RuleCall getNamespaceIDTerminalRuleCall_1_0_0() { return cNamespaceIDTerminalRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//properties+=AttributePropertyDefinition*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//AttributePropertyDefinition
		public RuleCall getPropertiesAttributePropertyDefinitionParserRuleCall_3_0() { return cPropertiesAttributePropertyDefinitionParserRuleCall_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }

		//content=PCData?
		public Assignment getContentAssignment_5() { return cContentAssignment_5; }

		//PCData
		public RuleCall getContentPCDataParserRuleCall_5_0() { return cContentPCDataParserRuleCall_5_0; }

		//children+=ElementDefinition*
		public Assignment getChildrenAssignment_6() { return cChildrenAssignment_6; }

		//ElementDefinition
		public RuleCall getChildrenElementDefinitionParserRuleCall_6_0() { return cChildrenElementDefinitionParserRuleCall_6_0; }

		//"</"
		public Keyword getLessThanSignSolidusKeyword_7() { return cLessThanSignSolidusKeyword_7; }

		//(endnamespace=ID ":")?
		public Group getGroup_8() { return cGroup_8; }

		//endnamespace=ID
		public Assignment getEndnamespaceAssignment_8_0() { return cEndnamespaceAssignment_8_0; }

		//ID
		public RuleCall getEndnamespaceIDTerminalRuleCall_8_0_0() { return cEndnamespaceIDTerminalRuleCall_8_0_0; }

		//":"
		public Keyword getColonKeyword_8_1() { return cColonKeyword_8_1; }

		//endname=QualifiedName
		public Assignment getEndnameAssignment_9() { return cEndnameAssignment_9; }

		//QualifiedName
		public RuleCall getEndnameQualifiedNameParserRuleCall_9_0() { return cEndnameQualifiedNameParserRuleCall_9_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_10() { return cGreaterThanSignKeyword_10; }
	}

	public class EmptyElementDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmptyElementDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNamespaceAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNamespaceIDTerminalRuleCall_1_0_0 = (RuleCall)cNamespaceAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPropsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropsAttributePropertyDefinitionParserRuleCall_3_0 = (RuleCall)cPropsAssignment_3.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EmptyElementDefinition:
		//	"<" (namespace=ID ":")? name=QualifiedName props+=AttributePropertyDefinition* "/>";
		public ParserRule getRule() { return rule; }

		//"<" (namespace=ID ":")? name=QualifiedName props+=AttributePropertyDefinition* "/>"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//(namespace=ID ":")?
		public Group getGroup_1() { return cGroup_1; }

		//namespace=ID
		public Assignment getNamespaceAssignment_1_0() { return cNamespaceAssignment_1_0; }

		//ID
		public RuleCall getNamespaceIDTerminalRuleCall_1_0_0() { return cNamespaceIDTerminalRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//props+=AttributePropertyDefinition*
		public Assignment getPropsAssignment_3() { return cPropsAssignment_3; }

		//AttributePropertyDefinition
		public RuleCall getPropsAttributePropertyDefinitionParserRuleCall_3_0() { return cPropsAttributePropertyDefinitionParserRuleCall_3_0; }

		//"/>"
		public Keyword getSolidusGreaterThanSignKeyword_4() { return cSolidusGreaterThanSignKeyword_4; }
	}

	public class PCDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PCData");
		private final Assignment cContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentContentParserRuleCall_0 = (RuleCall)cContentAssignment.eContents().get(0);
		
		//PCData:
		//	content=Content;
		public ParserRule getRule() { return rule; }

		//content=Content
		public Assignment getContentAssignment() { return cContentAssignment; }

		//Content
		public RuleCall getContentContentParserRuleCall_0() { return cContentContentParserRuleCall_0; }
	}

	public class AttributePropertyDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributePropertyDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNamespaceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNamespaceIDTerminalRuleCall_0_0_0 = (RuleCall)cNamespaceAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//AttributePropertyDefinition:
		//	(namespace=ID ":")? name=QualifiedName "=" value=STRING;
		public ParserRule getRule() { return rule; }

		//(namespace=ID ":")? name=QualifiedName "=" value=STRING
		public Group getGroup() { return cGroup; }

		//(namespace=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//namespace=ID
		public Assignment getNamespaceAssignment_0_0() { return cNamespaceAssignment_0_0; }

		//ID
		public RuleCall getNamespaceIDTerminalRuleCall_0_0_0() { return cNamespaceIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}

	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Content");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cFullStopKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cColonKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cEqualsSignKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final Keyword cFullStopKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cColonKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		private final Keyword cEqualsSignKeyword_1_6 = (Keyword)cAlternatives_1.eContents().get(6);
		
		//Content hidden(ML_COMMENT):
		//	(ID | STRING | ANY_OTHER | "." | ":" | "=") (ID | STRING | ANY_OTHER | WS | "." | ":" | "=")*;
		public ParserRule getRule() { return rule; }

		//(ID | STRING | ANY_OTHER | "." | ":" | "=") (ID | STRING | ANY_OTHER | WS | "." | ":" | "=")*
		public Group getGroup() { return cGroup; }

		//ID | STRING | ANY_OTHER | "." | ":" | "="
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_1() { return cSTRINGTerminalRuleCall_0_1; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_0_2() { return cANY_OTHERTerminalRuleCall_0_2; }

		//"."
		public Keyword getFullStopKeyword_0_3() { return cFullStopKeyword_0_3; }

		//":"
		public Keyword getColonKeyword_0_4() { return cColonKeyword_0_4; }

		//"="
		public Keyword getEqualsSignKeyword_0_5() { return cEqualsSignKeyword_0_5; }

		//(ID | STRING | ANY_OTHER | WS | "." | ":" | "=")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1_2() { return cANY_OTHERTerminalRuleCall_1_2; }

		//WS
		public RuleCall getWSTerminalRuleCall_1_3() { return cWSTerminalRuleCall_1_3; }

		//"."
		public Keyword getFullStopKeyword_1_4() { return cFullStopKeyword_1_4; }

		//":"
		public Keyword getColonKeyword_1_5() { return cColonKeyword_1_5; }

		//"="
		public Keyword getEqualsSignKeyword_1_6() { return cEqualsSignKeyword_1_6; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueQualifiedNameParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	value=QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//value=QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//value=QualifiedName
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//QualifiedName
		public RuleCall getValueQualifiedNameParserRuleCall_0_0() { return cValueQualifiedNameParserRuleCall_0_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	
	
	private FXMLElements pFXML;
	private XMLDecElements pXMLDec;
	private ProcessingInstructionElements pProcessingInstruction;
	private ElementDefinitionElements pElementDefinition;
	private ContainerElementDefinitionElements pContainerElementDefinition;
	private EmptyElementDefinitionElements pEmptyElementDefinition;
	private PCDataElements pPCData;
	private AttributePropertyDefinitionElements pAttributePropertyDefinition;
	private ContentElements pContent;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private TerminalRule tID;
	private TerminalRule tSTRING;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	private TerminalRule tML_COMMENT;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public FXMLDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//FXML:
	//	xmlDec=XMLDec processingInstructions+=ProcessingInstruction* rootElement=ElementDefinition;
	public FXMLElements getFXMLAccess() {
		return (pFXML != null) ? pFXML : (pFXML = new FXMLElements());
	}
	
	public ParserRule getFXMLRule() {
		return getFXMLAccess().getRule();
	}

	//XMLDec:
	//	"<?xml" props+=AttributePropertyDefinition+ "?>";
	public XMLDecElements getXMLDecAccess() {
		return (pXMLDec != null) ? pXMLDec : (pXMLDec = new XMLDecElements());
	}
	
	public ParserRule getXMLDecRule() {
		return getXMLDecAccess().getRule();
	}

	//ProcessingInstruction:
	//	"<?" type=ID importedNamespace=QualifiedNameWithWildCard "?>";
	public ProcessingInstructionElements getProcessingInstructionAccess() {
		return (pProcessingInstruction != null) ? pProcessingInstruction : (pProcessingInstruction = new ProcessingInstructionElements());
	}
	
	public ParserRule getProcessingInstructionRule() {
		return getProcessingInstructionAccess().getRule();
	}

	//ElementDefinition:
	//	ContainerElementDefinition | EmptyElementDefinition;
	public ElementDefinitionElements getElementDefinitionAccess() {
		return (pElementDefinition != null) ? pElementDefinition : (pElementDefinition = new ElementDefinitionElements());
	}
	
	public ParserRule getElementDefinitionRule() {
		return getElementDefinitionAccess().getRule();
	}

	//ContainerElementDefinition:
	//	"<" (namespace=ID ":")? name=QualifiedName properties+=AttributePropertyDefinition* ">" content=PCData?
	//	children+=ElementDefinition* "</" (endnamespace=ID ":")? endname=QualifiedName ">";
	public ContainerElementDefinitionElements getContainerElementDefinitionAccess() {
		return (pContainerElementDefinition != null) ? pContainerElementDefinition : (pContainerElementDefinition = new ContainerElementDefinitionElements());
	}
	
	public ParserRule getContainerElementDefinitionRule() {
		return getContainerElementDefinitionAccess().getRule();
	}

	//EmptyElementDefinition:
	//	"<" (namespace=ID ":")? name=QualifiedName props+=AttributePropertyDefinition* "/>";
	public EmptyElementDefinitionElements getEmptyElementDefinitionAccess() {
		return (pEmptyElementDefinition != null) ? pEmptyElementDefinition : (pEmptyElementDefinition = new EmptyElementDefinitionElements());
	}
	
	public ParserRule getEmptyElementDefinitionRule() {
		return getEmptyElementDefinitionAccess().getRule();
	}

	//PCData:
	//	content=Content;
	public PCDataElements getPCDataAccess() {
		return (pPCData != null) ? pPCData : (pPCData = new PCDataElements());
	}
	
	public ParserRule getPCDataRule() {
		return getPCDataAccess().getRule();
	}

	//AttributePropertyDefinition:
	//	(namespace=ID ":")? name=QualifiedName "=" value=STRING;
	public AttributePropertyDefinitionElements getAttributePropertyDefinitionAccess() {
		return (pAttributePropertyDefinition != null) ? pAttributePropertyDefinition : (pAttributePropertyDefinition = new AttributePropertyDefinitionElements());
	}
	
	public ParserRule getAttributePropertyDefinitionRule() {
		return getAttributePropertyDefinitionAccess().getRule();
	}

	//Content hidden(ML_COMMENT):
	//	(ID | STRING | ANY_OTHER | "." | ":" | "=") (ID | STRING | ANY_OTHER | WS | "." | ":" | "=")*;
	public ContentElements getContentAccess() {
		return (pContent != null) ? pContent : (pContent = new ContentElements());
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	value=QualifiedName ("." "*")?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 

	//terminal ML_COMMENT:
	//	"<!--"->"-->";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 
}
