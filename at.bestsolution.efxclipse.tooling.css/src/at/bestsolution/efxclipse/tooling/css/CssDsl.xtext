grammar at.bestsolution.efxclipse.tooling.css.CssDsl hidden(WS, ML_COMMENT)

/*
 * TODOS:
 * - add more CSS grammer like import 
 */

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate cssDsl "http://www.bestsolution.at/efxclipse/tooling/css/CssDsl"

stylesheet:
	charset=charset?
	imports+=importExpression*
	( 
		ruleset+=ruleset |
		media+=media |
		page+=page
	)*
;

charset:
	('@charset'|'@CHARSET') charset=STRING ';'
;

importExpression:
	('@import'|'@IMPORT') value=STRING | URLType mediaList=media_list? ';'
;

page:
	{page} ('@page'|'@PAGE') pseudoPage=pseudo_page?
    '{' declarations+=css_declaration? ( ';' declarations+=css_declaration? )* '}'	
;

pseudo_page: 
	':' Identifier
;

media: 
	('@media'|'@MEDIA') medialist=media_list '{' rulesets+=ruleset* '}'
;

media_list: 
	medium ( COMMA medium)*
;

medium: 
	Identifier
;

ruleset:
	selectors+=selector ( COMMA selectors+=selector )* WS* '{'
		(declarations+=css_declaration ';' )*
	'}'
;

selector hidden():
	simpleselectors+=simple_selector ( combinator=combinator selector=selector | WS+ combinator=combinator? selector=selector )?
;

SimpleSelectorForNegation:
	((element=ElementSelector | universal=UniversalSelector) subSelectors+=SubSelectorForNegation*) |
	=> subSelectors+=SubSelectorForNegation+
;

SubSelectorForNegation returns CssSelector:
	IdSelector |
	ClassSelector |
	AttributeSelector |
	PseudoClass
;

simple_selector:
	((element=ElementSelector | universal=UniversalSelector) subSelectors+=SubSelector*) |
	=> subSelectors+=SubSelector+
;

SubSelector returns CssSelector:
	IdSelector |
	ClassSelector |
	AttributeSelector |
	PseudoClassOrFunc
;

AttributeSelector returns CssSelector:
	{AttributeSelector} '[' name=Identifier ( op=( '^=' | '$=' | '*=' | '=' | INCLUDES | DASHMATCH ) value=( Identifier | STRING ) )? ']'
;

ClassSelector:
	{ClassSelector} '.' name=Identifier
;

ElementSelector:
	{ElementSelector} name=Identifier
;

UniversalSelector:
	{UniversalSelector} ( namespace=css_namespace_prefix )? '*'
;

IdSelector:
	{IdSelector} HASHMARK name=Identifier
;

css_namespace_prefix
  : ( Identifier | '*' )? '|'
  ;

css_declaration hidden(ML_COMMENT):
	WS* property=css_property WS* ':' valueTokens+=CssTok+ important?=IMPORTANT_SYM?
;

css_property:
	{css_property} name=ValidPropertyIdent
;

ValidPropertyIdent:
	Identifier
;

//css_pseudo
//  : ':' ':'? (IDENT | functional_pseudo)
//;

PseudoNegation:
	':not(' ')'
;

PseudoClassOrFunc:
	PseudoClass | PseudoClassFunction
;

PseudoClass:
	':' ':'? PseudoClassName
;


//PseudoNegationArgs:
//	((element = element_name | universal=css_universal) subSelectors+=PseudoNegationArgsSubSelector*)
//	|
//	subSelectors+=sub_selector+
//;
//
//PseudoNegationArgsSubSelector:
//	id=css_id | class=css_class | attrib=css_attrib | pseudoclass=PseudoClass
//;

PseudoClassName:
	name=Identifier
;

PseudoClassFunction:
	':not(' SimpleSelectorForNegation ')' |
	':' name=Identifier '(' params+=CssTok* ')'
;

//css_negation:
//	':' not=css_not negation_arg=css_negation_arg ')'
//;

enum css_not:
	not='not('
;

//css_negation_arg
//  : css_type_selector | css_universal | HASH | css_class | css_attrib | css_pseudo
//;
//

combinator
  : 
  (
  	  PLUS
  	| '>'
  	| '~'
  ) WS*
;
  
operator
  : '/' | COMMA
  ;
  
unary_operator
  : DASH | PLUS
  ;

SymbolTok returns CssTok:
	{SymbolTok} symbol=(COMMA|PERCENT)
;

WSTok returns CssTok:
	{WSTok} WS
;

StringTok returns CssTok: 
	{StringTok} value=STRING
;



NumberTok returns CssTok hidden():
	{NumberTok} val=Num
	
//	{NumberTok} DASH? ( ONE_INT+ | ONE_INT* '.' => ONE_INT+)
	
//	{NumberTok} val=Integer | Real
	//sign=DASH? ( ival=Integer | dval=Real)
;


UrlTok returns CssTok:
	{UrlTok} url=URLType
;

ColorTok returns CssTok hidden():
	{ColorTok} value=Hex
;

IdentifierOrFuncTok returns CssTok hidden(ML_COMMENT):
	{IdentifierTok} name=Identifier ( {FuncTok.name=current} '(' params+=CssTok+ ')')?
;

CssTok hidden(ML_COMMENT):
	IdentifierOrFuncTok |
	SymbolTok |
	WSTok |
	StringTok |
	NumberTok |
	UrlTok |
	ColorTok
;


URLType hidden():
	'url' '(' url=STRING ')'
;

terminal IMPORTANT_SYM:
	'!important'
;

Identifier returns ecore::EString hidden():
	DASH? (UNDERSCORE | ONE_HEX_LETTER | ONE_NON_HEX_LETTER) => (UNDERSCORE | DASH | ONE_HEX_LETTER | ONE_NON_HEX_LETTER | ONE_INT)*
;

Num returns ecore::EDouble hidden():
	(PLUS|DASH)? (
		'.' => ONE_INT+ |
		=> ONE_INT+ (=> '.' => ONE_INT+)?
	)
;
//Integer returns ecore::EInt:
//	DASH? => ONE_INT+
//;
//
//Real returns ecore::EDouble:
//	DASH? ONE_INT* '.' => ONE_INT+
//;

Hex returns ecore::EString:
	HASHMARK => (ONE_INT|ONE_HEX_LETTER)+
;



terminal ONE_INT: '0'..'9';
terminal ONE_HEX_LETTER: ('a'..'f'|'A'..'F');
terminal ONE_NON_HEX_LETTER: ('g'..'z'|'G'..'Z');


terminal UNDERSCORE: '_';
terminal DASH: '-';
terminal PLUS: '+';

//terminal INTEGER returns ecore::EInt: ('0'..'9')+;
//terminal INTEGER:('0'..'9')+;

//terminal REAL: (('0'..'9')*"."('0'..'9')+);
//terminal HASH: '#' ('_' | '-' | 'a'..'z' | 'A'..'Z' | '0'..'9' )+;

terminal HASHMARK: '#';

//terminal COLORHASH: '#' ('a'..'z' | 'A'..'Z' | '0'..'9' )+;

//terminal IDENT: ('_' | 'a'..'z' | 'A'..'Z' ) ('_' | '-' | 'a'..'z' | 'A'..'Z' | '0'..'9' )*;

//terminal HEX: '###' ('a'..'z' | 'A'..'Z' | '0'..'9' )+;

terminal COMMA: ',';
terminal PERCENT: '%';

terminal ML_COMMENT	: '/*' -> '*/';
terminal WS			: (' '|'\t'|'\r'|'\n')+;
terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";
			
terminal INCLUDES: "~=";
terminal DASHMATCH: "|=";