/*
* generated by Xtext
*/
grammar InternalCssDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package at.bestsolution.efxclipse.tooling.css.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.bestsolution.efxclipse.tooling.css.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.bestsolution.efxclipse.tooling.css.services.CssDslGrammarAccess;

}

@parser::members {

 	private CssDslGrammarAccess grammarAccess;
 	
    public InternalCssDslParser(TokenStream input, CssDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "stylesheet";	
   	}
   	
   	@Override
   	protected CssDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulestylesheet
entryRulestylesheet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStylesheetRule()); }
	 iv_rulestylesheet=rulestylesheet 
	 { $current=$iv_rulestylesheet.current; } 
	 EOF 
;

// Rule stylesheet
rulestylesheet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStylesheetAccess().getCharsetCharsetParserRuleCall_0_0()); 
	    }
		lv_charset_0_0=rulecharset		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStylesheetRule());
	        }
       		set(
       			$current, 
       			"charset",
        		lv_charset_0_0, 
        		"charset");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStylesheetAccess().getImportsImportExpressionParserRuleCall_1_0()); 
	    }
		lv_imports_1_0=ruleimportExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStylesheetRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_1_0, 
        		"importExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getStylesheetAccess().getRulesetRulesetParserRuleCall_2_0_0()); 
	    }
		lv_ruleset_2_0=ruleruleset		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStylesheetRule());
	        }
       		add(
       			$current, 
       			"ruleset",
        		lv_ruleset_2_0, 
        		"ruleset");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStylesheetAccess().getMediaMediaParserRuleCall_2_1_0()); 
	    }
		lv_media_3_0=rulemedia		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStylesheetRule());
	        }
       		add(
       			$current, 
       			"media",
        		lv_media_3_0, 
        		"media");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStylesheetAccess().getPagePageParserRuleCall_2_2_0()); 
	    }
		lv_page_4_0=rulepage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStylesheetRule());
	        }
       		add(
       			$current, 
       			"page",
        		lv_page_4_0, 
        		"page");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulecharset
entryRulecharset returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharsetRule()); }
	 iv_rulecharset=rulecharset 
	 { $current=$iv_rulecharset.current; } 
	 EOF 
;

// Rule charset
rulecharset returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='@charset' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCharsetAccess().getCharsetKeyword_0_0());
    }

    |	otherlv_1='@CHARSET' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCharsetAccess().getCHARSETKeyword_0_1());
    }
)(
(
		lv_charset_2_0=RULE_STRING
		{
			newLeafNode(lv_charset_2_0, grammarAccess.getCharsetAccess().getCharsetSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCharsetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"charset",
        		lv_charset_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCharsetAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleimportExpression
entryRuleimportExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportExpressionRule()); }
	 iv_ruleimportExpression=ruleimportExpression 
	 { $current=$iv_ruleimportExpression.current; } 
	 EOF 
;

// Rule importExpression
ruleimportExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	otherlv_0='@import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportExpressionAccess().getImportKeyword_0_0_0());
    }

    |	otherlv_1='@IMPORT' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getImportExpressionAccess().getIMPORTKeyword_0_0_1());
    }
)(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getImportExpressionAccess().getValueSTRINGTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))
    |(
    { 
        newCompositeNode(grammarAccess.getImportExpressionAccess().getURLTypeParserRuleCall_1_0()); 
    }
    this_URLType_3=ruleURLType
    { 
        $current = $this_URLType_3.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportExpressionAccess().getMediaListMedia_listParserRuleCall_1_1_0()); 
	    }
		lv_mediaList_4_0=rulemedia_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportExpressionRule());
	        }
       		set(
       			$current, 
       			"mediaList",
        		lv_mediaList_4_0, 
        		"media_list");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getImportExpressionAccess().getSemicolonKeyword_1_2());
    }
))
;





// Entry rule entryRulepage
entryRulepage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPageRule()); }
	 iv_rulepage=rulepage 
	 { $current=$iv_rulepage.current; } 
	 EOF 
;

// Rule page
rulepage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPageAccess().getPageAction_0(),
            $current);
    }
)(	otherlv_1='@page' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPageAccess().getPageKeyword_1_0());
    }

    |	otherlv_2='@PAGE' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPageAccess().getPAGEKeyword_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPageAccess().getPseudoPagePseudo_pageParserRuleCall_2_0()); 
	    }
		lv_pseudoPage_3_0=rulepseudo_page		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPageRule());
	        }
       		set(
       			$current, 
       			"pseudoPage",
        		lv_pseudoPage_3_0, 
        		"pseudo_page");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPageAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPageAccess().getDeclarationsCss_declarationParserRuleCall_4_0()); 
	    }
		lv_declarations_5_0=rulecss_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPageRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_5_0, 
        		"css_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPageAccess().getSemicolonKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPageAccess().getDeclarationsCss_declarationParserRuleCall_5_1_0()); 
	    }
		lv_declarations_7_0=rulecss_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPageRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_7_0, 
        		"css_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)?)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPageAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRulepseudo_page
entryRulepseudo_page returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPseudo_pageRule()); } 
	 iv_rulepseudo_page=rulepseudo_page 
	 { $current=$iv_rulepseudo_page.current.getText(); }  
	 EOF 
;

// Rule pseudo_page
rulepseudo_page returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPseudo_pageAccess().getColonKeyword_0()); 
    }
    this_IDENT_1=RULE_IDENT    {
		$current.merge(this_IDENT_1);
    }

    { 
    newLeafNode(this_IDENT_1, grammarAccess.getPseudo_pageAccess().getIDENTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRulemedia
entryRulemedia returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMediaRule()); }
	 iv_rulemedia=rulemedia 
	 { $current=$iv_rulemedia.current; } 
	 EOF 
;

// Rule media
rulemedia returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='@media' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMediaAccess().getMediaKeyword_0_0());
    }

    |	otherlv_1='@MEDIA' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMediaAccess().getMEDIAKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMediaAccess().getMedialistMedia_listParserRuleCall_1_0()); 
	    }
		lv_medialist_2_0=rulemedia_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMediaRule());
	        }
       		set(
       			$current, 
       			"medialist",
        		lv_medialist_2_0, 
        		"media_list");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMediaAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMediaAccess().getRulesetsRulesetParserRuleCall_3_0()); 
	    }
		lv_rulesets_4_0=ruleruleset		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMediaRule());
	        }
       		add(
       			$current, 
       			"rulesets",
        		lv_rulesets_4_0, 
        		"ruleset");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMediaAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRulemedia_list
entryRulemedia_list returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMedia_listRule()); } 
	 iv_rulemedia_list=rulemedia_list 
	 { $current=$iv_rulemedia_list.current.getText(); }  
	 EOF 
;

// Rule media_list
rulemedia_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMedia_listAccess().getMediumParserRuleCall_0()); 
    }
    this_medium_0=rulemedium    {
		$current.merge(this_medium_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_COMMA_1=RULE_COMMA    {
		$current.merge(this_COMMA_1);
    }

    { 
    newLeafNode(this_COMMA_1, grammarAccess.getMedia_listAccess().getCOMMATerminalRuleCall_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getMedia_listAccess().getMediumParserRuleCall_1_1()); 
    }
    this_medium_2=rulemedium    {
		$current.merge(this_medium_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRulemedium
entryRulemedium returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMediumRule()); } 
	 iv_rulemedium=rulemedium 
	 { $current=$iv_rulemedium.current.getText(); }  
	 EOF 
;

// Rule medium
rulemedium returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENT_0=RULE_IDENT    {
		$current.merge(this_IDENT_0);
    }

    { 
    newLeafNode(this_IDENT_0, grammarAccess.getMediumAccess().getIDENTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleruleset
entryRuleruleset returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRulesetRule()); }
	 iv_ruleruleset=ruleruleset 
	 { $current=$iv_ruleruleset.current; } 
	 EOF 
;

// Rule ruleset
ruleruleset returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRulesetAccess().getSelectorsSelectorParserRuleCall_0_0()); 
	    }
		lv_selectors_0_0=ruleselector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRulesetRule());
	        }
       		add(
       			$current, 
       			"selectors",
        		lv_selectors_0_0, 
        		"selector");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_1=RULE_COMMA
    { 
    newLeafNode(this_COMMA_1, grammarAccess.getRulesetAccess().getCOMMATerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRulesetAccess().getSelectorsSelectorParserRuleCall_1_1_0()); 
	    }
		lv_selectors_2_0=ruleselector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRulesetRule());
	        }
       		add(
       			$current, 
       			"selectors",
        		lv_selectors_2_0, 
        		"selector");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRulesetAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getRulesetAccess().getDeclarationsCss_declarationParserRuleCall_3_0_0()); 
	    }
		lv_declarations_4_0=rulecss_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRulesetRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_4_0, 
        		"css_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRulesetAccess().getSemicolonKeyword_3_1());
    }
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRulesetAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleselector
entryRuleselector returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	 iv_ruleselector=ruleselector 
	 { $current=$iv_ruleselector.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule selector
ruleselector returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorAccess().getSimpleselectorsSimple_selectorParserRuleCall_0_0()); 
	    }
		lv_simpleselectors_0_0=rulesimple_selector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorRule());
	        }
       		add(
       			$current, 
       			"simpleselectors",
        		lv_simpleselectors_0_0, 
        		"simple_selector");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorAccess().getCombinatorCombinatorParserRuleCall_1_0_0_0()); 
	    }
		lv_combinator_1_0=rulecombinator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorRule());
	        }
       		set(
       			$current, 
       			"combinator",
        		lv_combinator_1_0, 
        		"combinator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorAccess().getSelectorSelectorParserRuleCall_1_0_1_0()); 
	    }
		lv_selector_2_0=ruleselector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorRule());
	        }
       		set(
       			$current, 
       			"selector",
        		lv_selector_2_0, 
        		"selector");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((this_WS_3=RULE_WS
    { 
    newLeafNode(this_WS_3, grammarAccess.getSelectorAccess().getWSTerminalRuleCall_1_1_0()); 
    }
)+((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorAccess().getCombinatorCombinatorParserRuleCall_1_1_1_0_0()); 
	    }
		lv_combinator_4_0=rulecombinator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorRule());
	        }
       		set(
       			$current, 
       			"combinator",
        		lv_combinator_4_0, 
        		"combinator");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorAccess().getSelectorSelectorParserRuleCall_1_1_1_1_0()); 
	    }
		lv_selector_5_0=ruleselector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorRule());
	        }
       		set(
       			$current, 
       			"selector",
        		lv_selector_5_0, 
        		"selector");
	        afterParserOrEnumRuleCall();
	    }

)
))?))?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulesimple_selector
entryRulesimple_selector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_selectorRule()); }
	 iv_rulesimple_selector=rulesimple_selector 
	 { $current=$iv_rulesimple_selector.current; } 
	 EOF 
;

// Rule simple_selector
rulesimple_selector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_selectorAccess().getElementElement_nameParserRuleCall_0_0_0_0()); 
	    }
		lv_element_0_0=ruleelement_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_selectorRule());
	        }
       		set(
       			$current, 
       			"element",
        		lv_element_0_0, 
        		"element_name");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_selectorAccess().getUniversalCss_universalParserRuleCall_0_0_1_0()); 
	    }
		lv_universal_1_0=rulecss_universal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_selectorRule());
	        }
       		set(
       			$current, 
       			"universal",
        		lv_universal_1_0, 
        		"css_universal");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_selectorAccess().getSubSelectorsSub_selectorParserRuleCall_0_1_0()); 
	    }
		lv_subSelectors_2_0=rulesub_selector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_selectorRule());
	        }
       		add(
       			$current, 
       			"subSelectors",
        		lv_subSelectors_2_0, 
        		"sub_selector");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_selectorAccess().getSubSelectorsSub_selectorParserRuleCall_1_0()); 
	    }
		lv_subSelectors_3_0=rulesub_selector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_selectorRule());
	        }
       		add(
       			$current, 
       			"subSelectors",
        		lv_subSelectors_3_0, 
        		"sub_selector");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleelement_name
entryRuleelement_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getElement_nameRule()); } 
	 iv_ruleelement_name=ruleelement_name 
	 { $current=$iv_ruleelement_name.current.getText(); }  
	 EOF 
;

// Rule element_name
ruleelement_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IDENT_0=RULE_IDENT    {
		$current.merge(this_IDENT_0);
    }

    { 
    newLeafNode(this_IDENT_0, grammarAccess.getElement_nameAccess().getIDENTTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getElement_nameAccess().getReservedWordsParserRuleCall_1()); 
    }
    this_ReservedWords_1=ruleReservedWords    {
		$current.merge(this_ReservedWords_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulesub_selector
entryRulesub_selector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSub_selectorRule()); }
	 iv_rulesub_selector=rulesub_selector 
	 { $current=$iv_rulesub_selector.current; } 
	 EOF 
;

// Rule sub_selector
rulesub_selector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSub_selectorAccess().getIdCss_idParserRuleCall_0_0()); 
	    }
		lv_id_0_0=rulecss_id		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSub_selectorRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"css_id");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSub_selectorAccess().getClassCss_classParserRuleCall_1_0()); 
	    }
		lv_class_1_0=rulecss_class		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSub_selectorRule());
	        }
       		set(
       			$current, 
       			"class",
        		lv_class_1_0, 
        		"css_class");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSub_selectorAccess().getAttribCss_attribParserRuleCall_2_0()); 
	    }
		lv_attrib_2_0=rulecss_attrib		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSub_selectorRule());
	        }
       		set(
       			$current, 
       			"attrib",
        		lv_attrib_2_0, 
        		"css_attrib");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSub_selectorAccess().getPseudoclassCss_pseudoParserRuleCall_3_0()); 
	    }
		lv_pseudoclass_3_0=rulecss_pseudo		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSub_selectorRule());
	        }
       		set(
       			$current, 
       			"pseudoclass",
        		lv_pseudoclass_3_0, 
        		"css_pseudo");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSub_selectorAccess().getNegotationCss_negationParserRuleCall_4_0()); 
	    }
		lv_negotation_4_0=rulecss_negation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSub_selectorRule());
	        }
       		set(
       			$current, 
       			"negotation",
        		lv_negotation_4_0, 
        		"css_negation");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulecss_type_selector
entryRulecss_type_selector returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCss_type_selectorRule()); } 
	 iv_rulecss_type_selector=rulecss_type_selector 
	 { $current=$iv_rulecss_type_selector.current.getText(); }  
	 EOF 
;

// Rule css_type_selector
rulecss_type_selector returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getCss_type_selectorAccess().getCss_namespace_prefixParserRuleCall_0()); 
    }
    this_css_namespace_prefix_0=rulecss_namespace_prefix    {
		$current.merge(this_css_namespace_prefix_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getCss_type_selectorAccess().getElement_nameParserRuleCall_1()); 
    }
    this_element_name_1=ruleelement_name    {
		$current.merge(this_element_name_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulecss_namespace_prefix
entryRulecss_namespace_prefix returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCss_namespace_prefixRule()); } 
	 iv_rulecss_namespace_prefix=rulecss_namespace_prefix 
	 { $current=$iv_rulecss_namespace_prefix.current.getText(); }  
	 EOF 
;

// Rule css_namespace_prefix
rulecss_namespace_prefix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_IDENT_0=RULE_IDENT    {
		$current.merge(this_IDENT_0);
    }

    { 
    newLeafNode(this_IDENT_0, grammarAccess.getCss_namespace_prefixAccess().getIDENTTerminalRuleCall_0_0()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCss_namespace_prefixAccess().getAsteriskKeyword_0_1()); 
    }
)?
	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCss_namespace_prefixAccess().getVerticalLineKeyword_1()); 
    }
)
    ;





// Entry rule entryRulecss_universal
entryRulecss_universal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCss_universalRule()); } 
	 iv_rulecss_universal=rulecss_universal 
	 { $current=$iv_rulecss_universal.current.getText(); }  
	 EOF 
;

// Rule css_universal
rulecss_universal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getCss_universalAccess().getCss_namespace_prefixParserRuleCall_0()); 
    }
    this_css_namespace_prefix_0=rulecss_namespace_prefix    {
		$current.merge(this_css_namespace_prefix_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCss_universalAccess().getAsteriskKeyword_1()); 
    }
)
    ;





// Entry rule entryRulecss_class
entryRulecss_class returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCss_classRule()); } 
	 iv_rulecss_class=rulecss_class 
	 { $current=$iv_rulecss_class.current.getText(); }  
	 EOF 
;

// Rule css_class
rulecss_class returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCss_classAccess().getFullStopKeyword_0()); 
    }
(    this_IDENT_1=RULE_IDENT    {
		$current.merge(this_IDENT_1);
    }

    { 
    newLeafNode(this_IDENT_1, grammarAccess.getCss_classAccess().getIDENTTerminalRuleCall_1_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getCss_classAccess().getReservedWordsParserRuleCall_1_1()); 
    }
    this_ReservedWords_2=ruleReservedWords    {
		$current.merge(this_ReservedWords_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRulecss_id
entryRulecss_id returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCss_idRule()); } 
	 iv_rulecss_id=rulecss_id 
	 { $current=$iv_rulecss_id.current.getText(); }  
	 EOF 
;

// Rule css_id
rulecss_id returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_HASH_0=RULE_HASH    {
		$current.merge(this_HASH_0);
    }

    { 
    newLeafNode(this_HASH_0, grammarAccess.getCss_idAccess().getHASHTerminalRuleCall()); 
    }

    ;





// Entry rule entryRulecss_attrib
entryRulecss_attrib returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCss_attribRule()); } 
	 iv_rulecss_attrib=rulecss_attrib 
	 { $current=$iv_rulecss_attrib.current.getText(); }  
	 EOF 
;

// Rule css_attrib
rulecss_attrib returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCss_attribAccess().getLeftSquareBracketKeyword_0()); 
    }
(    this_IDENT_1=RULE_IDENT    {
		$current.merge(this_IDENT_1);
    }

    { 
    newLeafNode(this_IDENT_1, grammarAccess.getCss_attribAccess().getIDENTTerminalRuleCall_1_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getCss_attribAccess().getReservedWordsParserRuleCall_1_1()); 
    }
    this_ReservedWords_2=ruleReservedWords    {
		$current.merge(this_ReservedWords_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)((
	kw='^=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCss_attribAccess().getCircumflexAccentEqualsSignKeyword_2_0_0()); 
    }

    |
	kw='$=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCss_attribAccess().getDollarSignEqualsSignKeyword_2_0_1()); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCss_attribAccess().getAsteriskEqualsSignKeyword_2_0_2()); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCss_attribAccess().getEqualsSignKeyword_2_0_3()); 
    }

    |    this_INCLUDES_7=RULE_INCLUDES    {
		$current.merge(this_INCLUDES_7);
    }

    { 
    newLeafNode(this_INCLUDES_7, grammarAccess.getCss_attribAccess().getINCLUDESTerminalRuleCall_2_0_4()); 
    }

    |    this_DASHMATCH_8=RULE_DASHMATCH    {
		$current.merge(this_DASHMATCH_8);
    }

    { 
    newLeafNode(this_DASHMATCH_8, grammarAccess.getCss_attribAccess().getDASHMATCHTerminalRuleCall_2_0_5()); 
    }
)((    this_IDENT_9=RULE_IDENT    {
		$current.merge(this_IDENT_9);
    }

    { 
    newLeafNode(this_IDENT_9, grammarAccess.getCss_attribAccess().getIDENTTerminalRuleCall_2_1_0_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getCss_attribAccess().getReservedWordsParserRuleCall_2_1_0_1()); 
    }
    this_ReservedWords_10=ruleReservedWords    {
		$current.merge(this_ReservedWords_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |    this_STRING_11=RULE_STRING    {
		$current.merge(this_STRING_11);
    }

    { 
    newLeafNode(this_STRING_11, grammarAccess.getCss_attribAccess().getSTRINGTerminalRuleCall_2_1_1()); 
    }
))?
	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCss_attribAccess().getRightSquareBracketKeyword_3()); 
    }
)
    ;





// Entry rule entryRulecss_declaration
entryRulecss_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCss_declarationRule()); }
	 iv_rulecss_declaration=rulecss_declaration 
	 { $current=$iv_rulecss_declaration.current; } 
	 EOF 
;

// Rule css_declaration
rulecss_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCss_declarationAccess().getPropertyCss_propertyParserRuleCall_0_0()); 
	    }
		lv_property_0_0=rulecss_property		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCss_declarationRule());
	        }
       		set(
       			$current, 
       			"property",
        		lv_property_0_0, 
        		"css_property");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCss_declarationAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCss_declarationAccess().getExpressionExprParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleexpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCss_declarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCss_declarationAccess().getPrioCss_prioParserRuleCall_3_0()); 
	    }
		lv_prio_3_0=rulecss_prio		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCss_declarationRule());
	        }
       		set(
       			$current, 
       			"prio",
        		lv_prio_3_0, 
        		"css_prio");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRulecss_prio
entryRulecss_prio returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCss_prioRule()); } 
	 iv_rulecss_prio=rulecss_prio 
	 { $current=$iv_rulecss_prio.current.getText(); }  
	 EOF 
;

// Rule css_prio
rulecss_prio returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getCss_prioAccess().getIMPORTANT_SYMParserRuleCall()); 
    }
    this_IMPORTANT_SYM_0=ruleIMPORTANT_SYM    {
		$current.merge(this_IMPORTANT_SYM_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulecss_property
entryRulecss_property returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCss_propertyRule()); }
	 iv_rulecss_property=rulecss_property 
	 { $current=$iv_rulecss_property.current; } 
	 EOF 
;

// Rule css_property
rulecss_property returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCss_propertyAccess().getCss_propertyAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCss_propertyAccess().getNameValidPropertyIdentParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidPropertyIdent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCss_propertyRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidPropertyIdent");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleValidPropertyIdent
entryRuleValidPropertyIdent returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidPropertyIdentRule()); } 
	 iv_ruleValidPropertyIdent=ruleValidPropertyIdent 
	 { $current=$iv_ruleValidPropertyIdent.current.getText(); }  
	 EOF 
;

// Rule ValidPropertyIdent
ruleValidPropertyIdent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getValidPropertyIdentAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_IDENT_1=RULE_IDENT    {
		$current.merge(this_IDENT_1);
    }

    { 
    newLeafNode(this_IDENT_1, grammarAccess.getValidPropertyIdentAccess().getIDENTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRulecss_pseudo
entryRulecss_pseudo returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCss_pseudoRule()); } 
	 iv_rulecss_pseudo=rulecss_pseudo 
	 { $current=$iv_rulecss_pseudo.current.getText(); }  
	 EOF 
;

// Rule css_pseudo
rulecss_pseudo returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCss_pseudoAccess().getColonKeyword_0()); 
    }
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCss_pseudoAccess().getColonKeyword_1()); 
    }
)?(    this_IDENT_2=RULE_IDENT    {
		$current.merge(this_IDENT_2);
    }

    { 
    newLeafNode(this_IDENT_2, grammarAccess.getCss_pseudoAccess().getIDENTTerminalRuleCall_2_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getCss_pseudoAccess().getFunctional_pseudoParserRuleCall_2_1()); 
    }
    this_functional_pseudo_3=rulefunctional_pseudo    {
		$current.merge(this_functional_pseudo_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRulecss_negation
entryRulecss_negation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCss_negationRule()); }
	 iv_rulecss_negation=rulecss_negation 
	 { $current=$iv_rulecss_negation.current; } 
	 EOF 
;

// Rule css_negation
rulecss_negation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=':' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCss_negationAccess().getColonKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCss_negationAccess().getNotCss_notEnumRuleCall_1_0()); 
	    }
		lv_not_1_0=rulecss_not		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCss_negationRule());
	        }
       		set(
       			$current, 
       			"not",
        		lv_not_1_0, 
        		"css_not");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCss_negationAccess().getNegation_argCss_negation_argParserRuleCall_2_0()); 
	    }
		lv_negation_arg_2_0=rulecss_negation_arg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCss_negationRule());
	        }
       		set(
       			$current, 
       			"negation_arg",
        		lv_negation_arg_2_0, 
        		"css_negation_arg");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCss_negationAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRulecss_negation_arg
entryRulecss_negation_arg returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCss_negation_argRule()); } 
	 iv_rulecss_negation_arg=rulecss_negation_arg 
	 { $current=$iv_rulecss_negation_arg.current.getText(); }  
	 EOF 
;

// Rule css_negation_arg
rulecss_negation_arg returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCss_negation_argAccess().getCss_type_selectorParserRuleCall_0()); 
    }
    this_css_type_selector_0=rulecss_type_selector    {
		$current.merge(this_css_type_selector_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCss_negation_argAccess().getCss_universalParserRuleCall_1()); 
    }
    this_css_universal_1=rulecss_universal    {
		$current.merge(this_css_universal_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_HASH_2=RULE_HASH    {
		$current.merge(this_HASH_2);
    }

    { 
    newLeafNode(this_HASH_2, grammarAccess.getCss_negation_argAccess().getHASHTerminalRuleCall_2()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getCss_negation_argAccess().getCss_classParserRuleCall_3()); 
    }
    this_css_class_3=rulecss_class    {
		$current.merge(this_css_class_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCss_negation_argAccess().getCss_attribParserRuleCall_4()); 
    }
    this_css_attrib_4=rulecss_attrib    {
		$current.merge(this_css_attrib_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCss_negation_argAccess().getCss_pseudoParserRuleCall_5()); 
    }
    this_css_pseudo_5=rulecss_pseudo    {
		$current.merge(this_css_pseudo_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulefunctional_pseudo
entryRulefunctional_pseudo returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctional_pseudoRule()); } 
	 iv_rulefunctional_pseudo=rulefunctional_pseudo 
	 { $current=$iv_rulefunctional_pseudo.current.getText(); }  
	 EOF 
;

// Rule functional_pseudo
rulefunctional_pseudo returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IDENT_0=RULE_IDENT    {
		$current.merge(this_IDENT_0);
    }

    { 
    newLeafNode(this_IDENT_0, grammarAccess.getFunctional_pseudoAccess().getIDENTTerminalRuleCall_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctional_pseudoAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getFunctional_pseudoAccess().getFunction_exprParserRuleCall_2()); 
    }
    this_function_expr_2=rulefunction_expr    {
		$current.merge(this_function_expr_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctional_pseudoAccess().getRightParenthesisKeyword_3()); 
    }
)
    ;





// Entry rule entryRulefunction_expr
entryRulefunction_expr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunction_exprRule()); } 
	 iv_rulefunction_expr=rulefunction_expr 
	 { $current=$iv_rulefunction_expr.current.getText(); }  
	 EOF 
;

// Rule function_expr
rulefunction_expr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunction_exprAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunction_exprAccess().getHyphenMinusKeyword_1()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getFunction_exprAccess().getDIMENSIONParserRuleCall_2()); 
    }
    this_DIMENSION_2=ruleDIMENSION    {
		$current.merge(this_DIMENSION_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFunction_exprAccess().getNUMBERParserRuleCall_3()); 
    }
    this_NUMBER_3=ruleNUMBER    {
		$current.merge(this_NUMBER_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_STRING_4=RULE_STRING    {
		$current.merge(this_STRING_4);
    }

    { 
    newLeafNode(this_STRING_4, grammarAccess.getFunction_exprAccess().getSTRINGTerminalRuleCall_4()); 
    }

    |    this_IDENT_5=RULE_IDENT    {
		$current.merge(this_IDENT_5);
    }

    { 
    newLeafNode(this_IDENT_5, grammarAccess.getFunction_exprAccess().getIDENTTerminalRuleCall_5()); 
    }
)+
    ;





// Entry rule entryRuleDIMENSION
entryRuleDIMENSION returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDIMENSIONRule()); } 
	 iv_ruleDIMENSION=ruleDIMENSION 
	 { $current=$iv_ruleDIMENSION.current.getText(); }  
	 EOF 
;

// Rule DIMENSION
ruleDIMENSION returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDIMENSIONAccess().getPERCENTAGEParserRuleCall_0()); 
    }
    this_PERCENTAGE_0=rulePERCENTAGE    {
		$current.merge(this_PERCENTAGE_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDIMENSIONAccess().getLENGTHParserRuleCall_1()); 
    }
    this_LENGTH_1=ruleLENGTH    {
		$current.merge(this_LENGTH_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDIMENSIONAccess().getEMSParserRuleCall_2()); 
    }
    this_EMS_2=ruleEMS    {
		$current.merge(this_EMS_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDIMENSIONAccess().getEXSParserRuleCall_3()); 
    }
    this_EXS_3=ruleEXS    {
		$current.merge(this_EXS_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDIMENSIONAccess().getANGLEParserRuleCall_4()); 
    }
    this_ANGLE_4=ruleANGLE    {
		$current.merge(this_ANGLE_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDIMENSIONAccess().getTIMEParserRuleCall_5()); 
    }
    this_TIME_5=ruleTIME    {
		$current.merge(this_TIME_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDIMENSIONAccess().getFREQParserRuleCall_6()); 
    }
    this_FREQ_6=ruleFREQ    {
		$current.merge(this_FREQ_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulecombinator
entryRulecombinator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCombinatorRule()); } 
	 iv_rulecombinator=rulecombinator 
	 { $current=$iv_rulecombinator.current.getText(); }  
	 EOF 
;

// Rule combinator
rulecombinator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCombinatorAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCombinatorAccess().getGreaterThanSignKeyword_0_1()); 
    }

    |
	kw='~' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCombinatorAccess().getTildeKeyword_0_2()); 
    }
)(    this_WS_3=RULE_WS    {
		$current.merge(this_WS_3);
    }

    { 
    newLeafNode(this_WS_3, grammarAccess.getCombinatorAccess().getWSTerminalRuleCall_1()); 
    }
)*)
    ;





// Entry rule entryRuleoperator
entryRuleoperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorRule()); } 
	 iv_ruleoperator=ruleoperator 
	 { $current=$iv_ruleoperator.current.getText(); }  
	 EOF 
;

// Rule operator
ruleoperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getSolidusKeyword_0()); 
    }

    |    this_COMMA_1=RULE_COMMA    {
		$current.merge(this_COMMA_1);
    }

    { 
    newLeafNode(this_COMMA_1, grammarAccess.getOperatorAccess().getCOMMATerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleunary_operator
entryRuleunary_operator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnary_operatorRule()); } 
	 iv_ruleunary_operator=ruleunary_operator 
	 { $current=$iv_ruleunary_operator.current.getText(); }  
	 EOF 
;

// Rule unary_operator
ruleunary_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnary_operatorAccess().getHyphenMinusKeyword_0()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnary_operatorAccess().getPlusSignKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleexpr
entryRuleexpr returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleexpr=ruleexpr 
	 { $current=$iv_ruleexpr.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule expr
ruleexpr returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getTermGroupsTermGroupParserRuleCall_0_0()); 
	    }
		lv_termGroups_0_0=ruletermGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		add(
       			$current, 
       			"termGroups",
        		lv_termGroups_0_0, 
        		"termGroup");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getExprAccess().getOperatorParserRuleCall_1_0()); 
    }
ruleoperator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getTermGroupsTermGroupParserRuleCall_1_1_0()); 
	    }
		lv_termGroups_2_0=ruletermGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		add(
       			$current, 
       			"termGroups",
        		lv_termGroups_2_0, 
        		"termGroup");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuletermGroup
entryRuletermGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermGroupRule()); }
	 iv_ruletermGroup=ruletermGroup 
	 { $current=$iv_ruletermGroup.current; } 
	 EOF 
;

// Rule termGroup
ruletermGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermGroupAccess().getTermsTermParserRuleCall_0()); 
	    }
		lv_terms_0_0=ruleterm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermGroupRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_0_0, 
        		"term");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleterm
entryRuleterm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleterm=ruleterm 
	 { $current=$iv_ruleterm.current; } 
	 EOF 
;

// Rule term
ruleterm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getNumberNumberTermParserRuleCall_0_0()); 
	    }
		lv_number_0_0=rulenumberTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"number",
        		lv_number_0_0, 
        		"numberTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_stringValue_1_0=RULE_STRING
		{
			newLeafNode(lv_stringValue_1_0, grammarAccess.getTermAccess().getStringValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stringValue",
        		lv_stringValue_1_0, 
        		"STRING");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getIdentifierValidPropertyIdentParserRuleCall_2_0()); 
	    }
		lv_identifier_2_0=ruleValidPropertyIdent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"identifier",
        		lv_identifier_2_0, 
        		"ValidPropertyIdent");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getUrlURLTypeParserRuleCall_3_0()); 
	    }
		lv_url_3_0=ruleURLType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"url",
        		lv_url_3_0, 
        		"URLType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getFunctionFunctionParserRuleCall_4_0()); 
	    }
		lv_function_4_0=rulefunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_4_0, 
        		"function");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getHexColorHexColorParserRuleCall_5_0()); 
	    }
		lv_hexColor_5_0=ruleHexColor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"hexColor",
        		lv_hexColor_5_0, 
        		"HexColor");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulenumberTerm
entryRulenumberTerm returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getNumberTermRule()); } 
	 iv_rulenumberTerm=rulenumberTerm 
	 { $current=$iv_rulenumberTerm.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule numberTerm
rulenumberTerm returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getNumberTermAccess().getUnary_operatorParserRuleCall_0()); 
    }
    this_unary_operator_0=ruleunary_operator    {
		$current.merge(this_unary_operator_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getNumberTermAccess().getNUMBERParserRuleCall_1_0()); 
    }
    this_NUMBER_1=ruleNUMBER    {
		$current.merge(this_NUMBER_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberTermAccess().getPERCENTAGEParserRuleCall_1_1()); 
    }
    this_PERCENTAGE_2=rulePERCENTAGE    {
		$current.merge(this_PERCENTAGE_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberTermAccess().getLENGTHParserRuleCall_1_2()); 
    }
    this_LENGTH_3=ruleLENGTH    {
		$current.merge(this_LENGTH_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberTermAccess().getEMSParserRuleCall_1_3()); 
    }
    this_EMS_4=ruleEMS    {
		$current.merge(this_EMS_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberTermAccess().getEXSParserRuleCall_1_4()); 
    }
    this_EXS_5=ruleEXS    {
		$current.merge(this_EXS_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberTermAccess().getANGLEParserRuleCall_1_5()); 
    }
    this_ANGLE_6=ruleANGLE    {
		$current.merge(this_ANGLE_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberTermAccess().getTIMEParserRuleCall_1_6()); 
    }
    this_TIME_7=ruleTIME    {
		$current.merge(this_TIME_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberTermAccess().getFREQParserRuleCall_1_7()); 
    }
    this_FREQ_8=ruleFREQ    {
		$current.merge(this_FREQ_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulenum
entryRulenum returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumRule()); } 
	 iv_rulenum=rulenum 
	 { $current=$iv_rulenum.current.getText(); }  
	 EOF 
;

// Rule num
rulenum returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INTEGER_0=RULE_INTEGER    {
		$current.merge(this_INTEGER_0);
    }

    { 
    newLeafNode(this_INTEGER_0, grammarAccess.getNumAccess().getINTEGERTerminalRuleCall_0()); 
    }

    |    this_REAL_1=RULE_REAL    {
		$current.merge(this_REAL_1);
    }

    { 
    newLeafNode(this_REAL_1, grammarAccess.getNumAccess().getREALTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRulefunction
entryRulefunction returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_rulefunction=rulefunction 
	 { $current=$iv_rulefunction.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule function
rulefunction returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((	otherlv_0='-' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getHyphenMinusKeyword_0());
    }
)?(
(
		lv_name_1_0=RULE_IDENT
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunctionAccess().getNameIDENTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"IDENT");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2());
    }
(this_WS_3=RULE_WS
    { 
    newLeafNode(this_WS_3, grammarAccess.getFunctionAccess().getWSTerminalRuleCall_3()); 
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getExpressionExprParserRuleCall_4_0()); 
	    }
		lv_expression_4_0=ruleexpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_WS_5=RULE_WS
    { 
    newLeafNode(this_WS_5, grammarAccess.getFunctionAccess().getWSTerminalRuleCall_5()); 
    }
)*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_6());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleHexColor
entryRuleHexColor returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getHexColorRule()); } 
	 iv_ruleHexColor=ruleHexColor 
	 { $current=$iv_ruleHexColor.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule HexColor
ruleHexColor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
    this_HASH_0=RULE_HASH    {
		$current.merge(this_HASH_0);
    }

    { 
    newLeafNode(this_HASH_0, grammarAccess.getHexColorAccess().getHASHTerminalRuleCall()); 
    }

    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleURLType
entryRuleURLType returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getURLTypeRule()); }
	 iv_ruleURLType=ruleURLType 
	 { $current=$iv_ruleURLType.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule URLType
ruleURLType returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(	otherlv_0='url' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getURLTypeAccess().getUrlKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getURLTypeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_url_2_0=RULE_STRING
		{
			newLeafNode(lv_url_2_0, grammarAccess.getURLTypeAccess().getUrlSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getURLTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"url",
        		lv_url_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getURLTypeAccess().getRightParenthesisKeyword_3());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleNUMBER
entryRuleNUMBER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNUMBERRule()); } 
	 iv_ruleNUMBER=ruleNUMBER 
	 { $current=$iv_ruleNUMBER.current.getText(); }  
	 EOF 
;

// Rule NUMBER
ruleNUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getNUMBERAccess().getNumParserRuleCall()); 
    }
    this_num_0=rulenum    {
		$current.merge(this_num_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulePERCENTAGE
entryRulePERCENTAGE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPERCENTAGERule()); } 
	 iv_rulePERCENTAGE=rulePERCENTAGE 
	 { $current=$iv_rulePERCENTAGE.current.getText(); }  
	 EOF 
;

// Rule PERCENTAGE
rulePERCENTAGE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPERCENTAGEAccess().getNumParserRuleCall_0()); 
    }
    this_num_0=rulenum    {
		$current.merge(this_num_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPERCENTAGEAccess().getPercentSignKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleEMS
entryRuleEMS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEMSRule()); } 
	 iv_ruleEMS=ruleEMS 
	 { $current=$iv_ruleEMS.current.getText(); }  
	 EOF 
;

// Rule EMS
ruleEMS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEMSAccess().getNumParserRuleCall_0()); 
    }
    this_num_0=rulenum    {
		$current.merge(this_num_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='em' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEMSAccess().getEmKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleEXS
entryRuleEXS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXSRule()); } 
	 iv_ruleEXS=ruleEXS 
	 { $current=$iv_ruleEXS.current.getText(); }  
	 EOF 
;

// Rule EXS
ruleEXS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEXSAccess().getNumParserRuleCall_0()); 
    }
    this_num_0=rulenum    {
		$current.merge(this_num_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='ex' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXSAccess().getExKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleLENGTH
entryRuleLENGTH returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getLENGTHRule()); } 
	 iv_ruleLENGTH=ruleLENGTH 
	 { $current=$iv_ruleLENGTH.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule LENGTH
ruleLENGTH returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLENGTHAccess().getNumParserRuleCall_0()); 
    }
    this_num_0=rulenum    {
		$current.merge(this_num_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='px' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLENGTHAccess().getPxKeyword_1_0()); 
    }

    |
	kw='cm' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLENGTHAccess().getCmKeyword_1_1()); 
    }

    |
	kw='mm' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLENGTHAccess().getMmKeyword_1_2()); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLENGTHAccess().getInKeyword_1_3()); 
    }

    |
	kw='pt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLENGTHAccess().getPtKeyword_1_4()); 
    }

    |
	kw='pc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLENGTHAccess().getPcKeyword_1_5()); 
    }
))
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleANGLE
entryRuleANGLE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getANGLERule()); } 
	 iv_ruleANGLE=ruleANGLE 
	 { $current=$iv_ruleANGLE.current.getText(); }  
	 EOF 
;

// Rule ANGLE
ruleANGLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getANGLEAccess().getNumParserRuleCall_0()); 
    }
    this_num_0=rulenum    {
		$current.merge(this_num_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='deg' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getANGLEAccess().getDegKeyword_1_0()); 
    }

    |
	kw='rad' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getANGLEAccess().getRadKeyword_1_1()); 
    }

    |
	kw='grad' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getANGLEAccess().getGradKeyword_1_2()); 
    }
))
    ;





// Entry rule entryRuleTIME
entryRuleTIME returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTIMERule()); } 
	 iv_ruleTIME=ruleTIME 
	 { $current=$iv_ruleTIME.current.getText(); }  
	 EOF 
;

// Rule TIME
ruleTIME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTIMEAccess().getNumParserRuleCall_0()); 
    }
    this_num_0=rulenum    {
		$current.merge(this_num_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='ms' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTIMEAccess().getMsKeyword_1_0()); 
    }

    |
	kw='s' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTIMEAccess().getSKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRuleFREQ
entryRuleFREQ returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFREQRule()); } 
	 iv_ruleFREQ=ruleFREQ 
	 { $current=$iv_ruleFREQ.current.getText(); }  
	 EOF 
;

// Rule FREQ
ruleFREQ returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFREQAccess().getNumParserRuleCall_0()); 
    }
    this_num_0=rulenum    {
		$current.merge(this_num_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='hz' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFREQAccess().getHzKeyword_1_0()); 
    }

    |
	kw='khz' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFREQAccess().getKhzKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRuleIMPORTANT_SYM
entryRuleIMPORTANT_SYM returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIMPORTANT_SYMRule()); } 
	 iv_ruleIMPORTANT_SYM=ruleIMPORTANT_SYM 
	 { $current=$iv_ruleIMPORTANT_SYM.current.getText(); }  
	 EOF 
;

// Rule IMPORTANT_SYM
ruleIMPORTANT_SYM returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='!important' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIMPORTANT_SYMAccess().getImportantKeyword()); 
    }

    ;





// Entry rule entryRuleReservedWords
entryRuleReservedWords returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getReservedWordsRule()); } 
	 iv_ruleReservedWords=ruleReservedWords 
	 { $current=$iv_ruleReservedWords.current.getText(); }  
	 EOF 
;

// Rule ReservedWords
ruleReservedWords returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='em' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedWordsAccess().getEmKeyword_0()); 
    }

    |
	kw='ex' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedWordsAccess().getExKeyword_1()); 
    }

    |
	kw='px' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedWordsAccess().getPxKeyword_2()); 
    }

    |
	kw='cm' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedWordsAccess().getCmKeyword_3()); 
    }

    |
	kw='mm' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedWordsAccess().getMmKeyword_4()); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedWordsAccess().getInKeyword_5()); 
    }

    |
	kw='pt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedWordsAccess().getPtKeyword_6()); 
    }

    |
	kw='pc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedWordsAccess().getPcKeyword_7()); 
    }

    |
	kw='deg' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedWordsAccess().getDegKeyword_8()); 
    }

    |
	kw='rad' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedWordsAccess().getRadKeyword_9()); 
    }

    |
	kw='grad' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedWordsAccess().getGradKeyword_10()); 
    }

    |
	kw='ms' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedWordsAccess().getMsKeyword_11()); 
    }

    |
	kw='s' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedWordsAccess().getSKeyword_12()); 
    }

    |
	kw='hz' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedWordsAccess().getHzKeyword_13()); 
    }

    |
	kw='khz' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedWordsAccess().getKhzKeyword_14()); 
    }
)
    ;





// Rule css_not
rulecss_not returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='not(' 
	{
        $current = grammarAccess.getCss_notAccess().getNotEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCss_notAccess().getNotEnumLiteralDeclaration()); 
    }
);



RULE_INTEGER : ('0'..'9')+;

RULE_REAL : ('0'..'9')* '.' ('0'..'9')+;

RULE_HASH : '#' ('_'|'-'|'a'..'z'|'A'..'Z'|'0'..'9')+;

RULE_IDENT : ('_'|'a'..'z'|'A'..'Z') ('_'|'-'|'a'..'z'|'A'..'Z'|'0'..'9')*;

RULE_COMMA : ',';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_INCLUDES : '~=';

RULE_DASHMATCH : '|=';


