/*
* generated by Xtext
*/

package at.bestsolution.efxclipse.tooling.css.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class CssDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StylesheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "stylesheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCharsetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCharsetCharsetParserRuleCall_0_0 = (RuleCall)cCharsetAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportExpressionParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRulesetAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cRulesetRulesetParserRuleCall_2_0_0 = (RuleCall)cRulesetAssignment_2_0.eContents().get(0);
		private final Assignment cMediaAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cMediaMediaParserRuleCall_2_1_0 = (RuleCall)cMediaAssignment_2_1.eContents().get(0);
		private final Assignment cPageAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cPagePageParserRuleCall_2_2_0 = (RuleCall)cPageAssignment_2_2.eContents().get(0);
		
		//stylesheet:
		//
		//	charset=charset? imports+=importExpression* (ruleset+=ruleset | media+=media | page+=page)*;
		public ParserRule getRule() { return rule; }

		//charset=charset? imports+=importExpression* (ruleset+=ruleset | media+=media | page+=page)*
		public Group getGroup() { return cGroup; }

		//charset=charset?
		public Assignment getCharsetAssignment_0() { return cCharsetAssignment_0; }

		//charset
		public RuleCall getCharsetCharsetParserRuleCall_0_0() { return cCharsetCharsetParserRuleCall_0_0; }

		//imports+=importExpression*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//importExpression
		public RuleCall getImportsImportExpressionParserRuleCall_1_0() { return cImportsImportExpressionParserRuleCall_1_0; }

		//(ruleset+=ruleset | media+=media | page+=page)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ruleset+=ruleset
		public Assignment getRulesetAssignment_2_0() { return cRulesetAssignment_2_0; }

		//ruleset
		public RuleCall getRulesetRulesetParserRuleCall_2_0_0() { return cRulesetRulesetParserRuleCall_2_0_0; }

		//media+=media
		public Assignment getMediaAssignment_2_1() { return cMediaAssignment_2_1; }

		//media
		public RuleCall getMediaMediaParserRuleCall_2_1_0() { return cMediaMediaParserRuleCall_2_1_0; }

		//page+=page
		public Assignment getPageAssignment_2_2() { return cPageAssignment_2_2; }

		//page
		public RuleCall getPagePageParserRuleCall_2_2_0() { return cPagePageParserRuleCall_2_2_0; }
	}

	public class CharsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "charset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCharsetKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCHARSETKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCharsetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCharsetSTRINGTerminalRuleCall_1_0 = (RuleCall)cCharsetAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//charset:
		//
		//	("@charset" | "@CHARSET") charset=STRING ";";
		public ParserRule getRule() { return rule; }

		//("@charset" | "@CHARSET") charset=STRING ";"
		public Group getGroup() { return cGroup; }

		//"@charset" | "@CHARSET"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"@charset"
		public Keyword getCharsetKeyword_0_0() { return cCharsetKeyword_0_0; }

		//"@CHARSET"
		public Keyword getCHARSETKeyword_0_1() { return cCHARSETKeyword_0_1; }

		//charset=STRING
		public Assignment getCharsetAssignment_1() { return cCharsetAssignment_1; }

		//STRING
		public RuleCall getCharsetSTRINGTerminalRuleCall_1_0() { return cCharsetSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ImportExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "importExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cImportKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cIMPORTKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cURLTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cMediaListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMediaListMedia_listParserRuleCall_1_1_0 = (RuleCall)cMediaListAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//importExpression:
		//
		//	("@import" | "@IMPORT") value=STRING | URLType mediaList=media_list? ";";
		public ParserRule getRule() { return rule; }

		//("@import" | "@IMPORT") value=STRING | URLType mediaList=media_list? ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//("@import" | "@IMPORT") value=STRING
		public Group getGroup_0() { return cGroup_0; }

		//"@import" | "@IMPORT"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"@import"
		public Keyword getImportKeyword_0_0_0() { return cImportKeyword_0_0_0; }

		//"@IMPORT"
		public Keyword getIMPORTKeyword_0_0_1() { return cIMPORTKeyword_0_0_1; }

		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }

		//URLType mediaList=media_list? ";"
		public Group getGroup_1() { return cGroup_1; }

		//URLType
		public RuleCall getURLTypeParserRuleCall_1_0() { return cURLTypeParserRuleCall_1_0; }

		//mediaList=media_list?
		public Assignment getMediaListAssignment_1_1() { return cMediaListAssignment_1_1; }

		//media_list
		public RuleCall getMediaListMedia_listParserRuleCall_1_1_0() { return cMediaListMedia_listParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}

	public class PageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "page");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPageAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPageKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cPAGEKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cPseudoPageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPseudoPagePseudo_pageParserRuleCall_2_0 = (RuleCall)cPseudoPageAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationsCss_generic_declarationParserRuleCall_4_0 = (RuleCall)cDeclarationsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDeclarationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDeclarationsCss_generic_declarationParserRuleCall_5_1_0 = (RuleCall)cDeclarationsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//page:
		//
		//	{page} ("@page" | "@PAGE") pseudoPage=pseudo_page? "{" declarations+=css_generic_declaration? (";"
		//
		//	declarations+=css_generic_declaration?)* "}";
		public ParserRule getRule() { return rule; }

		//{page} ("@page" | "@PAGE") pseudoPage=pseudo_page? "{" declarations+=css_generic_declaration? (";"
		//
		//declarations+=css_generic_declaration?)* "}"
		public Group getGroup() { return cGroup; }

		//{page}
		public Action getPageAction_0() { return cPageAction_0; }

		//"@page" | "@PAGE"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"@page"
		public Keyword getPageKeyword_1_0() { return cPageKeyword_1_0; }

		//"@PAGE"
		public Keyword getPAGEKeyword_1_1() { return cPAGEKeyword_1_1; }

		//pseudoPage=pseudo_page?
		public Assignment getPseudoPageAssignment_2() { return cPseudoPageAssignment_2; }

		//pseudo_page
		public RuleCall getPseudoPagePseudo_pageParserRuleCall_2_0() { return cPseudoPagePseudo_pageParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//declarations+=css_generic_declaration?
		public Assignment getDeclarationsAssignment_4() { return cDeclarationsAssignment_4; }

		//css_generic_declaration
		public RuleCall getDeclarationsCss_generic_declarationParserRuleCall_4_0() { return cDeclarationsCss_generic_declarationParserRuleCall_4_0; }

		//(";" declarations+=css_generic_declaration?)*
		public Group getGroup_5() { return cGroup_5; }

		//";"
		public Keyword getSemicolonKeyword_5_0() { return cSemicolonKeyword_5_0; }

		//declarations+=css_generic_declaration?
		public Assignment getDeclarationsAssignment_5_1() { return cDeclarationsAssignment_5_1; }

		//css_generic_declaration
		public RuleCall getDeclarationsCss_generic_declarationParserRuleCall_5_1_0() { return cDeclarationsCss_generic_declarationParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class Pseudo_pageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pseudo_page");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//pseudo_page:
		//
		//	":" IDENT;
		public ParserRule getRule() { return rule; }

		//":" IDENT
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1() { return cIDENTTerminalRuleCall_1; }
	}

	public class MediaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "media");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cMediaKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMEDIAKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cMedialistAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMedialistMedia_listParserRuleCall_1_0 = (RuleCall)cMedialistAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRulesetsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRulesetsRulesetParserRuleCall_3_0 = (RuleCall)cRulesetsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//media:
		//
		//	("@media" | "@MEDIA") medialist=media_list "{" rulesets+=ruleset* "}";
		public ParserRule getRule() { return rule; }

		//("@media" | "@MEDIA") medialist=media_list "{" rulesets+=ruleset* "}"
		public Group getGroup() { return cGroup; }

		//"@media" | "@MEDIA"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"@media"
		public Keyword getMediaKeyword_0_0() { return cMediaKeyword_0_0; }

		//"@MEDIA"
		public Keyword getMEDIAKeyword_0_1() { return cMEDIAKeyword_0_1; }

		//medialist=media_list
		public Assignment getMedialistAssignment_1() { return cMedialistAssignment_1; }

		//media_list
		public RuleCall getMedialistMedia_listParserRuleCall_1_0() { return cMedialistMedia_listParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//rulesets+=ruleset*
		public Assignment getRulesetsAssignment_3() { return cRulesetsAssignment_3; }

		//ruleset
		public RuleCall getRulesetsRulesetParserRuleCall_3_0() { return cRulesetsRulesetParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class Media_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "media_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMediumParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cMediumParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//media_list:
		//
		//	medium (COMMA medium)*;
		public ParserRule getRule() { return rule; }

		//medium (COMMA medium)*
		public Group getGroup() { return cGroup; }

		//medium
		public RuleCall getMediumParserRuleCall_0() { return cMediumParserRuleCall_0; }

		//(COMMA medium)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//medium
		public RuleCall getMediumParserRuleCall_1_1() { return cMediumParserRuleCall_1_1; }
	}

	public class MediumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "medium");
		private final RuleCall cIDENTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//medium:
		//
		//	IDENT;
		public ParserRule getRule() { return rule; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall() { return cIDENTTerminalRuleCall; }
	}

	public class RulesetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ruleset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectorsSelectorParserRuleCall_0_0 = (RuleCall)cSelectorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cSelectorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectorsSelectorParserRuleCall_1_1_0 = (RuleCall)cSelectorsAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDeclarationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cDeclarationsCss_declarationParserRuleCall_3_0_0 = (RuleCall)cDeclarationsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ruleset:
		//
		//	selectors+=selector (COMMA selectors+=selector)* "{" (declarations+=css_declaration ";")* "}";
		public ParserRule getRule() { return rule; }

		//selectors+=selector (COMMA selectors+=selector)* "{" (declarations+=css_declaration ";")* "}"
		public Group getGroup() { return cGroup; }

		//selectors+=selector
		public Assignment getSelectorsAssignment_0() { return cSelectorsAssignment_0; }

		//selector
		public RuleCall getSelectorsSelectorParserRuleCall_0_0() { return cSelectorsSelectorParserRuleCall_0_0; }

		//(COMMA selectors+=selector)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//selectors+=selector
		public Assignment getSelectorsAssignment_1_1() { return cSelectorsAssignment_1_1; }

		//selector
		public RuleCall getSelectorsSelectorParserRuleCall_1_1_0() { return cSelectorsSelectorParserRuleCall_1_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(declarations+=css_declaration ";")*
		public Group getGroup_3() { return cGroup_3; }

		//declarations+=css_declaration
		public Assignment getDeclarationsAssignment_3_0() { return cDeclarationsAssignment_3_0; }

		//css_declaration
		public RuleCall getDeclarationsCss_declarationParserRuleCall_3_0_0() { return cDeclarationsCss_declarationParserRuleCall_3_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSimpleselectorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSimpleselectorsSimple_selectorParserRuleCall_0_0 = (RuleCall)cSimpleselectorsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cCombinatorAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cCombinatorCombinatorParserRuleCall_1_0_0_0 = (RuleCall)cCombinatorAssignment_1_0_0.eContents().get(0);
		private final Assignment cSelectorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cSelectorSelectorParserRuleCall_1_0_1_0 = (RuleCall)cSelectorAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cCombinatorAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cCombinatorCombinatorParserRuleCall_1_1_1_0_0 = (RuleCall)cCombinatorAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cSelectorAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cSelectorSelectorParserRuleCall_1_1_1_1_0 = (RuleCall)cSelectorAssignment_1_1_1_1.eContents().get(0);
		
		//selector hidden():
		//
		//	simpleselectors+=simple_selector (combinator=combinator selector=selector | WS+ (combinator=combinator?
		//
		//	selector=selector)?)?;
		public ParserRule getRule() { return rule; }

		//simpleselectors+=simple_selector (combinator=combinator selector=selector | WS+ (combinator=combinator?
		//
		//selector=selector)?)?
		public Group getGroup() { return cGroup; }

		//simpleselectors+=simple_selector
		public Assignment getSimpleselectorsAssignment_0() { return cSimpleselectorsAssignment_0; }

		//simple_selector
		public RuleCall getSimpleselectorsSimple_selectorParserRuleCall_0_0() { return cSimpleselectorsSimple_selectorParserRuleCall_0_0; }

		//(combinator=combinator selector=selector | WS+ (combinator=combinator? selector=selector)?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//combinator=combinator selector=selector
		public Group getGroup_1_0() { return cGroup_1_0; }

		//combinator=combinator
		public Assignment getCombinatorAssignment_1_0_0() { return cCombinatorAssignment_1_0_0; }

		//combinator
		public RuleCall getCombinatorCombinatorParserRuleCall_1_0_0_0() { return cCombinatorCombinatorParserRuleCall_1_0_0_0; }

		//selector=selector
		public Assignment getSelectorAssignment_1_0_1() { return cSelectorAssignment_1_0_1; }

		//selector
		public RuleCall getSelectorSelectorParserRuleCall_1_0_1_0() { return cSelectorSelectorParserRuleCall_1_0_1_0; }

		//WS+ (combinator=combinator? selector=selector)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//WS+
		public RuleCall getWSTerminalRuleCall_1_1_0() { return cWSTerminalRuleCall_1_1_0; }

		//(combinator=combinator? selector=selector)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//combinator=combinator?
		public Assignment getCombinatorAssignment_1_1_1_0() { return cCombinatorAssignment_1_1_1_0; }

		//combinator
		public RuleCall getCombinatorCombinatorParserRuleCall_1_1_1_0_0() { return cCombinatorCombinatorParserRuleCall_1_1_1_0_0; }

		//selector=selector
		public Assignment getSelectorAssignment_1_1_1_1() { return cSelectorAssignment_1_1_1_1; }

		//selector
		public RuleCall getSelectorSelectorParserRuleCall_1_1_1_1_0() { return cSelectorSelectorParserRuleCall_1_1_1_1_0; }
	}

	public class Simple_selectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simple_selector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cElementAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cElementElement_nameParserRuleCall_0_0_0_0 = (RuleCall)cElementAssignment_0_0_0.eContents().get(0);
		private final Assignment cUniversalAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cUniversalCss_universalParserRuleCall_0_0_1_0 = (RuleCall)cUniversalAssignment_0_0_1.eContents().get(0);
		private final Assignment cSubSelectorsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSubSelectorsSub_selectorParserRuleCall_0_1_0 = (RuleCall)cSubSelectorsAssignment_0_1.eContents().get(0);
		private final Assignment cSubSelectorsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSubSelectorsSub_selectorParserRuleCall_1_0 = (RuleCall)cSubSelectorsAssignment_1.eContents().get(0);
		
		//simple_selector:
		//
		//	(element=element_name | universal=css_universal) subSelectors+=sub_selector* | subSelectors+=sub_selector+;
		public ParserRule getRule() { return rule; }

		//(element=element_name | universal=css_universal) subSelectors+=sub_selector* | subSelectors+=sub_selector+
		public Alternatives getAlternatives() { return cAlternatives; }

		//(element=element_name | universal=css_universal) subSelectors+=sub_selector*
		public Group getGroup_0() { return cGroup_0; }

		//element=element_name | universal=css_universal
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//element=element_name
		public Assignment getElementAssignment_0_0_0() { return cElementAssignment_0_0_0; }

		//element_name
		public RuleCall getElementElement_nameParserRuleCall_0_0_0_0() { return cElementElement_nameParserRuleCall_0_0_0_0; }

		//universal=css_universal
		public Assignment getUniversalAssignment_0_0_1() { return cUniversalAssignment_0_0_1; }

		//css_universal
		public RuleCall getUniversalCss_universalParserRuleCall_0_0_1_0() { return cUniversalCss_universalParserRuleCall_0_0_1_0; }

		//subSelectors+=sub_selector*
		public Assignment getSubSelectorsAssignment_0_1() { return cSubSelectorsAssignment_0_1; }

		//sub_selector
		public RuleCall getSubSelectorsSub_selectorParserRuleCall_0_1_0() { return cSubSelectorsSub_selectorParserRuleCall_0_1_0; }

		//subSelectors+=sub_selector+
		public Assignment getSubSelectorsAssignment_1() { return cSubSelectorsAssignment_1; }

		//sub_selector
		public RuleCall getSubSelectorsSub_selectorParserRuleCall_1_0() { return cSubSelectorsSub_selectorParserRuleCall_1_0; }
	}

	public class Element_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "element_name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReservedWordsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//element_name:
		//
		//	IDENT | ReservedWords;
		public ParserRule getRule() { return rule; }

		//IDENT | ReservedWords
		public Alternatives getAlternatives() { return cAlternatives; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0() { return cIDENTTerminalRuleCall_0; }

		//ReservedWords
		public RuleCall getReservedWordsParserRuleCall_1() { return cReservedWordsParserRuleCall_1; }
	}

	public class Sub_selectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sub_selector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdCss_idParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cClassAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cClassCss_classParserRuleCall_1_0 = (RuleCall)cClassAssignment_1.eContents().get(0);
		private final Assignment cAttribAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cAttribCss_attribParserRuleCall_2_0 = (RuleCall)cAttribAssignment_2.eContents().get(0);
		private final Assignment cPseudoclassAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cPseudoclassCss_pseudoParserRuleCall_3_0 = (RuleCall)cPseudoclassAssignment_3.eContents().get(0);
		private final Assignment cNegotationAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cNegotationCss_negationParserRuleCall_4_0 = (RuleCall)cNegotationAssignment_4.eContents().get(0);
		
		//sub_selector:
		//
		//	id=css_id | class=css_class | attrib=css_attrib | pseudoclass=css_pseudo | negotation=css_negation;
		public ParserRule getRule() { return rule; }

		//id=css_id | class=css_class | attrib=css_attrib | pseudoclass=css_pseudo | negotation=css_negation
		public Alternatives getAlternatives() { return cAlternatives; }

		//id=css_id
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//css_id
		public RuleCall getIdCss_idParserRuleCall_0_0() { return cIdCss_idParserRuleCall_0_0; }

		//class=css_class
		public Assignment getClassAssignment_1() { return cClassAssignment_1; }

		//css_class
		public RuleCall getClassCss_classParserRuleCall_1_0() { return cClassCss_classParserRuleCall_1_0; }

		//attrib=css_attrib
		public Assignment getAttribAssignment_2() { return cAttribAssignment_2; }

		//css_attrib
		public RuleCall getAttribCss_attribParserRuleCall_2_0() { return cAttribCss_attribParserRuleCall_2_0; }

		//pseudoclass=css_pseudo
		public Assignment getPseudoclassAssignment_3() { return cPseudoclassAssignment_3; }

		//css_pseudo
		public RuleCall getPseudoclassCss_pseudoParserRuleCall_3_0() { return cPseudoclassCss_pseudoParserRuleCall_3_0; }

		//negotation=css_negation
		public Assignment getNegotationAssignment_4() { return cNegotationAssignment_4; }

		//css_negation
		public RuleCall getNegotationCss_negationParserRuleCall_4_0() { return cNegotationCss_negationParserRuleCall_4_0; }
	}

	public class Css_type_selectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_type_selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCss_namespace_prefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cElement_nameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//css_type_selector:
		//
		//	css_namespace_prefix? element_name;
		public ParserRule getRule() { return rule; }

		//css_namespace_prefix? element_name
		public Group getGroup() { return cGroup; }

		//css_namespace_prefix?
		public RuleCall getCss_namespace_prefixParserRuleCall_0() { return cCss_namespace_prefixParserRuleCall_0; }

		//element_name
		public RuleCall getElement_nameParserRuleCall_1() { return cElement_nameParserRuleCall_1; }
	}

	public class Css_namespace_prefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_namespace_prefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDENTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//css_namespace_prefix:
		//
		//	(IDENT | "*")? "|";
		public ParserRule getRule() { return rule; }

		//(IDENT | "*")? "|"
		public Group getGroup() { return cGroup; }

		//(IDENT | "*")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0_0() { return cIDENTTerminalRuleCall_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_0_1() { return cAsteriskKeyword_0_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }
	}

	public class Css_universalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_universal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCss_namespace_prefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//css_universal:
		//
		//	css_namespace_prefix? "*";
		public ParserRule getRule() { return rule; }

		//css_namespace_prefix? "*"
		public Group getGroup() { return cGroup; }

		//css_namespace_prefix?
		public RuleCall getCss_namespace_prefixParserRuleCall_0() { return cCss_namespace_prefixParserRuleCall_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class Css_classElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cReservedWordsParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//css_class:
		//
		//	"." (IDENT | ReservedWords);
		public ParserRule getRule() { return rule; }

		//"." (IDENT | ReservedWords)
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//IDENT | ReservedWords
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1_0() { return cIDENTTerminalRuleCall_1_0; }

		//ReservedWords
		public RuleCall getReservedWordsParserRuleCall_1_1() { return cReservedWordsParserRuleCall_1_1; }
	}

	public class Css_idElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_id");
		private final RuleCall cHASHTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//css_id:
		//
		//	HASH;
		public ParserRule getRule() { return rule; }

		//HASH
		public RuleCall getHASHTerminalRuleCall() { return cHASHTerminalRuleCall; }
	}

	public class Css_attribElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_attrib");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cReservedWordsParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cCircumflexAccentEqualsSignKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cDollarSignEqualsSignKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Keyword cAsteriskEqualsSignKeyword_2_0_2 = (Keyword)cAlternatives_2_0.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0_3 = (Keyword)cAlternatives_2_0.eContents().get(3);
		private final RuleCall cINCLUDESTerminalRuleCall_2_0_4 = (RuleCall)cAlternatives_2_0.eContents().get(4);
		private final RuleCall cDASHMATCHTerminalRuleCall_2_0_5 = (RuleCall)cAlternatives_2_0.eContents().get(5);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_1_0 = (Alternatives)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cIDENTTerminalRuleCall_2_1_0_0 = (RuleCall)cAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cReservedWordsParserRuleCall_2_1_0_1 = (RuleCall)cAlternatives_2_1_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//css_attrib:
		//
		//	"[" (IDENT | ReservedWords) (("^=" | "$=" | "*=" | "=" | INCLUDES | DASHMATCH) ((IDENT | ReservedWords) | STRING))?
		//
		//	"]";
		public ParserRule getRule() { return rule; }

		//"[" (IDENT | ReservedWords) (("^=" | "$=" | "*=" | "=" | INCLUDES | DASHMATCH) ((IDENT | ReservedWords) | STRING))? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//IDENT | ReservedWords
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1_0() { return cIDENTTerminalRuleCall_1_0; }

		//ReservedWords
		public RuleCall getReservedWordsParserRuleCall_1_1() { return cReservedWordsParserRuleCall_1_1; }

		//(("^=" | "$=" | "*=" | "=" | INCLUDES | DASHMATCH) ((IDENT | ReservedWords) | STRING))?
		public Group getGroup_2() { return cGroup_2; }

		//"^=" | "$=" | "*=" | "=" | INCLUDES | DASHMATCH
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_2_0_0() { return cCircumflexAccentEqualsSignKeyword_2_0_0; }

		//"$="
		public Keyword getDollarSignEqualsSignKeyword_2_0_1() { return cDollarSignEqualsSignKeyword_2_0_1; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_2_0_2() { return cAsteriskEqualsSignKeyword_2_0_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_3() { return cEqualsSignKeyword_2_0_3; }

		//INCLUDES
		public RuleCall getINCLUDESTerminalRuleCall_2_0_4() { return cINCLUDESTerminalRuleCall_2_0_4; }

		//DASHMATCH
		public RuleCall getDASHMATCHTerminalRuleCall_2_0_5() { return cDASHMATCHTerminalRuleCall_2_0_5; }

		//(IDENT | ReservedWords) | STRING
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//IDENT | ReservedWords
		public Alternatives getAlternatives_2_1_0() { return cAlternatives_2_1_0; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_2_1_0_0() { return cIDENTTerminalRuleCall_2_1_0_0; }

		//ReservedWords
		public RuleCall getReservedWordsParserRuleCall_2_1_0_1() { return cReservedWordsParserRuleCall_2_1_0_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_1_1() { return cSTRINGTerminalRuleCall_2_1_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class Css_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_declaration");
		private final RuleCall cCss_generic_declarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//css_declaration: //| css_fx_declaration //| css_21_declaration
		// css_generic_declaration;
		public ParserRule getRule() { return rule; }

		////| css_fx_declaration //| css_21_declaration
		// css_generic_declaration
		public RuleCall getCss_generic_declarationParserRuleCall() { return cCss_generic_declarationParserRuleCall; }
	}

	public class Css_generic_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_generic_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyCss_propertyParserRuleCall_0_0 = (RuleCall)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExprParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Assignment cPrioAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPrioCss_prioParserRuleCall_3_0 = (RuleCall)cPrioAssignment_3.eContents().get(0);
		
		//css_generic_declaration:
		//
		//	property=css_property ":" expression=expr prio=css_prio?;
		public ParserRule getRule() { return rule; }

		//property=css_property ":" expression=expr prio=css_prio?
		public Group getGroup() { return cGroup; }

		//property=css_property
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//css_property
		public RuleCall getPropertyCss_propertyParserRuleCall_0_0() { return cPropertyCss_propertyParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//expression=expr
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//expr
		public RuleCall getExpressionExprParserRuleCall_2_0() { return cExpressionExprParserRuleCall_2_0; }

		//prio=css_prio?
		public Assignment getPrioAssignment_3() { return cPrioAssignment_3; }

		//css_prio
		public RuleCall getPrioCss_prioParserRuleCall_3_0() { return cPrioCss_prioParserRuleCall_3_0; }
	}

	public class Css_prioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_prio");
		private final RuleCall cIMPORTANT_SYMParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//css_prio:
		//
		//	IMPORTANT_SYM;
		public ParserRule getRule() { return rule; }

		//IMPORTANT_SYM
		public RuleCall getIMPORTANT_SYMParserRuleCall() { return cIMPORTANT_SYMParserRuleCall; }
	}

	public class Css_propertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//css_property:
		//
		//	"-"? IDENT;
		public ParserRule getRule() { return rule; }

		//"-"? IDENT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1() { return cIDENTTerminalRuleCall_1; }
	}

	public class Css_pseudoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_pseudo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cIDENTTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cFunctional_pseudoParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//css_pseudo:
		//
		//	":" ":"? (IDENT | functional_pseudo);
		public ParserRule getRule() { return rule; }

		//":" ":"? (IDENT | functional_pseudo)
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//":"?
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//IDENT | functional_pseudo
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_2_0() { return cIDENTTerminalRuleCall_2_0; }

		//functional_pseudo
		public RuleCall getFunctional_pseudoParserRuleCall_2_1() { return cFunctional_pseudoParserRuleCall_2_1; }
	}

	public class Css_negationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_negation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cCss_negation_argParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//css_negation:
		//
		//	":not" "(" css_negation_arg ")";
		public ParserRule getRule() { return rule; }

		//":not" "(" css_negation_arg ")"
		public Group getGroup() { return cGroup; }

		//":not"
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//css_negation_arg
		public RuleCall getCss_negation_argParserRuleCall_2() { return cCss_negation_argParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class Css_negation_argElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_negation_arg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCss_type_selectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCss_universalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHASHTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCss_classParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCss_attribParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCss_pseudoParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//css_negation_arg:
		//
		//	css_type_selector | css_universal | HASH | css_class | css_attrib | css_pseudo;
		public ParserRule getRule() { return rule; }

		//css_type_selector | css_universal | HASH | css_class | css_attrib | css_pseudo
		public Alternatives getAlternatives() { return cAlternatives; }

		//css_type_selector
		public RuleCall getCss_type_selectorParserRuleCall_0() { return cCss_type_selectorParserRuleCall_0; }

		//css_universal
		public RuleCall getCss_universalParserRuleCall_1() { return cCss_universalParserRuleCall_1; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_2() { return cHASHTerminalRuleCall_2; }

		//css_class
		public RuleCall getCss_classParserRuleCall_3() { return cCss_classParserRuleCall_3; }

		//css_attrib
		public RuleCall getCss_attribParserRuleCall_4() { return cCss_attribParserRuleCall_4; }

		//css_pseudo
		public RuleCall getCss_pseudoParserRuleCall_5() { return cCss_pseudoParserRuleCall_5; }
	}

	public class Functional_pseudoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "functional_pseudo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cFunction_exprParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//functional_pseudo:
		//
		//	IDENT "(" function_expr ")";
		public ParserRule getRule() { return rule; }

		//IDENT "(" function_expr ")"
		public Group getGroup() { return cGroup; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0() { return cIDENTTerminalRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//function_expr
		public RuleCall getFunction_exprParserRuleCall_2() { return cFunction_exprParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class Function_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function_expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cDIMENSIONParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNUMBERParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIDENTTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//function_expr:
		//
		//	("+" | "-" | DIMENSION | NUMBER | STRING | IDENT)+;
		public ParserRule getRule() { return rule; }

		//("+" | "-" | DIMENSION | NUMBER | STRING | IDENT)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//DIMENSION
		public RuleCall getDIMENSIONParserRuleCall_2() { return cDIMENSIONParserRuleCall_2; }

		//NUMBER
		public RuleCall getNUMBERParserRuleCall_3() { return cNUMBERParserRuleCall_3; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_5() { return cIDENTTerminalRuleCall_5; }
	}

	public class DIMENSIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DIMENSION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPERCENTAGEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLENGTHParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEMSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEXSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cANGLEParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTIMEParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFREQParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//DIMENSION:
		//
		//	PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ;
		public ParserRule getRule() { return rule; }

		//PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ
		public Alternatives getAlternatives() { return cAlternatives; }

		//PERCENTAGE
		public RuleCall getPERCENTAGEParserRuleCall_0() { return cPERCENTAGEParserRuleCall_0; }

		//LENGTH
		public RuleCall getLENGTHParserRuleCall_1() { return cLENGTHParserRuleCall_1; }

		//EMS
		public RuleCall getEMSParserRuleCall_2() { return cEMSParserRuleCall_2; }

		//EXS
		public RuleCall getEXSParserRuleCall_3() { return cEXSParserRuleCall_3; }

		//ANGLE
		public RuleCall getANGLEParserRuleCall_4() { return cANGLEParserRuleCall_4; }

		//TIME
		public RuleCall getTIMEParserRuleCall_5() { return cTIMEParserRuleCall_5; }

		//FREQ
		public RuleCall getFREQParserRuleCall_6() { return cFREQParserRuleCall_6; }
	}

	public class CombinatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "combinator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cTildeKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//combinator:
		//
		//	("+" | ">" | "~") WS*;
		public ParserRule getRule() { return rule; }

		//("+" | ">" | "~") WS*
		public Group getGroup() { return cGroup; }

		//"+" | ">" | "~"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_1() { return cGreaterThanSignKeyword_0_1; }

		//"~"
		public Keyword getTildeKeyword_0_2() { return cTildeKeyword_0_2; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//operator:
		//
		//	"/" | COMMA;
		public ParserRule getRule() { return rule; }

		//"/" | COMMA
		public Alternatives getAlternatives() { return cAlternatives; }

		//"/"
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1() { return cCOMMATerminalRuleCall_1; }
	}

	public class Unary_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unary_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//unary_operator:
		//
		//	"-" | "+";
		public ParserRule getRule() { return rule; }

		//"-" | "+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//"+"
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermGroupsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermGroupsTermGroupParserRuleCall_0_0 = (RuleCall)cTermGroupsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cOperatorParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cTermGroupsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTermGroupsTermGroupParserRuleCall_1_1_0 = (RuleCall)cTermGroupsAssignment_1_1.eContents().get(0);
		
		//expr hidden(WS, ML_COMMENT):
		//
		//	termGroups+=termGroup (operator termGroups+=termGroup)*;
		public ParserRule getRule() { return rule; }

		//termGroups+=termGroup (operator termGroups+=termGroup)*
		public Group getGroup() { return cGroup; }

		//termGroups+=termGroup
		public Assignment getTermGroupsAssignment_0() { return cTermGroupsAssignment_0; }

		//termGroup
		public RuleCall getTermGroupsTermGroupParserRuleCall_0_0() { return cTermGroupsTermGroupParserRuleCall_0_0; }

		//(operator termGroups+=termGroup)*
		public Group getGroup_1() { return cGroup_1; }

		//operator
		public RuleCall getOperatorParserRuleCall_1_0() { return cOperatorParserRuleCall_1_0; }

		//termGroups+=termGroup
		public Assignment getTermGroupsAssignment_1_1() { return cTermGroupsAssignment_1_1; }

		//termGroup
		public RuleCall getTermGroupsTermGroupParserRuleCall_1_1_0() { return cTermGroupsTermGroupParserRuleCall_1_1_0; }
	}

	public class TermGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "termGroup");
		private final Assignment cTermsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTermsTermParserRuleCall_0 = (RuleCall)cTermsAssignment.eContents().get(0);
		
		//termGroup:
		//
		//	terms+=term+;
		public ParserRule getRule() { return rule; }

		//terms+=term+
		public Assignment getTermsAssignment() { return cTermsAssignment; }

		//term
		public RuleCall getTermsTermParserRuleCall_0() { return cTermsTermParserRuleCall_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberNumberTermParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cStringValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringValueAssignment_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIdentifierCss_propertyParserRuleCall_2_0 = (RuleCall)cIdentifierAssignment_2.eContents().get(0);
		private final Assignment cUrlAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cUrlURLTypeParserRuleCall_3_0 = (RuleCall)cUrlAssignment_3.eContents().get(0);
		private final Assignment cFunctionAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cFunctionFunctionParserRuleCall_4_0 = (RuleCall)cFunctionAssignment_4.eContents().get(0);
		private final Assignment cHexColorAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cHexColorHexColorParserRuleCall_5_0 = (RuleCall)cHexColorAssignment_5.eContents().get(0);
		
		////  	| gradient=Gradient
		// //  	| pair=pair
		// term:
		//
		//	number=numberTerm | stringValue=STRING | identifier=css_property | url=URLType | function=function |
		//
		//	hexColor=HexColor;
		public ParserRule getRule() { return rule; }

		//number=numberTerm | stringValue=STRING | identifier=css_property | url=URLType | function=function | hexColor=HexColor
		public Alternatives getAlternatives() { return cAlternatives; }

		//number=numberTerm
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }

		//numberTerm
		public RuleCall getNumberNumberTermParserRuleCall_0_0() { return cNumberNumberTermParserRuleCall_0_0; }

		//stringValue=STRING
		public Assignment getStringValueAssignment_1() { return cStringValueAssignment_1; }

		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_1_0() { return cStringValueSTRINGTerminalRuleCall_1_0; }

		//identifier=css_property
		public Assignment getIdentifierAssignment_2() { return cIdentifierAssignment_2; }

		//css_property
		public RuleCall getIdentifierCss_propertyParserRuleCall_2_0() { return cIdentifierCss_propertyParserRuleCall_2_0; }

		//url=URLType
		public Assignment getUrlAssignment_3() { return cUrlAssignment_3; }

		//URLType
		public RuleCall getUrlURLTypeParserRuleCall_3_0() { return cUrlURLTypeParserRuleCall_3_0; }

		//function=function
		public Assignment getFunctionAssignment_4() { return cFunctionAssignment_4; }

		//function
		public RuleCall getFunctionFunctionParserRuleCall_4_0() { return cFunctionFunctionParserRuleCall_4_0; }

		//hexColor=HexColor
		public Assignment getHexColorAssignment_5() { return cHexColorAssignment_5; }

		//HexColor
		public RuleCall getHexColorHexColorParserRuleCall_5_0() { return cHexColorHexColorParserRuleCall_5_0; }
	}

	public class NumberTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "numberTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnary_operatorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cNUMBERParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cPERCENTAGEParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cLENGTHParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cEMSParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cEXSParserRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		private final RuleCall cANGLEParserRuleCall_1_5 = (RuleCall)cAlternatives_1.eContents().get(5);
		private final RuleCall cTIMEParserRuleCall_1_6 = (RuleCall)cAlternatives_1.eContents().get(6);
		private final RuleCall cFREQParserRuleCall_1_7 = (RuleCall)cAlternatives_1.eContents().get(7);
		
		////Gradient:
		// //	LinearGradient | RadialGradient 
		// //;
		// //
		// //LinearGradient:
		//
		//
		////	IDENT '(' start=PointValue ')' IDENT '(' end=PointValue ')' IDENT ( '(' stops+=StopValue ')' )+ // ( ('repeat' | 'reflect') )?
		//
		//
		////;
		// //
		// //RadialGradient:
		//
		//
		////	IDENT ( '(' center=PointValue ')' COMMA )? radius=SizeType ( IDENT '(' focus=PointValue ')' ) IDENT ( '(' stops+=StopValue ')' )+ //( ( 'repeat' | 'reflect' ))?
		//
		//
		////;
		// //
		// //StopValue:
		// //	pos=SizeType COMMA color=HexColor
		// //;
		// //
		// //PointValue:
		// //	x=SizeType COMMA y=SizeType
		//
		//
		////;
		// //pair:
		// //	'(' expr1=expr COMMA expr2=expr ')'
		// //;
		// numberTerm hidden():
		//
		//	unary_operator? (NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ);
		public ParserRule getRule() { return rule; }

		//unary_operator? (NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ)
		public Group getGroup() { return cGroup; }

		//unary_operator?
		public RuleCall getUnary_operatorParserRuleCall_0() { return cUnary_operatorParserRuleCall_0; }

		//NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//NUMBER
		public RuleCall getNUMBERParserRuleCall_1_0() { return cNUMBERParserRuleCall_1_0; }

		//PERCENTAGE
		public RuleCall getPERCENTAGEParserRuleCall_1_1() { return cPERCENTAGEParserRuleCall_1_1; }

		//LENGTH
		public RuleCall getLENGTHParserRuleCall_1_2() { return cLENGTHParserRuleCall_1_2; }

		//EMS
		public RuleCall getEMSParserRuleCall_1_3() { return cEMSParserRuleCall_1_3; }

		//EXS
		public RuleCall getEXSParserRuleCall_1_4() { return cEXSParserRuleCall_1_4; }

		//ANGLE
		public RuleCall getANGLEParserRuleCall_1_5() { return cANGLEParserRuleCall_1_5; }

		//TIME
		public RuleCall getTIMEParserRuleCall_1_6() { return cTIMEParserRuleCall_1_6; }

		//FREQ
		public RuleCall getFREQParserRuleCall_1_7() { return cFREQParserRuleCall_1_7; }
	}

	public class NumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "num");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTEGERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cREALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//num:
		//
		//	INTEGER | REAL;
		public ParserRule getRule() { return rule; }

		//INTEGER | REAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//INTEGER
		public RuleCall getINTEGERTerminalRuleCall_0() { return cINTEGERTerminalRuleCall_0; }

		//REAL
		public RuleCall getREALTerminalRuleCall_1() { return cREALTerminalRuleCall_1; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExprParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//function hidden():
		//
		//	"-"? name=IDENT "(" WS* expression=expr WS* ")";
		public ParserRule getRule() { return rule; }

		//"-"? name=IDENT "(" WS* expression=expr WS* ")"
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//name=IDENT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0() { return cNameIDENTTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//WS*
		public RuleCall getWSTerminalRuleCall_3() { return cWSTerminalRuleCall_3; }

		//expression=expr
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//expr
		public RuleCall getExpressionExprParserRuleCall_4_0() { return cExpressionExprParserRuleCall_4_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_5() { return cWSTerminalRuleCall_5; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class HexColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HexColor");
		private final RuleCall cHASHTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//HexColor hidden():
		//
		//	HASH;
		public ParserRule getRule() { return rule; }

		//HASH
		public RuleCall getHASHTerminalRuleCall() { return cHASHTerminalRuleCall; }
	}

	public class URLTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URLType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUrlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUrlSTRINGTerminalRuleCall_2_0 = (RuleCall)cUrlAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//URLType hidden():
		//
		//	"url" "(" url=STRING ")";
		public ParserRule getRule() { return rule; }

		//"url" "(" url=STRING ")"
		public Group getGroup() { return cGroup; }

		//"url"
		public Keyword getUrlKeyword_0() { return cUrlKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//url=STRING
		public Assignment getUrlAssignment_2() { return cUrlAssignment_2; }

		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_2_0() { return cUrlSTRINGTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		private final RuleCall cNumParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NUMBER:
		//
		//	num;
		public ParserRule getRule() { return rule; }

		//num
		public RuleCall getNumParserRuleCall() { return cNumParserRuleCall; }
	}

	public class PERCENTAGEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PERCENTAGE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PERCENTAGE:
		//
		//	num "%";
		public ParserRule getRule() { return rule; }

		//num "%"
		public Group getGroup() { return cGroup; }

		//num
		public RuleCall getNumParserRuleCall_0() { return cNumParserRuleCall_0; }

		//"%"
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
	}

	public class EMSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EMS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EMS:
		//
		//	num "em";
		public ParserRule getRule() { return rule; }

		//num "em"
		public Group getGroup() { return cGroup; }

		//num
		public RuleCall getNumParserRuleCall_0() { return cNumParserRuleCall_0; }

		//"em"
		public Keyword getEmKeyword_1() { return cEmKeyword_1; }
	}

	public class EXSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cExKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EXS:
		//
		//	num "ex";
		public ParserRule getRule() { return rule; }

		//num "ex"
		public Group getGroup() { return cGroup; }

		//num
		public RuleCall getNumParserRuleCall_0() { return cNumParserRuleCall_0; }

		//"ex"
		public Keyword getExKeyword_1() { return cExKeyword_1; }
	}

	public class LENGTHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LENGTH");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPxKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCmKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cMmKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cInKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cPtKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cPcKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		
		//LENGTH hidden():
		//
		//	num ("px" | "cm" | "mm" | "in" | "pt" | "pc");
		public ParserRule getRule() { return rule; }

		//num ("px" | "cm" | "mm" | "in" | "pt" | "pc")
		public Group getGroup() { return cGroup; }

		//num
		public RuleCall getNumParserRuleCall_0() { return cNumParserRuleCall_0; }

		//"px" | "cm" | "mm" | "in" | "pt" | "pc"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"px"
		public Keyword getPxKeyword_1_0() { return cPxKeyword_1_0; }

		//"cm"
		public Keyword getCmKeyword_1_1() { return cCmKeyword_1_1; }

		//"mm"
		public Keyword getMmKeyword_1_2() { return cMmKeyword_1_2; }

		//"in"
		public Keyword getInKeyword_1_3() { return cInKeyword_1_3; }

		//"pt"
		public Keyword getPtKeyword_1_4() { return cPtKeyword_1_4; }

		//"pc"
		public Keyword getPcKeyword_1_5() { return cPcKeyword_1_5; }
	}

	public class ANGLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ANGLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cDegKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cRadKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cGradKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		
		//ANGLE:
		//
		//	num ("deg" | "rad" | "grad");
		public ParserRule getRule() { return rule; }

		//num ("deg" | "rad" | "grad")
		public Group getGroup() { return cGroup; }

		//num
		public RuleCall getNumParserRuleCall_0() { return cNumParserRuleCall_0; }

		//"deg" | "rad" | "grad"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"deg"
		public Keyword getDegKeyword_1_0() { return cDegKeyword_1_0; }

		//"rad"
		public Keyword getRadKeyword_1_1() { return cRadKeyword_1_1; }

		//"grad"
		public Keyword getGradKeyword_1_2() { return cGradKeyword_1_2; }
	}

	public class TIMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TIME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cMsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//TIME:
		//
		//	num ("ms" | "s");
		public ParserRule getRule() { return rule; }

		//num ("ms" | "s")
		public Group getGroup() { return cGroup; }

		//num
		public RuleCall getNumParserRuleCall_0() { return cNumParserRuleCall_0; }

		//"ms" | "s"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"ms"
		public Keyword getMsKeyword_1_0() { return cMsKeyword_1_0; }

		//"s"
		public Keyword getSKeyword_1_1() { return cSKeyword_1_1; }
	}

	public class FREQElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FREQ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHzKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cKhzKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//FREQ:
		//
		//	num ("hz" | "khz");
		public ParserRule getRule() { return rule; }

		//num ("hz" | "khz")
		public Group getGroup() { return cGroup; }

		//num
		public RuleCall getNumParserRuleCall_0() { return cNumParserRuleCall_0; }

		//"hz" | "khz"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"hz"
		public Keyword getHzKeyword_1_0() { return cHzKeyword_1_0; }

		//"khz"
		public Keyword getKhzKeyword_1_1() { return cKhzKeyword_1_1; }
	}

	public class IMPORTANT_SYMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IMPORTANT_SYM");
		private final Keyword cImportantKeyword = (Keyword)rule.eContents().get(1);
		
		//IMPORTANT_SYM:
		//
		//	"!important";
		public ParserRule getRule() { return rule; }

		//"!important"
		public Keyword getImportantKeyword() { return cImportantKeyword; }
	}

	public class ReservedWordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReservedWords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEmKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPxKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCmKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMmKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cInKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPtKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cPcKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cDegKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cRadKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cGradKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cMsKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cSKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cHzKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cKhzKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		
		//ReservedWords:
		//
		//	"em" | "ex" | "px" | "cm" | "mm" | "in" | "pt" | "pc" | "deg" | "rad" | "grad" | "ms" | "s" | "hz" | "khz";
		public ParserRule getRule() { return rule; }

		//"em" | "ex" | "px" | "cm" | "mm" | "in" | "pt" | "pc" | "deg" | "rad" | "grad" | "ms" | "s" | "hz" | "khz"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"em"
		public Keyword getEmKeyword_0() { return cEmKeyword_0; }

		//"ex"
		public Keyword getExKeyword_1() { return cExKeyword_1; }

		//"px"
		public Keyword getPxKeyword_2() { return cPxKeyword_2; }

		//"cm"
		public Keyword getCmKeyword_3() { return cCmKeyword_3; }

		//"mm"
		public Keyword getMmKeyword_4() { return cMmKeyword_4; }

		//"in"
		public Keyword getInKeyword_5() { return cInKeyword_5; }

		//"pt"
		public Keyword getPtKeyword_6() { return cPtKeyword_6; }

		//"pc"
		public Keyword getPcKeyword_7() { return cPcKeyword_7; }

		//"deg"
		public Keyword getDegKeyword_8() { return cDegKeyword_8; }

		//"rad"
		public Keyword getRadKeyword_9() { return cRadKeyword_9; }

		//"grad"
		public Keyword getGradKeyword_10() { return cGradKeyword_10; }

		//"ms"
		public Keyword getMsKeyword_11() { return cMsKeyword_11; }

		//"s"
		public Keyword getSKeyword_12() { return cSKeyword_12; }

		//"hz"
		public Keyword getHzKeyword_13() { return cHzKeyword_13; }

		//"khz"
		public Keyword getKhzKeyword_14() { return cKhzKeyword_14; }
	}
	
	
	private StylesheetElements pStylesheet;
	private CharsetElements pCharset;
	private ImportExpressionElements pImportExpression;
	private PageElements pPage;
	private Pseudo_pageElements pPseudo_page;
	private MediaElements pMedia;
	private Media_listElements pMedia_list;
	private MediumElements pMedium;
	private RulesetElements pRuleset;
	private SelectorElements pSelector;
	private Simple_selectorElements pSimple_selector;
	private Element_nameElements pElement_name;
	private Sub_selectorElements pSub_selector;
	private Css_type_selectorElements pCss_type_selector;
	private Css_namespace_prefixElements pCss_namespace_prefix;
	private Css_universalElements pCss_universal;
	private Css_classElements pCss_class;
	private Css_idElements pCss_id;
	private Css_attribElements pCss_attrib;
	private Css_declarationElements pCss_declaration;
	private Css_generic_declarationElements pCss_generic_declaration;
	private Css_prioElements pCss_prio;
	private Css_propertyElements pCss_property;
	private Css_pseudoElements pCss_pseudo;
	private Css_negationElements pCss_negation;
	private Css_negation_argElements pCss_negation_arg;
	private Functional_pseudoElements pFunctional_pseudo;
	private Function_exprElements pFunction_expr;
	private DIMENSIONElements pDIMENSION;
	private CombinatorElements pCombinator;
	private OperatorElements pOperator;
	private Unary_operatorElements pUnary_operator;
	private ExprElements pExpr;
	private TermGroupElements pTermGroup;
	private TermElements pTerm;
	private NumberTermElements pNumberTerm;
	private NumElements pNum;
	private FunctionElements pFunction;
	private HexColorElements pHexColor;
	private URLTypeElements pURLType;
	private NUMBERElements pNUMBER;
	private PERCENTAGEElements pPERCENTAGE;
	private EMSElements pEMS;
	private EXSElements pEXS;
	private LENGTHElements pLENGTH;
	private ANGLEElements pANGLE;
	private TIMEElements pTIME;
	private FREQElements pFREQ;
	private IMPORTANT_SYMElements pIMPORTANT_SYM;
	private ReservedWordsElements pReservedWords;
	private TerminalRule tINTEGER;
	private TerminalRule tREAL;
	private TerminalRule tHASH;
	private TerminalRule tIDENT;
	private TerminalRule tCOMMA;
	private TerminalRule tML_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tSTRING;
	private TerminalRule tINCLUDES;
	private TerminalRule tDASHMATCH;
	
	private final Grammar grammar;

	@Inject
	public CssDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.bestsolution.efxclipse.tooling.css.CssDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//stylesheet:
	//
	//	charset=charset? imports+=importExpression* (ruleset+=ruleset | media+=media | page+=page)*;
	public StylesheetElements getStylesheetAccess() {
		return (pStylesheet != null) ? pStylesheet : (pStylesheet = new StylesheetElements());
	}
	
	public ParserRule getStylesheetRule() {
		return getStylesheetAccess().getRule();
	}

	//charset:
	//
	//	("@charset" | "@CHARSET") charset=STRING ";";
	public CharsetElements getCharsetAccess() {
		return (pCharset != null) ? pCharset : (pCharset = new CharsetElements());
	}
	
	public ParserRule getCharsetRule() {
		return getCharsetAccess().getRule();
	}

	//importExpression:
	//
	//	("@import" | "@IMPORT") value=STRING | URLType mediaList=media_list? ";";
	public ImportExpressionElements getImportExpressionAccess() {
		return (pImportExpression != null) ? pImportExpression : (pImportExpression = new ImportExpressionElements());
	}
	
	public ParserRule getImportExpressionRule() {
		return getImportExpressionAccess().getRule();
	}

	//page:
	//
	//	{page} ("@page" | "@PAGE") pseudoPage=pseudo_page? "{" declarations+=css_generic_declaration? (";"
	//
	//	declarations+=css_generic_declaration?)* "}";
	public PageElements getPageAccess() {
		return (pPage != null) ? pPage : (pPage = new PageElements());
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}

	//pseudo_page:
	//
	//	":" IDENT;
	public Pseudo_pageElements getPseudo_pageAccess() {
		return (pPseudo_page != null) ? pPseudo_page : (pPseudo_page = new Pseudo_pageElements());
	}
	
	public ParserRule getPseudo_pageRule() {
		return getPseudo_pageAccess().getRule();
	}

	//media:
	//
	//	("@media" | "@MEDIA") medialist=media_list "{" rulesets+=ruleset* "}";
	public MediaElements getMediaAccess() {
		return (pMedia != null) ? pMedia : (pMedia = new MediaElements());
	}
	
	public ParserRule getMediaRule() {
		return getMediaAccess().getRule();
	}

	//media_list:
	//
	//	medium (COMMA medium)*;
	public Media_listElements getMedia_listAccess() {
		return (pMedia_list != null) ? pMedia_list : (pMedia_list = new Media_listElements());
	}
	
	public ParserRule getMedia_listRule() {
		return getMedia_listAccess().getRule();
	}

	//medium:
	//
	//	IDENT;
	public MediumElements getMediumAccess() {
		return (pMedium != null) ? pMedium : (pMedium = new MediumElements());
	}
	
	public ParserRule getMediumRule() {
		return getMediumAccess().getRule();
	}

	//ruleset:
	//
	//	selectors+=selector (COMMA selectors+=selector)* "{" (declarations+=css_declaration ";")* "}";
	public RulesetElements getRulesetAccess() {
		return (pRuleset != null) ? pRuleset : (pRuleset = new RulesetElements());
	}
	
	public ParserRule getRulesetRule() {
		return getRulesetAccess().getRule();
	}

	//selector hidden():
	//
	//	simpleselectors+=simple_selector (combinator=combinator selector=selector | WS+ (combinator=combinator?
	//
	//	selector=selector)?)?;
	public SelectorElements getSelectorAccess() {
		return (pSelector != null) ? pSelector : (pSelector = new SelectorElements());
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}

	//simple_selector:
	//
	//	(element=element_name | universal=css_universal) subSelectors+=sub_selector* | subSelectors+=sub_selector+;
	public Simple_selectorElements getSimple_selectorAccess() {
		return (pSimple_selector != null) ? pSimple_selector : (pSimple_selector = new Simple_selectorElements());
	}
	
	public ParserRule getSimple_selectorRule() {
		return getSimple_selectorAccess().getRule();
	}

	//element_name:
	//
	//	IDENT | ReservedWords;
	public Element_nameElements getElement_nameAccess() {
		return (pElement_name != null) ? pElement_name : (pElement_name = new Element_nameElements());
	}
	
	public ParserRule getElement_nameRule() {
		return getElement_nameAccess().getRule();
	}

	//sub_selector:
	//
	//	id=css_id | class=css_class | attrib=css_attrib | pseudoclass=css_pseudo | negotation=css_negation;
	public Sub_selectorElements getSub_selectorAccess() {
		return (pSub_selector != null) ? pSub_selector : (pSub_selector = new Sub_selectorElements());
	}
	
	public ParserRule getSub_selectorRule() {
		return getSub_selectorAccess().getRule();
	}

	//css_type_selector:
	//
	//	css_namespace_prefix? element_name;
	public Css_type_selectorElements getCss_type_selectorAccess() {
		return (pCss_type_selector != null) ? pCss_type_selector : (pCss_type_selector = new Css_type_selectorElements());
	}
	
	public ParserRule getCss_type_selectorRule() {
		return getCss_type_selectorAccess().getRule();
	}

	//css_namespace_prefix:
	//
	//	(IDENT | "*")? "|";
	public Css_namespace_prefixElements getCss_namespace_prefixAccess() {
		return (pCss_namespace_prefix != null) ? pCss_namespace_prefix : (pCss_namespace_prefix = new Css_namespace_prefixElements());
	}
	
	public ParserRule getCss_namespace_prefixRule() {
		return getCss_namespace_prefixAccess().getRule();
	}

	//css_universal:
	//
	//	css_namespace_prefix? "*";
	public Css_universalElements getCss_universalAccess() {
		return (pCss_universal != null) ? pCss_universal : (pCss_universal = new Css_universalElements());
	}
	
	public ParserRule getCss_universalRule() {
		return getCss_universalAccess().getRule();
	}

	//css_class:
	//
	//	"." (IDENT | ReservedWords);
	public Css_classElements getCss_classAccess() {
		return (pCss_class != null) ? pCss_class : (pCss_class = new Css_classElements());
	}
	
	public ParserRule getCss_classRule() {
		return getCss_classAccess().getRule();
	}

	//css_id:
	//
	//	HASH;
	public Css_idElements getCss_idAccess() {
		return (pCss_id != null) ? pCss_id : (pCss_id = new Css_idElements());
	}
	
	public ParserRule getCss_idRule() {
		return getCss_idAccess().getRule();
	}

	//css_attrib:
	//
	//	"[" (IDENT | ReservedWords) (("^=" | "$=" | "*=" | "=" | INCLUDES | DASHMATCH) ((IDENT | ReservedWords) | STRING))?
	//
	//	"]";
	public Css_attribElements getCss_attribAccess() {
		return (pCss_attrib != null) ? pCss_attrib : (pCss_attrib = new Css_attribElements());
	}
	
	public ParserRule getCss_attribRule() {
		return getCss_attribAccess().getRule();
	}

	//css_declaration: //| css_fx_declaration //| css_21_declaration
	// css_generic_declaration;
	public Css_declarationElements getCss_declarationAccess() {
		return (pCss_declaration != null) ? pCss_declaration : (pCss_declaration = new Css_declarationElements());
	}
	
	public ParserRule getCss_declarationRule() {
		return getCss_declarationAccess().getRule();
	}

	//css_generic_declaration:
	//
	//	property=css_property ":" expression=expr prio=css_prio?;
	public Css_generic_declarationElements getCss_generic_declarationAccess() {
		return (pCss_generic_declaration != null) ? pCss_generic_declaration : (pCss_generic_declaration = new Css_generic_declarationElements());
	}
	
	public ParserRule getCss_generic_declarationRule() {
		return getCss_generic_declarationAccess().getRule();
	}

	//css_prio:
	//
	//	IMPORTANT_SYM;
	public Css_prioElements getCss_prioAccess() {
		return (pCss_prio != null) ? pCss_prio : (pCss_prio = new Css_prioElements());
	}
	
	public ParserRule getCss_prioRule() {
		return getCss_prioAccess().getRule();
	}

	//css_property:
	//
	//	"-"? IDENT;
	public Css_propertyElements getCss_propertyAccess() {
		return (pCss_property != null) ? pCss_property : (pCss_property = new Css_propertyElements());
	}
	
	public ParserRule getCss_propertyRule() {
		return getCss_propertyAccess().getRule();
	}

	//css_pseudo:
	//
	//	":" ":"? (IDENT | functional_pseudo);
	public Css_pseudoElements getCss_pseudoAccess() {
		return (pCss_pseudo != null) ? pCss_pseudo : (pCss_pseudo = new Css_pseudoElements());
	}
	
	public ParserRule getCss_pseudoRule() {
		return getCss_pseudoAccess().getRule();
	}

	//css_negation:
	//
	//	":not" "(" css_negation_arg ")";
	public Css_negationElements getCss_negationAccess() {
		return (pCss_negation != null) ? pCss_negation : (pCss_negation = new Css_negationElements());
	}
	
	public ParserRule getCss_negationRule() {
		return getCss_negationAccess().getRule();
	}

	//css_negation_arg:
	//
	//	css_type_selector | css_universal | HASH | css_class | css_attrib | css_pseudo;
	public Css_negation_argElements getCss_negation_argAccess() {
		return (pCss_negation_arg != null) ? pCss_negation_arg : (pCss_negation_arg = new Css_negation_argElements());
	}
	
	public ParserRule getCss_negation_argRule() {
		return getCss_negation_argAccess().getRule();
	}

	//functional_pseudo:
	//
	//	IDENT "(" function_expr ")";
	public Functional_pseudoElements getFunctional_pseudoAccess() {
		return (pFunctional_pseudo != null) ? pFunctional_pseudo : (pFunctional_pseudo = new Functional_pseudoElements());
	}
	
	public ParserRule getFunctional_pseudoRule() {
		return getFunctional_pseudoAccess().getRule();
	}

	//function_expr:
	//
	//	("+" | "-" | DIMENSION | NUMBER | STRING | IDENT)+;
	public Function_exprElements getFunction_exprAccess() {
		return (pFunction_expr != null) ? pFunction_expr : (pFunction_expr = new Function_exprElements());
	}
	
	public ParserRule getFunction_exprRule() {
		return getFunction_exprAccess().getRule();
	}

	//DIMENSION:
	//
	//	PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ;
	public DIMENSIONElements getDIMENSIONAccess() {
		return (pDIMENSION != null) ? pDIMENSION : (pDIMENSION = new DIMENSIONElements());
	}
	
	public ParserRule getDIMENSIONRule() {
		return getDIMENSIONAccess().getRule();
	}

	//combinator:
	//
	//	("+" | ">" | "~") WS*;
	public CombinatorElements getCombinatorAccess() {
		return (pCombinator != null) ? pCombinator : (pCombinator = new CombinatorElements());
	}
	
	public ParserRule getCombinatorRule() {
		return getCombinatorAccess().getRule();
	}

	//operator:
	//
	//	"/" | COMMA;
	public OperatorElements getOperatorAccess() {
		return (pOperator != null) ? pOperator : (pOperator = new OperatorElements());
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//unary_operator:
	//
	//	"-" | "+";
	public Unary_operatorElements getUnary_operatorAccess() {
		return (pUnary_operator != null) ? pUnary_operator : (pUnary_operator = new Unary_operatorElements());
	}
	
	public ParserRule getUnary_operatorRule() {
		return getUnary_operatorAccess().getRule();
	}

	//expr hidden(WS, ML_COMMENT):
	//
	//	termGroups+=termGroup (operator termGroups+=termGroup)*;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//termGroup:
	//
	//	terms+=term+;
	public TermGroupElements getTermGroupAccess() {
		return (pTermGroup != null) ? pTermGroup : (pTermGroup = new TermGroupElements());
	}
	
	public ParserRule getTermGroupRule() {
		return getTermGroupAccess().getRule();
	}

	////  	| gradient=Gradient
	// //  	| pair=pair
	// term:
	//
	//	number=numberTerm | stringValue=STRING | identifier=css_property | url=URLType | function=function |
	//
	//	hexColor=HexColor;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	////Gradient:
	// //	LinearGradient | RadialGradient 
	// //;
	// //
	// //LinearGradient:
	//
	//
	////	IDENT '(' start=PointValue ')' IDENT '(' end=PointValue ')' IDENT ( '(' stops+=StopValue ')' )+ // ( ('repeat' | 'reflect') )?
	//
	//
	////;
	// //
	// //RadialGradient:
	//
	//
	////	IDENT ( '(' center=PointValue ')' COMMA )? radius=SizeType ( IDENT '(' focus=PointValue ')' ) IDENT ( '(' stops+=StopValue ')' )+ //( ( 'repeat' | 'reflect' ))?
	//
	//
	////;
	// //
	// //StopValue:
	// //	pos=SizeType COMMA color=HexColor
	// //;
	// //
	// //PointValue:
	// //	x=SizeType COMMA y=SizeType
	//
	//
	////;
	// //pair:
	// //	'(' expr1=expr COMMA expr2=expr ')'
	// //;
	// numberTerm hidden():
	//
	//	unary_operator? (NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ);
	public NumberTermElements getNumberTermAccess() {
		return (pNumberTerm != null) ? pNumberTerm : (pNumberTerm = new NumberTermElements());
	}
	
	public ParserRule getNumberTermRule() {
		return getNumberTermAccess().getRule();
	}

	//num:
	//
	//	INTEGER | REAL;
	public NumElements getNumAccess() {
		return (pNum != null) ? pNum : (pNum = new NumElements());
	}
	
	public ParserRule getNumRule() {
		return getNumAccess().getRule();
	}

	//function hidden():
	//
	//	"-"? name=IDENT "(" WS* expression=expr WS* ")";
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//HexColor hidden():
	//
	//	HASH;
	public HexColorElements getHexColorAccess() {
		return (pHexColor != null) ? pHexColor : (pHexColor = new HexColorElements());
	}
	
	public ParserRule getHexColorRule() {
		return getHexColorAccess().getRule();
	}

	//URLType hidden():
	//
	//	"url" "(" url=STRING ")";
	public URLTypeElements getURLTypeAccess() {
		return (pURLType != null) ? pURLType : (pURLType = new URLTypeElements());
	}
	
	public ParserRule getURLTypeRule() {
		return getURLTypeAccess().getRule();
	}

	//NUMBER:
	//
	//	num;
	public NUMBERElements getNUMBERAccess() {
		return (pNUMBER != null) ? pNUMBER : (pNUMBER = new NUMBERElements());
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}

	//PERCENTAGE:
	//
	//	num "%";
	public PERCENTAGEElements getPERCENTAGEAccess() {
		return (pPERCENTAGE != null) ? pPERCENTAGE : (pPERCENTAGE = new PERCENTAGEElements());
	}
	
	public ParserRule getPERCENTAGERule() {
		return getPERCENTAGEAccess().getRule();
	}

	//EMS:
	//
	//	num "em";
	public EMSElements getEMSAccess() {
		return (pEMS != null) ? pEMS : (pEMS = new EMSElements());
	}
	
	public ParserRule getEMSRule() {
		return getEMSAccess().getRule();
	}

	//EXS:
	//
	//	num "ex";
	public EXSElements getEXSAccess() {
		return (pEXS != null) ? pEXS : (pEXS = new EXSElements());
	}
	
	public ParserRule getEXSRule() {
		return getEXSAccess().getRule();
	}

	//LENGTH hidden():
	//
	//	num ("px" | "cm" | "mm" | "in" | "pt" | "pc");
	public LENGTHElements getLENGTHAccess() {
		return (pLENGTH != null) ? pLENGTH : (pLENGTH = new LENGTHElements());
	}
	
	public ParserRule getLENGTHRule() {
		return getLENGTHAccess().getRule();
	}

	//ANGLE:
	//
	//	num ("deg" | "rad" | "grad");
	public ANGLEElements getANGLEAccess() {
		return (pANGLE != null) ? pANGLE : (pANGLE = new ANGLEElements());
	}
	
	public ParserRule getANGLERule() {
		return getANGLEAccess().getRule();
	}

	//TIME:
	//
	//	num ("ms" | "s");
	public TIMEElements getTIMEAccess() {
		return (pTIME != null) ? pTIME : (pTIME = new TIMEElements());
	}
	
	public ParserRule getTIMERule() {
		return getTIMEAccess().getRule();
	}

	//FREQ:
	//
	//	num ("hz" | "khz");
	public FREQElements getFREQAccess() {
		return (pFREQ != null) ? pFREQ : (pFREQ = new FREQElements());
	}
	
	public ParserRule getFREQRule() {
		return getFREQAccess().getRule();
	}

	//IMPORTANT_SYM:
	//
	//	"!important";
	public IMPORTANT_SYMElements getIMPORTANT_SYMAccess() {
		return (pIMPORTANT_SYM != null) ? pIMPORTANT_SYM : (pIMPORTANT_SYM = new IMPORTANT_SYMElements());
	}
	
	public ParserRule getIMPORTANT_SYMRule() {
		return getIMPORTANT_SYMAccess().getRule();
	}

	//ReservedWords:
	//
	//	"em" | "ex" | "px" | "cm" | "mm" | "in" | "pt" | "pc" | "deg" | "rad" | "grad" | "ms" | "s" | "hz" | "khz";
	public ReservedWordsElements getReservedWordsAccess() {
		return (pReservedWords != null) ? pReservedWords : (pReservedWords = new ReservedWordsElements());
	}
	
	public ParserRule getReservedWordsRule() {
		return getReservedWordsAccess().getRule();
	}

	//terminal INTEGER:
	//
	//	"0".."9"+;
	public TerminalRule getINTEGERRule() {
		return (tINTEGER != null) ? tINTEGER : (tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER"));
	} 

	//terminal REAL:
	//
	//	"0".."9"* "." "0".."9"+;
	public TerminalRule getREALRule() {
		return (tREAL != null) ? tREAL : (tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL"));
	} 

	//terminal HASH:
	//
	//	"#" ("_" | "-" | "a".."z" | "A".."Z" | "0".."9")+;
	public TerminalRule getHASHRule() {
		return (tHASH != null) ? tHASH : (tHASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HASH"));
	} 

	//terminal IDENT:
	//
	//	("_" | "a".."z" | "A".."Z") ("_" | "-" | "a".."z" | "A".."Z" | "0".."9")*;
	public TerminalRule getIDENTRule() {
		return (tIDENT != null) ? tIDENT : (tIDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENT"));
	} 

	//terminal COMMA:
	//
	//	",";
	public TerminalRule getCOMMARule() {
		return (tCOMMA != null) ? tCOMMA : (tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA"));
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal INCLUDES:
	//
	//	"~=";
	public TerminalRule getINCLUDESRule() {
		return (tINCLUDES != null) ? tINCLUDES : (tINCLUDES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INCLUDES"));
	} 

	//terminal DASHMATCH:
	//
	//	"|=";
	public TerminalRule getDASHMATCHRule() {
		return (tDASHMATCH != null) ? tDASHMATCH : (tDASHMATCH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DASHMATCH"));
	} 
}
