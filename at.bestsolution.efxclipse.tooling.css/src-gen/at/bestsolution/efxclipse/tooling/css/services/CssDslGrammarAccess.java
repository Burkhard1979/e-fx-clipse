/*
* generated by Xtext
*/

package at.bestsolution.efxclipse.tooling.css.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class CssDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StylesheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "stylesheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCharsetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCharsetCharsetParserRuleCall_0_0 = (RuleCall)cCharsetAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportExpressionParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRulesetAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cRulesetRulesetParserRuleCall_2_0_0 = (RuleCall)cRulesetAssignment_2_0.eContents().get(0);
		private final Assignment cMediaAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cMediaMediaParserRuleCall_2_1_0 = (RuleCall)cMediaAssignment_2_1.eContents().get(0);
		private final Assignment cPageAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cPagePageParserRuleCall_2_2_0 = (RuleCall)cPageAssignment_2_2.eContents().get(0);
		
		//stylesheet:
		//	charset=charset? imports+=importExpression* (ruleset+=ruleset | media+=media | page+=page)*;
		public ParserRule getRule() { return rule; }

		//charset=charset? imports+=importExpression* (ruleset+=ruleset | media+=media | page+=page)*
		public Group getGroup() { return cGroup; }

		//charset=charset?
		public Assignment getCharsetAssignment_0() { return cCharsetAssignment_0; }

		//charset
		public RuleCall getCharsetCharsetParserRuleCall_0_0() { return cCharsetCharsetParserRuleCall_0_0; }

		//imports+=importExpression*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//importExpression
		public RuleCall getImportsImportExpressionParserRuleCall_1_0() { return cImportsImportExpressionParserRuleCall_1_0; }

		//(ruleset+=ruleset | media+=media | page+=page)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ruleset+=ruleset
		public Assignment getRulesetAssignment_2_0() { return cRulesetAssignment_2_0; }

		//ruleset
		public RuleCall getRulesetRulesetParserRuleCall_2_0_0() { return cRulesetRulesetParserRuleCall_2_0_0; }

		//media+=media
		public Assignment getMediaAssignment_2_1() { return cMediaAssignment_2_1; }

		//media
		public RuleCall getMediaMediaParserRuleCall_2_1_0() { return cMediaMediaParserRuleCall_2_1_0; }

		//page+=page
		public Assignment getPageAssignment_2_2() { return cPageAssignment_2_2; }

		//page
		public RuleCall getPagePageParserRuleCall_2_2_0() { return cPagePageParserRuleCall_2_2_0; }
	}

	public class CharsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "charset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCharsetKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCHARSETKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCharsetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCharsetSTRINGTerminalRuleCall_1_0 = (RuleCall)cCharsetAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//charset:
		//	("@charset" | "@CHARSET") charset=STRING ";";
		public ParserRule getRule() { return rule; }

		//("@charset" | "@CHARSET") charset=STRING ";"
		public Group getGroup() { return cGroup; }

		//"@charset" | "@CHARSET"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"@charset"
		public Keyword getCharsetKeyword_0_0() { return cCharsetKeyword_0_0; }

		//"@CHARSET"
		public Keyword getCHARSETKeyword_0_1() { return cCHARSETKeyword_0_1; }

		//charset=STRING
		public Assignment getCharsetAssignment_1() { return cCharsetAssignment_1; }

		//STRING
		public RuleCall getCharsetSTRINGTerminalRuleCall_1_0() { return cCharsetSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ImportExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "importExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cImportKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cIMPORTKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cURLTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cMediaListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMediaListMedia_listParserRuleCall_1_1_0 = (RuleCall)cMediaListAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//importExpression:
		//	("@import" | "@IMPORT") value=STRING | URLType mediaList=media_list? ";";
		public ParserRule getRule() { return rule; }

		//("@import" | "@IMPORT") value=STRING | URLType mediaList=media_list? ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//("@import" | "@IMPORT") value=STRING
		public Group getGroup_0() { return cGroup_0; }

		//"@import" | "@IMPORT"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"@import"
		public Keyword getImportKeyword_0_0_0() { return cImportKeyword_0_0_0; }

		//"@IMPORT"
		public Keyword getIMPORTKeyword_0_0_1() { return cIMPORTKeyword_0_0_1; }

		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }

		//URLType mediaList=media_list? ";"
		public Group getGroup_1() { return cGroup_1; }

		//URLType
		public RuleCall getURLTypeParserRuleCall_1_0() { return cURLTypeParserRuleCall_1_0; }

		//mediaList=media_list?
		public Assignment getMediaListAssignment_1_1() { return cMediaListAssignment_1_1; }

		//media_list
		public RuleCall getMediaListMedia_listParserRuleCall_1_1_0() { return cMediaListMedia_listParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}

	public class PageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "page");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPageAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPageKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cPAGEKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cPseudoPageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPseudoPagePseudo_pageParserRuleCall_2_0 = (RuleCall)cPseudoPageAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationsCss_declarationParserRuleCall_4_0 = (RuleCall)cDeclarationsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDeclarationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDeclarationsCss_declarationParserRuleCall_5_1_0 = (RuleCall)cDeclarationsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//page:
		//	{page} ("@page" | "@PAGE") pseudoPage=pseudo_page? "{" declarations+=css_declaration? (";"
		//	declarations+=css_declaration?)* "}";
		public ParserRule getRule() { return rule; }

		//{page} ("@page" | "@PAGE") pseudoPage=pseudo_page? "{" declarations+=css_declaration? (";"
		//declarations+=css_declaration?)* "}"
		public Group getGroup() { return cGroup; }

		//{page}
		public Action getPageAction_0() { return cPageAction_0; }

		//"@page" | "@PAGE"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"@page"
		public Keyword getPageKeyword_1_0() { return cPageKeyword_1_0; }

		//"@PAGE"
		public Keyword getPAGEKeyword_1_1() { return cPAGEKeyword_1_1; }

		//pseudoPage=pseudo_page?
		public Assignment getPseudoPageAssignment_2() { return cPseudoPageAssignment_2; }

		//pseudo_page
		public RuleCall getPseudoPagePseudo_pageParserRuleCall_2_0() { return cPseudoPagePseudo_pageParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//declarations+=css_declaration?
		public Assignment getDeclarationsAssignment_4() { return cDeclarationsAssignment_4; }

		//css_declaration
		public RuleCall getDeclarationsCss_declarationParserRuleCall_4_0() { return cDeclarationsCss_declarationParserRuleCall_4_0; }

		//(";" declarations+=css_declaration?)*
		public Group getGroup_5() { return cGroup_5; }

		//";"
		public Keyword getSemicolonKeyword_5_0() { return cSemicolonKeyword_5_0; }

		//declarations+=css_declaration?
		public Assignment getDeclarationsAssignment_5_1() { return cDeclarationsAssignment_5_1; }

		//css_declaration
		public RuleCall getDeclarationsCss_declarationParserRuleCall_5_1_0() { return cDeclarationsCss_declarationParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class Pseudo_pageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pseudo_page");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//pseudo_page:
		//	":" IDENT;
		public ParserRule getRule() { return rule; }

		//":" IDENT
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1() { return cIDENTTerminalRuleCall_1; }
	}

	public class MediaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "media");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cMediaKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMEDIAKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cMedialistAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMedialistMedia_listParserRuleCall_1_0 = (RuleCall)cMedialistAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRulesetsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRulesetsRulesetParserRuleCall_3_0 = (RuleCall)cRulesetsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//media:
		//	("@media" | "@MEDIA") medialist=media_list "{" rulesets+=ruleset* "}";
		public ParserRule getRule() { return rule; }

		//("@media" | "@MEDIA") medialist=media_list "{" rulesets+=ruleset* "}"
		public Group getGroup() { return cGroup; }

		//"@media" | "@MEDIA"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"@media"
		public Keyword getMediaKeyword_0_0() { return cMediaKeyword_0_0; }

		//"@MEDIA"
		public Keyword getMEDIAKeyword_0_1() { return cMEDIAKeyword_0_1; }

		//medialist=media_list
		public Assignment getMedialistAssignment_1() { return cMedialistAssignment_1; }

		//media_list
		public RuleCall getMedialistMedia_listParserRuleCall_1_0() { return cMedialistMedia_listParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//rulesets+=ruleset*
		public Assignment getRulesetsAssignment_3() { return cRulesetsAssignment_3; }

		//ruleset
		public RuleCall getRulesetsRulesetParserRuleCall_3_0() { return cRulesetsRulesetParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class Media_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "media_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMediumParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cMediumParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//media_list:
		//	medium (COMMA medium)*;
		public ParserRule getRule() { return rule; }

		//medium (COMMA medium)*
		public Group getGroup() { return cGroup; }

		//medium
		public RuleCall getMediumParserRuleCall_0() { return cMediumParserRuleCall_0; }

		//(COMMA medium)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//medium
		public RuleCall getMediumParserRuleCall_1_1() { return cMediumParserRuleCall_1_1; }
	}

	public class MediumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "medium");
		private final RuleCall cIDENTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//medium:
		//	IDENT;
		public ParserRule getRule() { return rule; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall() { return cIDENTTerminalRuleCall; }
	}

	public class RulesetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ruleset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectorsSelectorParserRuleCall_0_0 = (RuleCall)cSelectorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cSelectorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectorsSelectorParserRuleCall_1_1_0 = (RuleCall)cSelectorsAssignment_1_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cDeclarationsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cDeclarationsCss_declarationParserRuleCall_4_0_0 = (RuleCall)cDeclarationsAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ruleset:
		//	selectors+=selector (COMMA selectors+=selector)* WS* "{" (declarations+=css_declaration ";")* "}";
		public ParserRule getRule() { return rule; }

		//selectors+=selector (COMMA selectors+=selector)* WS* "{" (declarations+=css_declaration ";")* "}"
		public Group getGroup() { return cGroup; }

		//selectors+=selector
		public Assignment getSelectorsAssignment_0() { return cSelectorsAssignment_0; }

		//selector
		public RuleCall getSelectorsSelectorParserRuleCall_0_0() { return cSelectorsSelectorParserRuleCall_0_0; }

		//(COMMA selectors+=selector)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//selectors+=selector
		public Assignment getSelectorsAssignment_1_1() { return cSelectorsAssignment_1_1; }

		//selector
		public RuleCall getSelectorsSelectorParserRuleCall_1_1_0() { return cSelectorsSelectorParserRuleCall_1_1_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(declarations+=css_declaration ";")*
		public Group getGroup_4() { return cGroup_4; }

		//declarations+=css_declaration
		public Assignment getDeclarationsAssignment_4_0() { return cDeclarationsAssignment_4_0; }

		//css_declaration
		public RuleCall getDeclarationsCss_declarationParserRuleCall_4_0_0() { return cDeclarationsCss_declarationParserRuleCall_4_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSimpleselectorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSimpleselectorsSimple_selectorParserRuleCall_0_0 = (RuleCall)cSimpleselectorsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cCombinatorAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cCombinatorCombinatorParserRuleCall_1_0_0_0 = (RuleCall)cCombinatorAssignment_1_0_0.eContents().get(0);
		private final Assignment cSelectorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cSelectorSelectorParserRuleCall_1_0_1_0 = (RuleCall)cSelectorAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cCombinatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cCombinatorCombinatorParserRuleCall_1_1_1_0 = (RuleCall)cCombinatorAssignment_1_1_1.eContents().get(0);
		private final Assignment cSelectorAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cSelectorSelectorParserRuleCall_1_1_2_0 = (RuleCall)cSelectorAssignment_1_1_2.eContents().get(0);
		
		//selector hidden():
		//	simpleselectors+=simple_selector (combinator=combinator selector=selector | WS+ combinator=combinator?
		//	selector=selector)?;
		public ParserRule getRule() { return rule; }

		//simpleselectors+=simple_selector (combinator=combinator selector=selector | WS+ combinator=combinator?
		//selector=selector)?
		public Group getGroup() { return cGroup; }

		//simpleselectors+=simple_selector
		public Assignment getSimpleselectorsAssignment_0() { return cSimpleselectorsAssignment_0; }

		//simple_selector
		public RuleCall getSimpleselectorsSimple_selectorParserRuleCall_0_0() { return cSimpleselectorsSimple_selectorParserRuleCall_0_0; }

		//(combinator=combinator selector=selector | WS+ combinator=combinator? selector=selector)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//combinator=combinator selector=selector
		public Group getGroup_1_0() { return cGroup_1_0; }

		//combinator=combinator
		public Assignment getCombinatorAssignment_1_0_0() { return cCombinatorAssignment_1_0_0; }

		//combinator
		public RuleCall getCombinatorCombinatorParserRuleCall_1_0_0_0() { return cCombinatorCombinatorParserRuleCall_1_0_0_0; }

		//selector=selector
		public Assignment getSelectorAssignment_1_0_1() { return cSelectorAssignment_1_0_1; }

		//selector
		public RuleCall getSelectorSelectorParserRuleCall_1_0_1_0() { return cSelectorSelectorParserRuleCall_1_0_1_0; }

		//WS+ combinator=combinator? selector=selector
		public Group getGroup_1_1() { return cGroup_1_1; }

		//WS+
		public RuleCall getWSTerminalRuleCall_1_1_0() { return cWSTerminalRuleCall_1_1_0; }

		//combinator=combinator?
		public Assignment getCombinatorAssignment_1_1_1() { return cCombinatorAssignment_1_1_1; }

		//combinator
		public RuleCall getCombinatorCombinatorParserRuleCall_1_1_1_0() { return cCombinatorCombinatorParserRuleCall_1_1_1_0; }

		//selector=selector
		public Assignment getSelectorAssignment_1_1_2() { return cSelectorAssignment_1_1_2; }

		//selector
		public RuleCall getSelectorSelectorParserRuleCall_1_1_2_0() { return cSelectorSelectorParserRuleCall_1_1_2_0; }
	}

	public class Simple_selectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simple_selector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cElementAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cElementElementSelectorParserRuleCall_0_0_0_0 = (RuleCall)cElementAssignment_0_0_0.eContents().get(0);
		private final Assignment cUniversalAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cUniversalUniversalSelectorParserRuleCall_0_0_1_0 = (RuleCall)cUniversalAssignment_0_0_1.eContents().get(0);
		private final Assignment cSubSelectorsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSubSelectorsSubSelectorParserRuleCall_0_1_0 = (RuleCall)cSubSelectorsAssignment_0_1.eContents().get(0);
		private final Assignment cSubSelectorsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSubSelectorsSubSelectorParserRuleCall_1_0 = (RuleCall)cSubSelectorsAssignment_1.eContents().get(0);
		
		//simple_selector:
		//	(element=ElementSelector | universal=UniversalSelector) subSelectors+=SubSelector* //	((element = element_name | universal=css_universal) subSelectors+=sub_selector*)
		//	//	|
		//	//	subSelectors+=sub_selector+
		//	| subSelectors+=SubSelector+;
		public ParserRule getRule() { return rule; }

		//(element=ElementSelector | universal=UniversalSelector) subSelectors+=SubSelector* //	((element = element_name | universal=css_universal) subSelectors+=sub_selector*)
		////	|
		////	subSelectors+=sub_selector+
		//| subSelectors+=SubSelector+
		public Alternatives getAlternatives() { return cAlternatives; }

		//(element=ElementSelector | universal=UniversalSelector) subSelectors+=SubSelector*
		public Group getGroup_0() { return cGroup_0; }

		//element=ElementSelector | universal=UniversalSelector
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//element=ElementSelector
		public Assignment getElementAssignment_0_0_0() { return cElementAssignment_0_0_0; }

		//ElementSelector
		public RuleCall getElementElementSelectorParserRuleCall_0_0_0_0() { return cElementElementSelectorParserRuleCall_0_0_0_0; }

		//universal=UniversalSelector
		public Assignment getUniversalAssignment_0_0_1() { return cUniversalAssignment_0_0_1; }

		//UniversalSelector
		public RuleCall getUniversalUniversalSelectorParserRuleCall_0_0_1_0() { return cUniversalUniversalSelectorParserRuleCall_0_0_1_0; }

		//subSelectors+=SubSelector*
		public Assignment getSubSelectorsAssignment_0_1() { return cSubSelectorsAssignment_0_1; }

		//SubSelector
		public RuleCall getSubSelectorsSubSelectorParserRuleCall_0_1_0() { return cSubSelectorsSubSelectorParserRuleCall_0_1_0; }

		//subSelectors+=SubSelector+
		public Assignment getSubSelectorsAssignment_1() { return cSubSelectorsAssignment_1; }

		//SubSelector
		public RuleCall getSubSelectorsSubSelectorParserRuleCall_1_0() { return cSubSelectorsSubSelectorParserRuleCall_1_0; }
	}

	public class SubSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdSelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeSelectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPseudoClassParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SubSelector returns CssSelector:
		//	IdSelector | ClassSelector | AttributeSelector | PseudoClass;
		public ParserRule getRule() { return rule; }

		//IdSelector | ClassSelector | AttributeSelector | PseudoClass
		public Alternatives getAlternatives() { return cAlternatives; }

		//IdSelector
		public RuleCall getIdSelectorParserRuleCall_0() { return cIdSelectorParserRuleCall_0; }

		//ClassSelector
		public RuleCall getClassSelectorParserRuleCall_1() { return cClassSelectorParserRuleCall_1; }

		//AttributeSelector
		public RuleCall getAttributeSelectorParserRuleCall_2() { return cAttributeSelectorParserRuleCall_2; }

		//PseudoClass
		public RuleCall getPseudoClassParserRuleCall_3() { return cPseudoClassParserRuleCall_3; }
	}

	public class AttributeSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeSelectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOpAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Alternatives cOpAlternatives_3_0_0 = (Alternatives)cOpAssignment_3_0.eContents().get(0);
		private final Keyword cOpCircumflexAccentEqualsSignKeyword_3_0_0_0 = (Keyword)cOpAlternatives_3_0_0.eContents().get(0);
		private final Keyword cOpDollarSignEqualsSignKeyword_3_0_0_1 = (Keyword)cOpAlternatives_3_0_0.eContents().get(1);
		private final Keyword cOpAsteriskEqualsSignKeyword_3_0_0_2 = (Keyword)cOpAlternatives_3_0_0.eContents().get(2);
		private final Keyword cOpEqualsSignKeyword_3_0_0_3 = (Keyword)cOpAlternatives_3_0_0.eContents().get(3);
		private final RuleCall cOpINCLUDESTerminalRuleCall_3_0_0_4 = (RuleCall)cOpAlternatives_3_0_0.eContents().get(4);
		private final RuleCall cOpDASHMATCHTerminalRuleCall_3_0_0_5 = (RuleCall)cOpAlternatives_3_0_0.eContents().get(5);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final RuleCall cValueIDENTTerminalRuleCall_3_1_0_0 = (RuleCall)cValueAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0_1 = (RuleCall)cValueAlternatives_3_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AttributeSelector returns CssSelector:
		//	{AttributeSelector} "[" name=IDENT (op=("^=" | "$=" | "*=" | "=" | INCLUDES | DASHMATCH) value=(IDENT | STRING))? "]";
		public ParserRule getRule() { return rule; }

		//{AttributeSelector} "[" name=IDENT (op=("^=" | "$=" | "*=" | "=" | INCLUDES | DASHMATCH) value=(IDENT | STRING))? "]"
		public Group getGroup() { return cGroup; }

		//{AttributeSelector}
		public Action getAttributeSelectorAction_0() { return cAttributeSelectorAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//name=IDENT
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_2_0() { return cNameIDENTTerminalRuleCall_2_0; }

		//(op=("^=" | "$=" | "*=" | "=" | INCLUDES | DASHMATCH) value=(IDENT | STRING))?
		public Group getGroup_3() { return cGroup_3; }

		//op=("^=" | "$=" | "*=" | "=" | INCLUDES | DASHMATCH)
		public Assignment getOpAssignment_3_0() { return cOpAssignment_3_0; }

		//"^=" | "$=" | "*=" | "=" | INCLUDES | DASHMATCH
		public Alternatives getOpAlternatives_3_0_0() { return cOpAlternatives_3_0_0; }

		//"^="
		public Keyword getOpCircumflexAccentEqualsSignKeyword_3_0_0_0() { return cOpCircumflexAccentEqualsSignKeyword_3_0_0_0; }

		//"$="
		public Keyword getOpDollarSignEqualsSignKeyword_3_0_0_1() { return cOpDollarSignEqualsSignKeyword_3_0_0_1; }

		//"*="
		public Keyword getOpAsteriskEqualsSignKeyword_3_0_0_2() { return cOpAsteriskEqualsSignKeyword_3_0_0_2; }

		//"="
		public Keyword getOpEqualsSignKeyword_3_0_0_3() { return cOpEqualsSignKeyword_3_0_0_3; }

		//INCLUDES
		public RuleCall getOpINCLUDESTerminalRuleCall_3_0_0_4() { return cOpINCLUDESTerminalRuleCall_3_0_0_4; }

		//DASHMATCH
		public RuleCall getOpDASHMATCHTerminalRuleCall_3_0_0_5() { return cOpDASHMATCHTerminalRuleCall_3_0_0_5; }

		//value=(IDENT | STRING)
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//IDENT | STRING
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }

		//IDENT
		public RuleCall getValueIDENTTerminalRuleCall_3_1_0_0() { return cValueIDENTTerminalRuleCall_3_1_0_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0_1() { return cValueSTRINGTerminalRuleCall_3_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class ClassSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassSelectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ClassSelector returns CssSelector:
		//	{ClassSelector} "." name=IDENT;
		public ParserRule getRule() { return rule; }

		//{ClassSelector} "." name=IDENT
		public Group getGroup() { return cGroup; }

		//{ClassSelector}
		public Action getClassSelectorAction_0() { return cClassSelectorAction_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//name=IDENT
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_2_0() { return cNameIDENTTerminalRuleCall_2_0; }
	}

	public class ElementSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementSelectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ElementSelector returns CssSelector:
		//	{ElementSelector} name=IDENT;
		public ParserRule getRule() { return rule; }

		//{ElementSelector} name=IDENT
		public Group getGroup() { return cGroup; }

		//{ElementSelector}
		public Action getElementSelectorAction_0() { return cElementSelectorAction_0; }

		//name=IDENT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0() { return cNameIDENTTerminalRuleCall_1_0; }
	}

	public class UniversalSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UniversalSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUniversalSelectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNamespeceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamespeceCss_namespace_prefixParserRuleCall_1_0 = (RuleCall)cNamespeceAssignment_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UniversalSelector returns CssSelector:
		//	{UniversalSelector} namespece=css_namespace_prefix? "*";
		public ParserRule getRule() { return rule; }

		//{UniversalSelector} namespece=css_namespace_prefix? "*"
		public Group getGroup() { return cGroup; }

		//{UniversalSelector}
		public Action getUniversalSelectorAction_0() { return cUniversalSelectorAction_0; }

		//namespece=css_namespace_prefix?
		public Assignment getNamespeceAssignment_1() { return cNamespeceAssignment_1; }

		//css_namespace_prefix
		public RuleCall getNamespeceCss_namespace_prefixParserRuleCall_1_0() { return cNamespeceCss_namespace_prefixParserRuleCall_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
	}

	public class IdSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdSelectorAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cHASHMARKTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//IdSelector returns CssSelector:
		//	{IdSelector} HASHMARK name=IDENT;
		public ParserRule getRule() { return rule; }

		//{IdSelector} HASHMARK name=IDENT
		public Group getGroup() { return cGroup; }

		//{IdSelector}
		public Action getIdSelectorAction_0() { return cIdSelectorAction_0; }

		//HASHMARK
		public RuleCall getHASHMARKTerminalRuleCall_1() { return cHASHMARKTerminalRuleCall_1; }

		//name=IDENT
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_2_0() { return cNameIDENTTerminalRuleCall_2_0; }
	}

	public class Css_namespace_prefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_namespace_prefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDENTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////element_name:
		////	IDENT
		////;
		////
		////
		////css_type_selector:
		////	( css_namespace_prefix )? element_name
		////;
		//css_namespace_prefix:
		//	(IDENT | "*")? "|";
		public ParserRule getRule() { return rule; }

		//(IDENT | "*")? "|"
		public Group getGroup() { return cGroup; }

		//(IDENT | "*")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0_0() { return cIDENTTerminalRuleCall_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_0_1() { return cAsteriskKeyword_0_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }
	}

	public class Css_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyCss_propertyParserRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueTokensAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueTokensCssTokParserRuleCall_4_0 = (RuleCall)cValueTokensAssignment_4.eContents().get(0);
		private final Assignment cImportantAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cImportantIMPORTANT_SYMTerminalRuleCall_5_0 = (RuleCall)cImportantAssignment_5.eContents().get(0);
		
		////css_universal: 
		////	( css_namespace_prefix )? '*'
		////;
		////  
		////css_class
		////  : '.' IDENT
		////  ;
		////css_id:
		////	HASH
		////;
		////css_attrib:
		////	'[' IDENT ( ( '^=' | '$=' | '*=' | '=' | INCLUDES | DASHMATCH ) ( IDENT | STRING ) )? ']'
		////;
		//css_declaration hidden(ML_COMMENT):
		//	WS* property=css_property WS* ":" valueTokens+=CssTok+ important?=IMPORTANT_SYM?;
		public ParserRule getRule() { return rule; }

		//WS* property=css_property WS* ":" valueTokens+=CssTok+ important?=IMPORTANT_SYM?
		public Group getGroup() { return cGroup; }

		//WS*
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//property=css_property
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }

		//css_property
		public RuleCall getPropertyCss_propertyParserRuleCall_1_0() { return cPropertyCss_propertyParserRuleCall_1_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//valueTokens+=CssTok+
		public Assignment getValueTokensAssignment_4() { return cValueTokensAssignment_4; }

		//CssTok
		public RuleCall getValueTokensCssTokParserRuleCall_4_0() { return cValueTokensCssTokParserRuleCall_4_0; }

		//important?=IMPORTANT_SYM?
		public Assignment getImportantAssignment_5() { return cImportantAssignment_5; }

		//IMPORTANT_SYM
		public RuleCall getImportantIMPORTANT_SYMTerminalRuleCall_5_0() { return cImportantIMPORTANT_SYMTerminalRuleCall_5_0; }
	}

	public class Css_propertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCss_propertyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidPropertyIdentParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//css_property:
		//	{css_property} name=ValidPropertyIdent;
		public ParserRule getRule() { return rule; }

		//{css_property} name=ValidPropertyIdent
		public Group getGroup() { return cGroup; }

		//{css_property}
		public Action getCss_propertyAction_0() { return cCss_propertyAction_0; }

		//name=ValidPropertyIdent
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidPropertyIdent
		public RuleCall getNameValidPropertyIdentParserRuleCall_1_0() { return cNameValidPropertyIdentParserRuleCall_1_0; }
	}

	public class ValidPropertyIdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidPropertyIdent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ValidPropertyIdent:
		//	"-"? IDENT;
		public ParserRule getRule() { return rule; }

		//"-"? IDENT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1() { return cIDENTTerminalRuleCall_1; }
	}

	public class PseudoNegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PseudoNegation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////css_pseudo
		////  : ':' ':'? (IDENT | functional_pseudo)
		////;
		//PseudoNegation:
		//	":not(" ")";
		public ParserRule getRule() { return rule; }

		//":not(" ")"
		public Group getGroup() { return cGroup; }

		//":not("
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1() { return cRightParenthesisKeyword_1; }
	}

	public class PseudoClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PseudoClass");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cPseudoClassNameParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cPseudoClassFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PseudoClass:
		//	":" ":"? PseudoClassName | PseudoClassFunction;
		public ParserRule getRule() { return rule; }

		//":" ":"? PseudoClassName | PseudoClassFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//":" ":"? PseudoClassName
		public Group getGroup_0() { return cGroup_0; }

		//":"
		public Keyword getColonKeyword_0_0() { return cColonKeyword_0_0; }

		//":"?
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//PseudoClassName
		public RuleCall getPseudoClassNameParserRuleCall_0_2() { return cPseudoClassNameParserRuleCall_0_2; }

		//PseudoClassFunction
		public RuleCall getPseudoClassFunctionParserRuleCall_1() { return cPseudoClassFunctionParserRuleCall_1; }
	}

	public class PseudoClassNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PseudoClassName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////PseudoNegationArgs:
		////	((element = element_name | universal=css_universal) subSelectors+=PseudoNegationArgsSubSelector*)
		////	|
		////	subSelectors+=sub_selector+
		////;
		////
		////PseudoNegationArgsSubSelector:
		////	id=css_id | class=css_class | attrib=css_attrib | pseudoclass=PseudoClass
		////;
		//PseudoClassName:
		//	name=IDENT;
		public ParserRule getRule() { return rule; }

		//name=IDENT
		public Assignment getNameAssignment() { return cNameAssignment; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0() { return cNameIDENTTerminalRuleCall_0; }
	}

	public class PseudoClassFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PseudoClassFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsCssTokParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PseudoClassFunction:
		//	name=IDENT "(" params+=CssTok* ")";
		public ParserRule getRule() { return rule; }

		//name=IDENT "(" params+=CssTok* ")"
		public Group getGroup() { return cGroup; }

		//name=IDENT
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0_0() { return cNameIDENTTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//params+=CssTok*
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//CssTok
		public RuleCall getParamsCssTokParserRuleCall_2_0() { return cParamsCssTokParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CombinatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "combinator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cTildeKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////css_negation_arg
		////  : css_type_selector | css_universal | HASH | css_class | css_attrib | css_pseudo
		////;
		////
		////functional_pseudo:
		////	IDENT '(' params+=CssTok* ')'	
		////;
		////function_expr:
		////	( ( '+' | '-' | DIMENSION | NUMBER | STRING | IDENT ) )+	
		////;
		////DIMENSION:
		//// 	PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ
		////;
		//combinator:
		//	("+" | ">" | "~") WS*;
		public ParserRule getRule() { return rule; }

		//("+" | ">" | "~") WS*
		public Group getGroup() { return cGroup; }

		//"+" | ">" | "~"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_1() { return cGreaterThanSignKeyword_0_1; }

		//"~"
		public Keyword getTildeKeyword_0_2() { return cTildeKeyword_0_2; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//operator:
		//	"/" | COMMA;
		public ParserRule getRule() { return rule; }

		//"/" | COMMA
		public Alternatives getAlternatives() { return cAlternatives; }

		//"/"
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1() { return cCOMMATerminalRuleCall_1; }
	}

	public class Unary_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unary_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//unary_operator:
		//	"-" | "+";
		public ParserRule getRule() { return rule; }

		//"-" | "+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//"+"
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
	}

	public class SymbolTokElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SymbolTok");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSymbolTokAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cSymbolAlternatives_1_0 = (Alternatives)cSymbolAssignment_1.eContents().get(0);
		private final RuleCall cSymbolCOMMATerminalRuleCall_1_0_0 = (RuleCall)cSymbolAlternatives_1_0.eContents().get(0);
		private final RuleCall cSymbolPERCENTTerminalRuleCall_1_0_1 = (RuleCall)cSymbolAlternatives_1_0.eContents().get(1);
		
		//SymbolTok returns CssTok:
		//	{SymbolTok} symbol=(COMMA | PERCENT);
		public ParserRule getRule() { return rule; }

		//{SymbolTok} symbol=(COMMA | PERCENT)
		public Group getGroup() { return cGroup; }

		//{SymbolTok}
		public Action getSymbolTokAction_0() { return cSymbolTokAction_0; }

		//symbol=(COMMA | PERCENT)
		public Assignment getSymbolAssignment_1() { return cSymbolAssignment_1; }

		//COMMA | PERCENT
		public Alternatives getSymbolAlternatives_1_0() { return cSymbolAlternatives_1_0; }

		//COMMA
		public RuleCall getSymbolCOMMATerminalRuleCall_1_0_0() { return cSymbolCOMMATerminalRuleCall_1_0_0; }

		//PERCENT
		public RuleCall getSymbolPERCENTTerminalRuleCall_1_0_1() { return cSymbolPERCENTTerminalRuleCall_1_0_1; }
	}

	public class WSTokElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WSTok");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWSTokAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//WSTok returns CssTok:
		//	{WSTok} WS;
		public ParserRule getRule() { return rule; }

		//{WSTok} WS
		public Group getGroup() { return cGroup; }

		//{WSTok}
		public Action getWSTokAction_0() { return cWSTokAction_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }
	}

	public class StringTokElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringTok");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTokAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringTok returns CssTok:
		//	{StringTok} value=STRING;
		public ParserRule getRule() { return rule; }

		//{StringTok} value=STRING
		public Group getGroup() { return cGroup; }

		//{StringTok}
		public Action getStringTokAction_0() { return cStringTokAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class FuncTokElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FuncTok");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFuncTokAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFuncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFuncFunctionParserRuleCall_1_0 = (RuleCall)cFuncAssignment_1.eContents().get(0);
		
		//FuncTok returns CssTok:
		//	{FuncTok} func=function;
		public ParserRule getRule() { return rule; }

		//{FuncTok} func=function
		public Group getGroup() { return cGroup; }

		//{FuncTok}
		public Action getFuncTokAction_0() { return cFuncTokAction_0; }

		//func=function
		public Assignment getFuncAssignment_1() { return cFuncAssignment_1; }

		//function
		public RuleCall getFuncFunctionParserRuleCall_1_0() { return cFuncFunctionParserRuleCall_1_0; }
	}

	public class NumberTokElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberTok");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberTokAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumINTEGERTerminalRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitIDENTTerminalRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		
		//NumberTok returns CssTok hidden():
		//	{NumberTok} num=INTEGER => unit=IDENT?;
		public ParserRule getRule() { return rule; }

		//{NumberTok} num=INTEGER => unit=IDENT?
		public Group getGroup() { return cGroup; }

		//{NumberTok}
		public Action getNumberTokAction_0() { return cNumberTokAction_0; }

		//num=INTEGER
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }

		//INTEGER
		public RuleCall getNumINTEGERTerminalRuleCall_1_0() { return cNumINTEGERTerminalRuleCall_1_0; }

		//=> unit=IDENT?
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }

		//IDENT
		public RuleCall getUnitIDENTTerminalRuleCall_2_0() { return cUnitIDENTTerminalRuleCall_2_0; }
	}

	public class IdentifierTokElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentifierTok");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdentifierTokAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdValidPropertyIdentParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//IdentifierTok returns CssTok:
		//	{IdentifierTok} id=ValidPropertyIdent;
		public ParserRule getRule() { return rule; }

		//{IdentifierTok} id=ValidPropertyIdent
		public Group getGroup() { return cGroup; }

		//{IdentifierTok}
		public Action getIdentifierTokAction_0() { return cIdentifierTokAction_0; }

		//id=ValidPropertyIdent
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ValidPropertyIdent
		public RuleCall getIdValidPropertyIdentParserRuleCall_1_0() { return cIdValidPropertyIdentParserRuleCall_1_0; }
	}

	public class UrlTokElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UrlTok");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUrlTokAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlURLTypeParserRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		
		//UrlTok returns CssTok:
		//	{UrlTok} url=URLType;
		public ParserRule getRule() { return rule; }

		//{UrlTok} url=URLType
		public Group getGroup() { return cGroup; }

		//{UrlTok}
		public Action getUrlTokAction_0() { return cUrlTokAction_0; }

		//url=URLType
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }

		//URLType
		public RuleCall getUrlURLTypeParserRuleCall_1_0() { return cUrlURLTypeParserRuleCall_1_0; }
	}

	public class ColorTokElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorTok");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColorTokAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cHASHMARKTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cColorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cColorAlternatives_2_0 = (Alternatives)cColorAssignment_2.eContents().get(0);
		private final RuleCall cColorHEXTerminalRuleCall_2_0_0 = (RuleCall)cColorAlternatives_2_0.eContents().get(0);
		private final RuleCall cColorIDENTTerminalRuleCall_2_0_1 = (RuleCall)cColorAlternatives_2_0.eContents().get(1);
		
		//ColorTok returns CssTok:
		//	{ColorTok} HASHMARK color=(HEX | IDENT);
		public ParserRule getRule() { return rule; }

		//{ColorTok} HASHMARK color=(HEX | IDENT)
		public Group getGroup() { return cGroup; }

		//{ColorTok}
		public Action getColorTokAction_0() { return cColorTokAction_0; }

		//HASHMARK
		public RuleCall getHASHMARKTerminalRuleCall_1() { return cHASHMARKTerminalRuleCall_1; }

		//color=(HEX | IDENT)
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }

		//HEX | IDENT
		public Alternatives getColorAlternatives_2_0() { return cColorAlternatives_2_0; }

		//HEX
		public RuleCall getColorHEXTerminalRuleCall_2_0_0() { return cColorHEXTerminalRuleCall_2_0_0; }

		//IDENT
		public RuleCall getColorIDENTTerminalRuleCall_2_0_1() { return cColorIDENTTerminalRuleCall_2_0_1; }
	}

	public class CssTokElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CssTok");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSymbolTokParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWSTokParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringTokParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFuncTokParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNumberTokParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIdentifierTokParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cUrlTokParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cColorTokParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//CssTok hidden(ML_COMMENT, WS):
		//	SymbolTok | WSTok | StringTok | FuncTok | NumberTok | //{NumberTok} num=INTEGER =>unit=IDENT? |
		//	IdentifierTok | UrlTok | ColorTok;
		public ParserRule getRule() { return rule; }

		//SymbolTok | WSTok | StringTok | FuncTok | NumberTok | //{NumberTok} num=INTEGER =>unit=IDENT? |
		//IdentifierTok | UrlTok | ColorTok
		public Alternatives getAlternatives() { return cAlternatives; }

		//SymbolTok
		public RuleCall getSymbolTokParserRuleCall_0() { return cSymbolTokParserRuleCall_0; }

		//WSTok
		public RuleCall getWSTokParserRuleCall_1() { return cWSTokParserRuleCall_1; }

		//StringTok
		public RuleCall getStringTokParserRuleCall_2() { return cStringTokParserRuleCall_2; }

		//FuncTok
		public RuleCall getFuncTokParserRuleCall_3() { return cFuncTokParserRuleCall_3; }

		//NumberTok
		public RuleCall getNumberTokParserRuleCall_4() { return cNumberTokParserRuleCall_4; }

		////{NumberTok} num=INTEGER =>unit=IDENT? |
		//IdentifierTok
		public RuleCall getIdentifierTokParserRuleCall_5() { return cIdentifierTokParserRuleCall_5; }

		//UrlTok
		public RuleCall getUrlTokParserRuleCall_6() { return cUrlTokParserRuleCall_6; }

		//ColorTok
		public RuleCall getColorTokParserRuleCall_7() { return cColorTokParserRuleCall_7; }
	}

	public class SignedNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignedNum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnary_operatorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTEGERTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cINTEGERTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final RuleCall cINTEGERTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		
		//SignedNum hidden():
		//	unary_operator? (INTEGER | INTEGER? "." INTEGER);
		public ParserRule getRule() { return rule; }

		//unary_operator? (INTEGER | INTEGER? "." INTEGER)
		public Group getGroup() { return cGroup; }

		//unary_operator?
		public RuleCall getUnary_operatorParserRuleCall_0() { return cUnary_operatorParserRuleCall_0; }

		//INTEGER | INTEGER? "." INTEGER
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//INTEGER
		public RuleCall getINTEGERTerminalRuleCall_1_0() { return cINTEGERTerminalRuleCall_1_0; }

		//INTEGER? "." INTEGER
		public Group getGroup_1_1() { return cGroup_1_1; }

		//INTEGER?
		public RuleCall getINTEGERTerminalRuleCall_1_1_0() { return cINTEGERTerminalRuleCall_1_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }

		//INTEGER
		public RuleCall getINTEGERTerminalRuleCall_1_1_2() { return cINTEGERTerminalRuleCall_1_1_2; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsCssTokParserRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////expr hidden(WS,ML_COMMENT): termGroups+=termGroup ( operator termGroups+=termGroup )*
		////  ;
		////termGroup:
		////	terms+=term+
		////;
		////term
		////  :   number=numberTerm
		////  	| stringValue=STRING 
		////  	| identifier=ValidPropertyIdent // this is only a string and not a ref to css_property, becaus it also matches enums :/
		////  	| url=URLType 
		////  	| function=function
		////  	| hexColor=HexColor
		//////  	| gradient=Gradient
		//////  	| pair=pair
		////;
		////Gradient:
		////	LinearGradient | RadialGradient 
		////;
		////
		////LinearGradient:
		////	IDENT '(' start=PointValue ')' IDENT '(' end=PointValue ')' IDENT ( '(' stops+=StopValue ')' )+ // ( ('repeat' | 'reflect') )?
		////;
		////
		////RadialGradient:
		////	IDENT ( '(' center=PointValue ')' COMMA )? radius=SizeType ( IDENT '(' focus=PointValue ')' ) IDENT ( '(' stops+=StopValue ')' )+ //( ( 'repeat' | 'reflect' ))?
		////;
		////
		////StopValue:
		////	pos=SizeType COMMA color=HexColor
		////;
		////
		////PointValue:
		////	x=SizeType COMMA y=SizeType
		////;
		////pair:
		////	'(' expr1=expr COMMA expr2=expr ')'
		////;
		////numberTerm hidden():
		////	(unary_operator? 
		////    ( NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE |
		////      TIME | FREQ ))
		////;
		////num:
		////	INTEGER | REAL
		////;
		//function hidden():
		//	"-"? name=IDENT "(" params+=CssTok+ / *expression=expr* / ")";
		public ParserRule getRule() { return rule; }

		//"-"? name=IDENT "(" params+=CssTok+ / *expression=expr* / ")"
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//name=IDENT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0() { return cNameIDENTTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//params+=CssTok+
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }

		//CssTok
		public RuleCall getParamsCssTokParserRuleCall_3_0() { return cParamsCssTokParserRuleCall_3_0; }

		/// *expression=expr* / ")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class URLTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URLType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUrlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUrlSTRINGTerminalRuleCall_2_0 = (RuleCall)cUrlAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////HexColor hidden():
		////	HASH
		////;
		//URLType hidden():
		//	"url" "(" url=STRING ")";
		public ParserRule getRule() { return rule; }

		//"url" "(" url=STRING ")"
		public Group getGroup() { return cGroup; }

		//"url"
		public Keyword getUrlKeyword_0() { return cUrlKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//url=STRING
		public Assignment getUrlAssignment_2() { return cUrlAssignment_2; }

		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_2_0() { return cUrlSTRINGTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	public class Css_notElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "css_not");
		private final EnumLiteralDeclaration cNotEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNotNotKeyword_0 = (Keyword)cNotEnumLiteralDeclaration.eContents().get(0);
		
		////css_negation:
		////	':' not=css_not negation_arg=css_negation_arg ')'
		////;
		//enum css_not:
		//	not="not(";
		public EnumRule getRule() { return rule; }

		//not="not("
		public EnumLiteralDeclaration getNotEnumLiteralDeclaration() { return cNotEnumLiteralDeclaration; }

		//"not("
		public Keyword getNotNotKeyword_0() { return cNotNotKeyword_0; }
	}
	
	private StylesheetElements pStylesheet;
	private CharsetElements pCharset;
	private ImportExpressionElements pImportExpression;
	private PageElements pPage;
	private Pseudo_pageElements pPseudo_page;
	private MediaElements pMedia;
	private Media_listElements pMedia_list;
	private MediumElements pMedium;
	private RulesetElements pRuleset;
	private SelectorElements pSelector;
	private Simple_selectorElements pSimple_selector;
	private SubSelectorElements pSubSelector;
	private AttributeSelectorElements pAttributeSelector;
	private ClassSelectorElements pClassSelector;
	private ElementSelectorElements pElementSelector;
	private UniversalSelectorElements pUniversalSelector;
	private IdSelectorElements pIdSelector;
	private Css_namespace_prefixElements pCss_namespace_prefix;
	private Css_declarationElements pCss_declaration;
	private Css_propertyElements pCss_property;
	private ValidPropertyIdentElements pValidPropertyIdent;
	private PseudoNegationElements pPseudoNegation;
	private PseudoClassElements pPseudoClass;
	private PseudoClassNameElements pPseudoClassName;
	private PseudoClassFunctionElements pPseudoClassFunction;
	private Css_notElements unknownRuleCss_not;
	private CombinatorElements pCombinator;
	private OperatorElements pOperator;
	private Unary_operatorElements pUnary_operator;
	private SymbolTokElements pSymbolTok;
	private WSTokElements pWSTok;
	private StringTokElements pStringTok;
	private FuncTokElements pFuncTok;
	private NumberTokElements pNumberTok;
	private IdentifierTokElements pIdentifierTok;
	private UrlTokElements pUrlTok;
	private ColorTokElements pColorTok;
	private CssTokElements pCssTok;
	private SignedNumElements pSignedNum;
	private FunctionElements pFunction;
	private URLTypeElements pURLType;
	private TerminalRule tIMPORTANT_SYM;
	private TerminalRule tINTEGER;
	private TerminalRule tREAL;
	private TerminalRule tHASHMARK;
	private TerminalRule tIDENT;
	private TerminalRule tHEX;
	private TerminalRule tCOMMA;
	private TerminalRule tPERCENT;
	private TerminalRule tML_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tSTRING;
	private TerminalRule tINCLUDES;
	private TerminalRule tDASHMATCH;
	
	private final Grammar grammar;

	@Inject
	public CssDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.bestsolution.efxclipse.tooling.css.CssDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//stylesheet:
	//	charset=charset? imports+=importExpression* (ruleset+=ruleset | media+=media | page+=page)*;
	public StylesheetElements getStylesheetAccess() {
		return (pStylesheet != null) ? pStylesheet : (pStylesheet = new StylesheetElements());
	}
	
	public ParserRule getStylesheetRule() {
		return getStylesheetAccess().getRule();
	}

	//charset:
	//	("@charset" | "@CHARSET") charset=STRING ";";
	public CharsetElements getCharsetAccess() {
		return (pCharset != null) ? pCharset : (pCharset = new CharsetElements());
	}
	
	public ParserRule getCharsetRule() {
		return getCharsetAccess().getRule();
	}

	//importExpression:
	//	("@import" | "@IMPORT") value=STRING | URLType mediaList=media_list? ";";
	public ImportExpressionElements getImportExpressionAccess() {
		return (pImportExpression != null) ? pImportExpression : (pImportExpression = new ImportExpressionElements());
	}
	
	public ParserRule getImportExpressionRule() {
		return getImportExpressionAccess().getRule();
	}

	//page:
	//	{page} ("@page" | "@PAGE") pseudoPage=pseudo_page? "{" declarations+=css_declaration? (";"
	//	declarations+=css_declaration?)* "}";
	public PageElements getPageAccess() {
		return (pPage != null) ? pPage : (pPage = new PageElements());
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}

	//pseudo_page:
	//	":" IDENT;
	public Pseudo_pageElements getPseudo_pageAccess() {
		return (pPseudo_page != null) ? pPseudo_page : (pPseudo_page = new Pseudo_pageElements());
	}
	
	public ParserRule getPseudo_pageRule() {
		return getPseudo_pageAccess().getRule();
	}

	//media:
	//	("@media" | "@MEDIA") medialist=media_list "{" rulesets+=ruleset* "}";
	public MediaElements getMediaAccess() {
		return (pMedia != null) ? pMedia : (pMedia = new MediaElements());
	}
	
	public ParserRule getMediaRule() {
		return getMediaAccess().getRule();
	}

	//media_list:
	//	medium (COMMA medium)*;
	public Media_listElements getMedia_listAccess() {
		return (pMedia_list != null) ? pMedia_list : (pMedia_list = new Media_listElements());
	}
	
	public ParserRule getMedia_listRule() {
		return getMedia_listAccess().getRule();
	}

	//medium:
	//	IDENT;
	public MediumElements getMediumAccess() {
		return (pMedium != null) ? pMedium : (pMedium = new MediumElements());
	}
	
	public ParserRule getMediumRule() {
		return getMediumAccess().getRule();
	}

	//ruleset:
	//	selectors+=selector (COMMA selectors+=selector)* WS* "{" (declarations+=css_declaration ";")* "}";
	public RulesetElements getRulesetAccess() {
		return (pRuleset != null) ? pRuleset : (pRuleset = new RulesetElements());
	}
	
	public ParserRule getRulesetRule() {
		return getRulesetAccess().getRule();
	}

	//selector hidden():
	//	simpleselectors+=simple_selector (combinator=combinator selector=selector | WS+ combinator=combinator?
	//	selector=selector)?;
	public SelectorElements getSelectorAccess() {
		return (pSelector != null) ? pSelector : (pSelector = new SelectorElements());
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}

	//simple_selector:
	//	(element=ElementSelector | universal=UniversalSelector) subSelectors+=SubSelector* //	((element = element_name | universal=css_universal) subSelectors+=sub_selector*)
	//	//	|
	//	//	subSelectors+=sub_selector+
	//	| subSelectors+=SubSelector+;
	public Simple_selectorElements getSimple_selectorAccess() {
		return (pSimple_selector != null) ? pSimple_selector : (pSimple_selector = new Simple_selectorElements());
	}
	
	public ParserRule getSimple_selectorRule() {
		return getSimple_selectorAccess().getRule();
	}

	//SubSelector returns CssSelector:
	//	IdSelector | ClassSelector | AttributeSelector | PseudoClass;
	public SubSelectorElements getSubSelectorAccess() {
		return (pSubSelector != null) ? pSubSelector : (pSubSelector = new SubSelectorElements());
	}
	
	public ParserRule getSubSelectorRule() {
		return getSubSelectorAccess().getRule();
	}

	//AttributeSelector returns CssSelector:
	//	{AttributeSelector} "[" name=IDENT (op=("^=" | "$=" | "*=" | "=" | INCLUDES | DASHMATCH) value=(IDENT | STRING))? "]";
	public AttributeSelectorElements getAttributeSelectorAccess() {
		return (pAttributeSelector != null) ? pAttributeSelector : (pAttributeSelector = new AttributeSelectorElements());
	}
	
	public ParserRule getAttributeSelectorRule() {
		return getAttributeSelectorAccess().getRule();
	}

	//ClassSelector returns CssSelector:
	//	{ClassSelector} "." name=IDENT;
	public ClassSelectorElements getClassSelectorAccess() {
		return (pClassSelector != null) ? pClassSelector : (pClassSelector = new ClassSelectorElements());
	}
	
	public ParserRule getClassSelectorRule() {
		return getClassSelectorAccess().getRule();
	}

	//ElementSelector returns CssSelector:
	//	{ElementSelector} name=IDENT;
	public ElementSelectorElements getElementSelectorAccess() {
		return (pElementSelector != null) ? pElementSelector : (pElementSelector = new ElementSelectorElements());
	}
	
	public ParserRule getElementSelectorRule() {
		return getElementSelectorAccess().getRule();
	}

	//UniversalSelector returns CssSelector:
	//	{UniversalSelector} namespece=css_namespace_prefix? "*";
	public UniversalSelectorElements getUniversalSelectorAccess() {
		return (pUniversalSelector != null) ? pUniversalSelector : (pUniversalSelector = new UniversalSelectorElements());
	}
	
	public ParserRule getUniversalSelectorRule() {
		return getUniversalSelectorAccess().getRule();
	}

	//IdSelector returns CssSelector:
	//	{IdSelector} HASHMARK name=IDENT;
	public IdSelectorElements getIdSelectorAccess() {
		return (pIdSelector != null) ? pIdSelector : (pIdSelector = new IdSelectorElements());
	}
	
	public ParserRule getIdSelectorRule() {
		return getIdSelectorAccess().getRule();
	}

	////element_name:
	////	IDENT
	////;
	////
	////
	////css_type_selector:
	////	( css_namespace_prefix )? element_name
	////;
	//css_namespace_prefix:
	//	(IDENT | "*")? "|";
	public Css_namespace_prefixElements getCss_namespace_prefixAccess() {
		return (pCss_namespace_prefix != null) ? pCss_namespace_prefix : (pCss_namespace_prefix = new Css_namespace_prefixElements());
	}
	
	public ParserRule getCss_namespace_prefixRule() {
		return getCss_namespace_prefixAccess().getRule();
	}

	////css_universal: 
	////	( css_namespace_prefix )? '*'
	////;
	////  
	////css_class
	////  : '.' IDENT
	////  ;
	////css_id:
	////	HASH
	////;
	////css_attrib:
	////	'[' IDENT ( ( '^=' | '$=' | '*=' | '=' | INCLUDES | DASHMATCH ) ( IDENT | STRING ) )? ']'
	////;
	//css_declaration hidden(ML_COMMENT):
	//	WS* property=css_property WS* ":" valueTokens+=CssTok+ important?=IMPORTANT_SYM?;
	public Css_declarationElements getCss_declarationAccess() {
		return (pCss_declaration != null) ? pCss_declaration : (pCss_declaration = new Css_declarationElements());
	}
	
	public ParserRule getCss_declarationRule() {
		return getCss_declarationAccess().getRule();
	}

	//css_property:
	//	{css_property} name=ValidPropertyIdent;
	public Css_propertyElements getCss_propertyAccess() {
		return (pCss_property != null) ? pCss_property : (pCss_property = new Css_propertyElements());
	}
	
	public ParserRule getCss_propertyRule() {
		return getCss_propertyAccess().getRule();
	}

	//ValidPropertyIdent:
	//	"-"? IDENT;
	public ValidPropertyIdentElements getValidPropertyIdentAccess() {
		return (pValidPropertyIdent != null) ? pValidPropertyIdent : (pValidPropertyIdent = new ValidPropertyIdentElements());
	}
	
	public ParserRule getValidPropertyIdentRule() {
		return getValidPropertyIdentAccess().getRule();
	}

	////css_pseudo
	////  : ':' ':'? (IDENT | functional_pseudo)
	////;
	//PseudoNegation:
	//	":not(" ")";
	public PseudoNegationElements getPseudoNegationAccess() {
		return (pPseudoNegation != null) ? pPseudoNegation : (pPseudoNegation = new PseudoNegationElements());
	}
	
	public ParserRule getPseudoNegationRule() {
		return getPseudoNegationAccess().getRule();
	}

	//PseudoClass:
	//	":" ":"? PseudoClassName | PseudoClassFunction;
	public PseudoClassElements getPseudoClassAccess() {
		return (pPseudoClass != null) ? pPseudoClass : (pPseudoClass = new PseudoClassElements());
	}
	
	public ParserRule getPseudoClassRule() {
		return getPseudoClassAccess().getRule();
	}

	////PseudoNegationArgs:
	////	((element = element_name | universal=css_universal) subSelectors+=PseudoNegationArgsSubSelector*)
	////	|
	////	subSelectors+=sub_selector+
	////;
	////
	////PseudoNegationArgsSubSelector:
	////	id=css_id | class=css_class | attrib=css_attrib | pseudoclass=PseudoClass
	////;
	//PseudoClassName:
	//	name=IDENT;
	public PseudoClassNameElements getPseudoClassNameAccess() {
		return (pPseudoClassName != null) ? pPseudoClassName : (pPseudoClassName = new PseudoClassNameElements());
	}
	
	public ParserRule getPseudoClassNameRule() {
		return getPseudoClassNameAccess().getRule();
	}

	//PseudoClassFunction:
	//	name=IDENT "(" params+=CssTok* ")";
	public PseudoClassFunctionElements getPseudoClassFunctionAccess() {
		return (pPseudoClassFunction != null) ? pPseudoClassFunction : (pPseudoClassFunction = new PseudoClassFunctionElements());
	}
	
	public ParserRule getPseudoClassFunctionRule() {
		return getPseudoClassFunctionAccess().getRule();
	}

	////css_negation:
	////	':' not=css_not negation_arg=css_negation_arg ')'
	////;
	//enum css_not:
	//	not="not(";
	public Css_notElements getCss_notAccess() {
		return (unknownRuleCss_not != null) ? unknownRuleCss_not : (unknownRuleCss_not = new Css_notElements());
	}
	
	public EnumRule getCss_notRule() {
		return getCss_notAccess().getRule();
	}

	////css_negation_arg
	////  : css_type_selector | css_universal | HASH | css_class | css_attrib | css_pseudo
	////;
	////
	////functional_pseudo:
	////	IDENT '(' params+=CssTok* ')'	
	////;
	////function_expr:
	////	( ( '+' | '-' | DIMENSION | NUMBER | STRING | IDENT ) )+	
	////;
	////DIMENSION:
	//// 	PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ
	////;
	//combinator:
	//	("+" | ">" | "~") WS*;
	public CombinatorElements getCombinatorAccess() {
		return (pCombinator != null) ? pCombinator : (pCombinator = new CombinatorElements());
	}
	
	public ParserRule getCombinatorRule() {
		return getCombinatorAccess().getRule();
	}

	//operator:
	//	"/" | COMMA;
	public OperatorElements getOperatorAccess() {
		return (pOperator != null) ? pOperator : (pOperator = new OperatorElements());
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//unary_operator:
	//	"-" | "+";
	public Unary_operatorElements getUnary_operatorAccess() {
		return (pUnary_operator != null) ? pUnary_operator : (pUnary_operator = new Unary_operatorElements());
	}
	
	public ParserRule getUnary_operatorRule() {
		return getUnary_operatorAccess().getRule();
	}

	//SymbolTok returns CssTok:
	//	{SymbolTok} symbol=(COMMA | PERCENT);
	public SymbolTokElements getSymbolTokAccess() {
		return (pSymbolTok != null) ? pSymbolTok : (pSymbolTok = new SymbolTokElements());
	}
	
	public ParserRule getSymbolTokRule() {
		return getSymbolTokAccess().getRule();
	}

	//WSTok returns CssTok:
	//	{WSTok} WS;
	public WSTokElements getWSTokAccess() {
		return (pWSTok != null) ? pWSTok : (pWSTok = new WSTokElements());
	}
	
	public ParserRule getWSTokRule() {
		return getWSTokAccess().getRule();
	}

	//StringTok returns CssTok:
	//	{StringTok} value=STRING;
	public StringTokElements getStringTokAccess() {
		return (pStringTok != null) ? pStringTok : (pStringTok = new StringTokElements());
	}
	
	public ParserRule getStringTokRule() {
		return getStringTokAccess().getRule();
	}

	//FuncTok returns CssTok:
	//	{FuncTok} func=function;
	public FuncTokElements getFuncTokAccess() {
		return (pFuncTok != null) ? pFuncTok : (pFuncTok = new FuncTokElements());
	}
	
	public ParserRule getFuncTokRule() {
		return getFuncTokAccess().getRule();
	}

	//NumberTok returns CssTok hidden():
	//	{NumberTok} num=INTEGER => unit=IDENT?;
	public NumberTokElements getNumberTokAccess() {
		return (pNumberTok != null) ? pNumberTok : (pNumberTok = new NumberTokElements());
	}
	
	public ParserRule getNumberTokRule() {
		return getNumberTokAccess().getRule();
	}

	//IdentifierTok returns CssTok:
	//	{IdentifierTok} id=ValidPropertyIdent;
	public IdentifierTokElements getIdentifierTokAccess() {
		return (pIdentifierTok != null) ? pIdentifierTok : (pIdentifierTok = new IdentifierTokElements());
	}
	
	public ParserRule getIdentifierTokRule() {
		return getIdentifierTokAccess().getRule();
	}

	//UrlTok returns CssTok:
	//	{UrlTok} url=URLType;
	public UrlTokElements getUrlTokAccess() {
		return (pUrlTok != null) ? pUrlTok : (pUrlTok = new UrlTokElements());
	}
	
	public ParserRule getUrlTokRule() {
		return getUrlTokAccess().getRule();
	}

	//ColorTok returns CssTok:
	//	{ColorTok} HASHMARK color=(HEX | IDENT);
	public ColorTokElements getColorTokAccess() {
		return (pColorTok != null) ? pColorTok : (pColorTok = new ColorTokElements());
	}
	
	public ParserRule getColorTokRule() {
		return getColorTokAccess().getRule();
	}

	//CssTok hidden(ML_COMMENT, WS):
	//	SymbolTok | WSTok | StringTok | FuncTok | NumberTok | //{NumberTok} num=INTEGER =>unit=IDENT? |
	//	IdentifierTok | UrlTok | ColorTok;
	public CssTokElements getCssTokAccess() {
		return (pCssTok != null) ? pCssTok : (pCssTok = new CssTokElements());
	}
	
	public ParserRule getCssTokRule() {
		return getCssTokAccess().getRule();
	}

	//SignedNum hidden():
	//	unary_operator? (INTEGER | INTEGER? "." INTEGER);
	public SignedNumElements getSignedNumAccess() {
		return (pSignedNum != null) ? pSignedNum : (pSignedNum = new SignedNumElements());
	}
	
	public ParserRule getSignedNumRule() {
		return getSignedNumAccess().getRule();
	}

	////expr hidden(WS,ML_COMMENT): termGroups+=termGroup ( operator termGroups+=termGroup )*
	////  ;
	////termGroup:
	////	terms+=term+
	////;
	////term
	////  :   number=numberTerm
	////  	| stringValue=STRING 
	////  	| identifier=ValidPropertyIdent // this is only a string and not a ref to css_property, becaus it also matches enums :/
	////  	| url=URLType 
	////  	| function=function
	////  	| hexColor=HexColor
	//////  	| gradient=Gradient
	//////  	| pair=pair
	////;
	////Gradient:
	////	LinearGradient | RadialGradient 
	////;
	////
	////LinearGradient:
	////	IDENT '(' start=PointValue ')' IDENT '(' end=PointValue ')' IDENT ( '(' stops+=StopValue ')' )+ // ( ('repeat' | 'reflect') )?
	////;
	////
	////RadialGradient:
	////	IDENT ( '(' center=PointValue ')' COMMA )? radius=SizeType ( IDENT '(' focus=PointValue ')' ) IDENT ( '(' stops+=StopValue ')' )+ //( ( 'repeat' | 'reflect' ))?
	////;
	////
	////StopValue:
	////	pos=SizeType COMMA color=HexColor
	////;
	////
	////PointValue:
	////	x=SizeType COMMA y=SizeType
	////;
	////pair:
	////	'(' expr1=expr COMMA expr2=expr ')'
	////;
	////numberTerm hidden():
	////	(unary_operator? 
	////    ( NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE |
	////      TIME | FREQ ))
	////;
	////num:
	////	INTEGER | REAL
	////;
	//function hidden():
	//	"-"? name=IDENT "(" params+=CssTok+ / *expression=expr* / ")";
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	////HexColor hidden():
	////	HASH
	////;
	//URLType hidden():
	//	"url" "(" url=STRING ")";
	public URLTypeElements getURLTypeAccess() {
		return (pURLType != null) ? pURLType : (pURLType = new URLTypeElements());
	}
	
	public ParserRule getURLTypeRule() {
		return getURLTypeAccess().getRule();
	}

	////NUMBER: num;
	////PERCENTAGE: num'%';
	////EMS: num 'em';
	////EXS: num 'ex';
	////LENGTH hidden(): num ('px' | 'cm' | 'mm' | 'in' | 'pt' | 'pc' ) ;
	////ANGLE: num ('deg' | 'rad' | 'grad' );
	////TIME: num ('ms'| 's' );
	////FREQ: num ('hz' | 'khz');
	//terminal IMPORTANT_SYM:
	//	"!important";
	public TerminalRule getIMPORTANT_SYMRule() {
		return (tIMPORTANT_SYM != null) ? tIMPORTANT_SYM : (tIMPORTANT_SYM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IMPORTANT_SYM"));
	} 

	////ReservedWords:
	////	  'em' 
	////	| 'ex'
	////	| 'px' | 'cm' | 'mm' | 'in' | 'pt' | 'pc'
	////	| 'deg' | 'rad' | 'grad'
	////	| 'ms'| 's'
	////	| 'hz' | 'khz'
	////;
	//terminal INTEGER:
	//	"0".."9"+;
	public TerminalRule getINTEGERRule() {
		return (tINTEGER != null) ? tINTEGER : (tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER"));
	} 

	//terminal REAL:
	//	"0".."9"* "." "0".."9"+;
	public TerminalRule getREALRule() {
		return (tREAL != null) ? tREAL : (tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL"));
	} 

	////terminal HASH: '#' ('_' | '-' | 'a'..'z' | 'A'..'Z' | '0'..'9' )+;
	//terminal HASHMARK:
	//	"#";
	public TerminalRule getHASHMARKRule() {
		return (tHASHMARK != null) ? tHASHMARK : (tHASHMARK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HASHMARK"));
	} 

	////terminal COLORHASH: '#' ('a'..'z' | 'A'..'Z' | '0'..'9' )+;
	//terminal IDENT:
	//	("_" | "a".."z" | "A".."Z") ("_" | "-" | "a".."z" | "A".."Z" | "0".."9")*;
	public TerminalRule getIDENTRule() {
		return (tIDENT != null) ? tIDENT : (tIDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENT"));
	} 

	//terminal HEX:
	//	("a".."z" | "A".."Z" | "0".."9")+;
	public TerminalRule getHEXRule() {
		return (tHEX != null) ? tHEX : (tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX"));
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return (tCOMMA != null) ? tCOMMA : (tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA"));
	} 

	//terminal PERCENT:
	//	"%";
	public TerminalRule getPERCENTRule() {
		return (tPERCENT != null) ? tPERCENT : (tPERCENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PERCENT"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal INCLUDES:
	//	"~=";
	public TerminalRule getINCLUDESRule() {
		return (tINCLUDES != null) ? tINCLUDES : (tINCLUDES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INCLUDES"));
	} 

	//terminal DASHMATCH:
	//	"|=";
	public TerminalRule getDASHMATCHRule() {
		return (tDASHMATCH != null) ? tDASHMATCH : (tDASHMATCH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DASHMATCH"));
	} 
}
