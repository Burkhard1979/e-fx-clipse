/*
* generated by Xtext
*/
package at.bestsolution.efxclipse.tooling.fxmlx.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import at.bestsolution.efxclipse.tooling.fxmlx.services.FXMLDslGrammarAccess;

public class FXMLDslParser extends AbstractContentAssistParser {
	
	@Inject
	private FXMLDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected at.bestsolution.efxclipse.tooling.fxmlx.ui.contentassist.antlr.internal.InternalFXMLDslParser createParser() {
		at.bestsolution.efxclipse.tooling.fxmlx.ui.contentassist.antlr.internal.InternalFXMLDslParser result = new at.bestsolution.efxclipse.tooling.fxmlx.ui.contentassist.antlr.internal.InternalFXMLDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementDefinitionAccess().getAlternatives(), "rule__ElementDefinition__Alternatives");
					put(grammarAccess.getContainerElementDefinitionAccess().getAlternatives(), "rule__ContainerElementDefinition__Alternatives");
					put(grammarAccess.getContentAccess().getAlternatives(), "rule__Content__Alternatives");
					put(grammarAccess.getFXMLAccess().getGroup(), "rule__FXML__Group__0");
					put(grammarAccess.getXMLDecAccess().getGroup(), "rule__XMLDec__Group__0");
					put(grammarAccess.getProcessingInstructionAccess().getGroup(), "rule__ProcessingInstruction__Group__0");
					put(grammarAccess.getContainerElementDefinitionAccess().getGroup_0(), "rule__ContainerElementDefinition__Group_0__0");
					put(grammarAccess.getContainerElementDefinitionAccess().getGroup_0_1(), "rule__ContainerElementDefinition__Group_0_1__0");
					put(grammarAccess.getContainerElementDefinitionAccess().getGroup_0_7(), "rule__ContainerElementDefinition__Group_0_7__0");
					put(grammarAccess.getContainerElementDefinitionAccess().getGroup_1(), "rule__ContainerElementDefinition__Group_1__0");
					put(grammarAccess.getContainerElementDefinitionAccess().getGroup_1_1(), "rule__ContainerElementDefinition__Group_1_1__0");
					put(grammarAccess.getContainerElementDefinitionAccess().getGroup_1_7(), "rule__ContainerElementDefinition__Group_1_7__0");
					put(grammarAccess.getEmptyElementDefinitionAccess().getGroup(), "rule__EmptyElementDefinition__Group__0");
					put(grammarAccess.getEmptyElementDefinitionAccess().getGroup_1(), "rule__EmptyElementDefinition__Group_1__0");
					put(grammarAccess.getAttributePropertyDefinitionAccess().getGroup(), "rule__AttributePropertyDefinition__Group__0");
					put(grammarAccess.getAttributePropertyDefinitionAccess().getGroup_0(), "rule__AttributePropertyDefinition__Group_0__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup(), "rule__QualifiedNameWithWildCard__Group__0");
					put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup_1(), "rule__QualifiedNameWithWildCard__Group_1__0");
					put(grammarAccess.getFXMLAccess().getXmlDecAssignment_0(), "rule__FXML__XmlDecAssignment_0");
					put(grammarAccess.getFXMLAccess().getProcessingInstructionsAssignment_1(), "rule__FXML__ProcessingInstructionsAssignment_1");
					put(grammarAccess.getFXMLAccess().getRootElementAssignment_2(), "rule__FXML__RootElementAssignment_2");
					put(grammarAccess.getXMLDecAccess().getPropsAssignment_1(), "rule__XMLDec__PropsAssignment_1");
					put(grammarAccess.getProcessingInstructionAccess().getTypeAssignment_1(), "rule__ProcessingInstruction__TypeAssignment_1");
					put(grammarAccess.getProcessingInstructionAccess().getImportedNamespaceAssignment_2(), "rule__ProcessingInstruction__ImportedNamespaceAssignment_2");
					put(grammarAccess.getContainerElementDefinitionAccess().getNamespaceAssignment_0_1_0(), "rule__ContainerElementDefinition__NamespaceAssignment_0_1_0");
					put(grammarAccess.getContainerElementDefinitionAccess().getNameAssignment_0_2(), "rule__ContainerElementDefinition__NameAssignment_0_2");
					put(grammarAccess.getContainerElementDefinitionAccess().getPropertiesAssignment_0_3(), "rule__ContainerElementDefinition__PropertiesAssignment_0_3");
					put(grammarAccess.getContainerElementDefinitionAccess().getChildrenAssignment_0_5(), "rule__ContainerElementDefinition__ChildrenAssignment_0_5");
					put(grammarAccess.getContainerElementDefinitionAccess().getEndnamespaceAssignment_0_7_0(), "rule__ContainerElementDefinition__EndnamespaceAssignment_0_7_0");
					put(grammarAccess.getContainerElementDefinitionAccess().getEndnameAssignment_0_8(), "rule__ContainerElementDefinition__EndnameAssignment_0_8");
					put(grammarAccess.getContainerElementDefinitionAccess().getNamespaceAssignment_1_1_0(), "rule__ContainerElementDefinition__NamespaceAssignment_1_1_0");
					put(grammarAccess.getContainerElementDefinitionAccess().getNameAssignment_1_2(), "rule__ContainerElementDefinition__NameAssignment_1_2");
					put(grammarAccess.getContainerElementDefinitionAccess().getPropertiesAssignment_1_3(), "rule__ContainerElementDefinition__PropertiesAssignment_1_3");
					put(grammarAccess.getContainerElementDefinitionAccess().getContentAssignment_1_5(), "rule__ContainerElementDefinition__ContentAssignment_1_5");
					put(grammarAccess.getContainerElementDefinitionAccess().getEndnamespaceAssignment_1_7_0(), "rule__ContainerElementDefinition__EndnamespaceAssignment_1_7_0");
					put(grammarAccess.getContainerElementDefinitionAccess().getEndnameAssignment_1_8(), "rule__ContainerElementDefinition__EndnameAssignment_1_8");
					put(grammarAccess.getEmptyElementDefinitionAccess().getNamespaceAssignment_1_0(), "rule__EmptyElementDefinition__NamespaceAssignment_1_0");
					put(grammarAccess.getEmptyElementDefinitionAccess().getNameAssignment_2(), "rule__EmptyElementDefinition__NameAssignment_2");
					put(grammarAccess.getEmptyElementDefinitionAccess().getPropsAssignment_3(), "rule__EmptyElementDefinition__PropsAssignment_3");
					put(grammarAccess.getAttributePropertyDefinitionAccess().getNamespaceAssignment_0_0(), "rule__AttributePropertyDefinition__NamespaceAssignment_0_0");
					put(grammarAccess.getAttributePropertyDefinitionAccess().getNameAssignment_1(), "rule__AttributePropertyDefinition__NameAssignment_1");
					put(grammarAccess.getAttributePropertyDefinitionAccess().getValueAssignment_3(), "rule__AttributePropertyDefinition__ValueAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			at.bestsolution.efxclipse.tooling.fxmlx.ui.contentassist.antlr.internal.InternalFXMLDslParser typedParser = (at.bestsolution.efxclipse.tooling.fxmlx.ui.contentassist.antlr.internal.InternalFXMLDslParser) parser;
			typedParser.entryRuleFXML();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_ML_COMMENT", "RULE_WS" };
	}
	
	public FXMLDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(FXMLDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
