package at.bestsolution.efxclipse.tooling.pde.ui.templates.tycho;

import at.bestsolution.efxclipse.tooling.pde.ui.templates.tycho.Repository;
import at.bestsolution.efxclipse.tooling.pde.ui.templates.tycho.RootPomData;
import at.bestsolution.efxclipse.tooling.rrobot.model.task.DynamicFile;
import at.bestsolution.efxclipse.tooling.rrobot.model.task.Generator;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class RootPomGenerator implements Generator<DynamicFile> {
  public InputStream generate(final DynamicFile file, final Map<String,Object> data) {
    Object _get = data.get("BundleProject_projectName");
    final String projectName = ((String) _get);
    Object _get_1 = data.get("BundleProject_productName");
    final String productName = ((String) _get_1);
    Object _get_2 = data.get("BundleProject_bundleId");
    final String bundleId = ((String) _get_2);
    Object _get_3 = data.get("BundleProject_bundleVersion");
    final String bundleVersion = ((String) _get_3);
    ArrayList<String> _arrayList = new ArrayList<String>();
    final ArrayList<String> modules = _arrayList;
    String _plus = ("../" + projectName);
    modules.add(_plus);
    String _plus_1 = ("../" + projectName);
    String _plus_2 = (_plus_1 + ".feature");
    modules.add(_plus_2);
    String _plus_3 = ("../" + projectName);
    String _plus_4 = (_plus_3 + ".product");
    modules.add(_plus_4);
    String _plus_5 = ("../" + projectName);
    String _plus_6 = (_plus_5 + ".jemmy");
    modules.add(_plus_6);
    ArrayList<Repository> _arrayList_1 = new ArrayList<Repository>();
    final ArrayList<Repository> repos = _arrayList_1;
    Repository _repository = new Repository("juno", "http://download.eclipse.org/releases/juno");
    repos.add(_repository);
    Repository _repository_1 = new Repository("efxclipse-repo", "http://www.efxclipse.org/p2-repos/nightly/site/");
    repos.add(_repository_1);
    String _plus_7 = (productName + " - releng");
    String _pomGroupId = this.toPomGroupId(bundleId);
    String _plus_8 = (bundleId + ".releng");
    String _pomVersion = this.toPomVersion(bundleVersion);
    RootPomData _rootPomData = new RootPomData(_plus_7, _pomGroupId, _plus_8, 
      null, null, null, null, _pomVersion, "0.16.0", "4.8.1", "1.8.4", "4.2", "0.1.1", "2.2.0-SNAPSHOT", modules, repos);
    final RootPomData pomdata = _rootPomData;
    CharSequence _generate = this.generate(pomdata);
    String _string = _generate.toString();
    byte[] _bytes = _string.getBytes();
    ByteArrayInputStream _byteArrayInputStream = new ByteArrayInputStream(_bytes);
    return _byteArrayInputStream;
  }
  
  public String toPomGroupId(final String bundleId) {
    int _indexOf = bundleId.indexOf(".");
    int _minus = (-1);
    boolean _notEquals = (_indexOf != _minus);
    if (_notEquals) {
      int _lastIndexOf = bundleId.lastIndexOf(".");
      return bundleId.substring(0, _lastIndexOf);
    }
    return bundleId;
  }
  
  public String toPomVersion(final String version) {
    return version.replace(".qualifier", "-SNAPSHOT");
  }
  
  public CharSequence generate(final RootPomData data) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<project");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<modelVersion>4.0.0</modelVersion>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<name>");
    String _description = data.getDescription();
    _builder.append(_description, "	");
    _builder.append("</name>");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<prerequisites>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<maven>3.0</maven>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</prerequisites>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<groupId>");
    String _groupId = data.getGroupId();
    _builder.append(_groupId, "	");
    _builder.append("</groupId>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<artifactId>");
    String _artifactId = data.getArtifactId();
    _builder.append(_artifactId, "	");
    _builder.append("</artifactId>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<version>");
    String _version = data.getVersion();
    _builder.append(_version, "	");
    _builder.append("</version>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<packaging>pom</packaging>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<properties>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<tycho-version>");
    String _tychoVersion = data.getTychoVersion();
    _builder.append(_tychoVersion, "		");
    _builder.append("</tycho-version>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<junit-version>");
    String _junitVersion = data.getJunitVersion();
    _builder.append(_junitVersion, "		");
    _builder.append("</junit-version>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<mockito-version>");
    String _mockitoVersion = data.getMockitoVersion();
    _builder.append(_mockitoVersion, "		");
    _builder.append("</mockito-version>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<platform-version>");
    String _platformVersion = data.getPlatformVersion();
    _builder.append(_platformVersion, "		");
    _builder.append("</platform-version>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<efx-version>");
    String _efxVersion = data.getEfxVersion();
    _builder.append(_efxVersion, "		");
    _builder.append("</efx-version>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</properties>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<modules>");
    _builder.newLine();
    {
      List<String> _modulePaths = data.getModulePaths();
      for(final String m : _modulePaths) {
        _builder.append("\t\t");
        _builder.append("<module>");
        _builder.append(m, "		");
        _builder.append("</module>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("</modules>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<repositories>");
    _builder.newLine();
    {
      List<Repository> _repositories = data.getRepositories();
      for(final Repository r : _repositories) {
        _builder.append("\t\t");
        _builder.append("<repository>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<id>");
        String _id = r.getId();
        _builder.append(_id, "			");
        _builder.append("</id>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<layout>p2</layout>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<url>");
        String _url = r.getUrl();
        _builder.append(_url, "			");
        _builder.append("</url>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("</repository>");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</repositories>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<pluginRepositories>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<pluginRepository>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<id>tycho</id>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<url>http://repository.sonatype.org/content/groups/sonatype-public-grid</url>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<snapshots>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<enabled>true</enabled>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</snapshots>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</pluginRepository>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</pluginRepositories>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<build>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<!-- build plugins -->");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<plugins>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<plugin>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<groupId>org.eclipse.tycho</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<artifactId>tycho-maven-plugin</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<version>${tycho-version}</version>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<extensions>true</extensions>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</plugin>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<plugin>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<groupId>org.eclipse.tycho</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<artifactId>target-platform-configuration</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<version>${tycho-version}</version>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<resolver>p2</resolver>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<pomDependencies>consider</pomDependencies>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<environments>");
    _builder.newLine();
    {
      boolean _isEnvLinux32 = data.isEnvLinux32();
      if (_isEnvLinux32) {
        _builder.append("\t\t\t\t\t\t");
        _builder.append("<environment>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<os>linux</os>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<ws>gtk</ws>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<arch>x86</arch>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("</environment>");
        _builder.newLine();
      }
    }
    {
      boolean _isEnvLinux64 = data.isEnvLinux64();
      if (_isEnvLinux64) {
        _builder.append("\t\t\t\t\t\t");
        _builder.append("<environment>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<os>linux</os>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<ws>gtk</ws>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<arch>x86_64</arch>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("</environment>");
        _builder.newLine();
      }
    }
    {
      boolean _isEnvWin32 = data.isEnvWin32();
      if (_isEnvWin32) {
        _builder.append("\t\t\t\t\t\t");
        _builder.append("<environment>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<os>win32</os>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<ws>win32</ws>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<arch>x86</arch>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("</environment>");
        _builder.newLine();
      }
    }
    {
      boolean _isEnvWin64 = data.isEnvWin64();
      if (_isEnvWin64) {
        _builder.append("\t\t\t\t\t\t");
        _builder.append("<environment>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<os>win32</os>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<ws>win32</ws>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<arch>x86_64</arch>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("</environment>");
        _builder.newLine();
      }
    }
    {
      boolean _isEnvMacOS = data.isEnvMacOS();
      if (_isEnvMacOS) {
        _builder.append("\t\t\t\t\t\t");
        _builder.append("<environment>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<os>macosx</os>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<ws>cocoa</ws>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<arch>x86_64</arch>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("</environment>");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t\t\t");
    _builder.append("</environments>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("</configuration>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</plugin>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</plugins>");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<!-- defines the default settings for the used plugins -->");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<pluginManagement>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<plugins>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<plugin>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<groupId>org.eclipse.tycho</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<artifactId>tycho-compiler-plugin</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<version>${tycho-version}</version>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<encoding>UTF-8</encoding>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<source>1.7</source>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<target>1.7</target>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<extraClasspathElements>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<extraClasspathElement>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<groupId>javafx</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<artifactId>javafx.mvn</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<version>");
    String _javaFXArtifactVersion = data.getJavaFXArtifactVersion();
    _builder.append(_javaFXArtifactVersion, "								");
    _builder.append("</version> ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("</extraClasspathElement>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</extraClasspathElements>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("</configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("</plugin>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<plugin>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<groupId>org.eclipse.tycho</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<artifactId>tycho-source-plugin</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<version>${tycho-version}</version>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<executions>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<execution>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<id>plugin-source</id>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<goals>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<goal>plugin-source</goal>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("</goals>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</execution>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("</executions>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("</plugin>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<plugin>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<groupId>org.eclipse.tycho</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<artifactId>tycho-packaging-plugin</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<version>${tycho-version}</version>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<archiveSite>true</archiveSite>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("</configuration>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</plugin>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</plugins>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</pluginManagement>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</build>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<dependencyManagement>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<dependencies>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<groupId>junit</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<artifactId>junit</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<version>${junit-version}</version>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<scope>test</scope>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</dependency>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</dependencies>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</dependencyManagement>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<dependencies>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<groupId>org.mockito</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<artifactId>mockito-core</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<version>${mockito-version}</version>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</dependency>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<groupId>junit</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<artifactId>junit</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<scope>test</scope>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</dependency>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</dependencies>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</project>");
    return _builder;
  }
}
