/*
* generated by Xtext
*/
grammar InternalSvgPath;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package at.bestsolution.efxclipse.tooling.svgpath.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.bestsolution.efxclipse.tooling.svgpath.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.bestsolution.efxclipse.tooling.svgpath.services.SvgPathGrammarAccess;

}

@parser::members {

 	private SvgPathGrammarAccess grammarAccess;
 	
    public InternalSvgPathParser(TokenStream input, SvgPathGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "svg_path";	
   	}
   	
   	@Override
   	protected SvgPathGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulesvg_path
entryRulesvg_path returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSvg_pathRule()); }
	 iv_rulesvg_path=rulesvg_path 
	 { $current=$iv_rulesvg_path.current; } 
	 EOF 
;

// Rule svg_path
rulesvg_path returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSvg_pathAccess().getMoveto_drawto_command_groupsMoveto_drawto_command_groupsParserRuleCall_0()); 
	    }
		lv_moveto_drawto_command_groups_0_0=rulemoveto_drawto_command_groups		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSvg_pathRule());
	        }
       		set(
       			$current, 
       			"moveto_drawto_command_groups",
        		lv_moveto_drawto_command_groups_0_0, 
        		"moveto_drawto_command_groups");
	        afterParserOrEnumRuleCall();
	    }

)
)?
;





// Entry rule entryRulemoveto_drawto_command_groups
entryRulemoveto_drawto_command_groups returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMoveto_drawto_command_groupsRule()); }
	 iv_rulemoveto_drawto_command_groups=rulemoveto_drawto_command_groups 
	 { $current=$iv_rulemoveto_drawto_command_groups.current; } 
	 EOF 
;

// Rule moveto_drawto_command_groups
rulemoveto_drawto_command_groups returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getMoveto_drawto_command_groupsAccess().getCommandsMoveto_drawto_command_groupParserRuleCall_0()); 
	    }
		lv_commands_0_0=rulemoveto_drawto_command_group		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMoveto_drawto_command_groupsRule());
	        }
       		add(
       			$current, 
       			"commands",
        		lv_commands_0_0, 
        		"moveto_drawto_command_group");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulemoveto_drawto_command_group
entryRulemoveto_drawto_command_group returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMoveto_drawto_command_groupRule()); }
	 iv_rulemoveto_drawto_command_group=rulemoveto_drawto_command_group 
	 { $current=$iv_rulemoveto_drawto_command_group.current; } 
	 EOF 
;

// Rule moveto_drawto_command_group
rulemoveto_drawto_command_group returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMoveto_drawto_command_groupAccess().getMovetoMovetoParserRuleCall_0_0()); 
	    }
		lv_moveto_0_0=rulemoveto		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMoveto_drawto_command_groupRule());
	        }
       		set(
       			$current, 
       			"moveto",
        		lv_moveto_0_0, 
        		"moveto");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMoveto_drawto_command_groupAccess().getDrawto_commandsDrawto_commandsParserRuleCall_1_0()); 
	    }
		lv_drawto_commands_1_0=ruledrawto_commands		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMoveto_drawto_command_groupRule());
	        }
       		set(
       			$current, 
       			"drawto_commands",
        		lv_drawto_commands_1_0, 
        		"drawto_commands");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRulemoveto
entryRulemoveto returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMovetoRule()); }
	 iv_rulemoveto=rulemoveto 
	 { $current=$iv_rulemoveto.current; } 
	 EOF 
;

// Rule moveto
rulemoveto returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='M' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMovetoAccess().getMKeyword_0_0());
    }

    |	otherlv_1='m' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMovetoAccess().getMKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMovetoAccess().getPointCoordinate_pairParserRuleCall_1_0()); 
	    }
		lv_point_2_0=rulecoordinate_pair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMovetoRule());
	        }
       		set(
       			$current, 
       			"point",
        		lv_point_2_0, 
        		"coordinate_pair");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getMovetoAccess().getCommaParserRuleCall_2()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMovetoAccess().getLineto_argument_sequenceLineto_argument_sequenceParserRuleCall_3_0()); 
	    }
		lv_lineto_argument_sequence_4_0=rulelineto_argument_sequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMovetoRule());
	        }
       		set(
       			$current, 
       			"lineto_argument_sequence",
        		lv_lineto_argument_sequence_4_0, 
        		"lineto_argument_sequence");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulelineto_argument_sequence
entryRulelineto_argument_sequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLineto_argument_sequenceRule()); }
	 iv_rulelineto_argument_sequence=rulelineto_argument_sequence 
	 { $current=$iv_rulelineto_argument_sequence.current; } 
	 EOF 
;

// Rule lineto_argument_sequence
rulelineto_argument_sequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLineto_argument_sequenceAccess().getPairsCoordinate_pairParserRuleCall_0_0()); 
	    }
		lv_pairs_0_0=rulecoordinate_pair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLineto_argument_sequenceRule());
	        }
       		add(
       			$current, 
       			"pairs",
        		lv_pairs_0_0, 
        		"coordinate_pair");
	        afterParserOrEnumRuleCall();
	    }

)
)((
    { 
        newCompositeNode(grammarAccess.getLineto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLineto_argument_sequenceAccess().getPairsCoordinate_pairParserRuleCall_1_1_0()); 
	    }
		lv_pairs_2_0=rulecoordinate_pair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLineto_argument_sequenceRule());
	        }
       		add(
       			$current, 
       			"pairs",
        		lv_pairs_2_0, 
        		"coordinate_pair");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuledrawto_commands
entryRuledrawto_commands returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDrawto_commandsRule()); }
	 iv_ruledrawto_commands=ruledrawto_commands 
	 { $current=$iv_ruledrawto_commands.current; } 
	 EOF 
;

// Rule drawto_commands
ruledrawto_commands returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDrawto_commandsAccess().getDrawto_commandsDrawto_commandParserRuleCall_0()); 
	    }
		lv_drawto_commands_0_0=ruledrawto_command		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDrawto_commandsRule());
	        }
       		add(
       			$current, 
       			"drawto_commands",
        		lv_drawto_commands_0_0, 
        		"drawto_command");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuledrawto_command
entryRuledrawto_command returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDrawto_commandRule()); }
	 iv_ruledrawto_command=ruledrawto_command 
	 { $current=$iv_ruledrawto_command.current; } 
	 EOF 
;

// Rule drawto_command
ruledrawto_command returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDrawto_commandAccess().getClosepathParserRuleCall_0()); 
    }
    this_closepath_0=ruleclosepath
    { 
        $current = $this_closepath_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDrawto_commandAccess().getLinetoParserRuleCall_1()); 
    }
    this_lineto_1=rulelineto
    { 
        $current = $this_lineto_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDrawto_commandAccess().getHorizontal_linetoParserRuleCall_2()); 
    }
    this_horizontal_lineto_2=rulehorizontal_lineto
    { 
        $current = $this_horizontal_lineto_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDrawto_commandAccess().getVertical_linetoParserRuleCall_3()); 
    }
    this_vertical_lineto_3=rulevertical_lineto
    { 
        $current = $this_vertical_lineto_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDrawto_commandAccess().getCurvetoParserRuleCall_4()); 
    }
    this_curveto_4=rulecurveto
    { 
        $current = $this_curveto_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDrawto_commandAccess().getSmooth_curvetoParserRuleCall_5()); 
    }
    this_smooth_curveto_5=rulesmooth_curveto
    { 
        $current = $this_smooth_curveto_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDrawto_commandAccess().getQuadratic_bezier_curvetoParserRuleCall_6()); 
    }
    this_quadratic_bezier_curveto_6=rulequadratic_bezier_curveto
    { 
        $current = $this_quadratic_bezier_curveto_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDrawto_commandAccess().getSmooth_quadratic_bezier_curvetoParserRuleCall_7()); 
    }
    this_smooth_quadratic_bezier_curveto_7=rulesmooth_quadratic_bezier_curveto
    { 
        $current = $this_smooth_quadratic_bezier_curveto_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDrawto_commandAccess().getElliptical_arcParserRuleCall_8()); 
    }
    this_elliptical_arc_8=ruleelliptical_arc
    { 
        $current = $this_elliptical_arc_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleclosepath
entryRuleclosepath returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClosepathRule()); }
	 iv_ruleclosepath=ruleclosepath 
	 { $current=$iv_ruleclosepath.current; } 
	 EOF 
;

// Rule closepath
ruleclosepath returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getClosepathAccess().getClosepathAction_0(),
            $current);
    }
)(	otherlv_1='Z' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClosepathAccess().getZKeyword_1_0());
    }

    |	otherlv_2='z' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClosepathAccess().getZKeyword_1_1());
    }
))
;





// Entry rule entryRulelineto
entryRulelineto returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinetoRule()); }
	 iv_rulelineto=rulelineto 
	 { $current=$iv_rulelineto.current; } 
	 EOF 
;

// Rule lineto
rulelineto returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='L' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLinetoAccess().getLKeyword_0_0());
    }

    |	otherlv_1='l' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLinetoAccess().getLKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLinetoAccess().getLineto_argument_sequenceLineto_argument_sequenceParserRuleCall_1_0()); 
	    }
		lv_lineto_argument_sequence_2_0=rulelineto_argument_sequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinetoRule());
	        }
       		set(
       			$current, 
       			"lineto_argument_sequence",
        		lv_lineto_argument_sequence_2_0, 
        		"lineto_argument_sequence");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulehorizontal_lineto
entryRulehorizontal_lineto returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHorizontal_linetoRule()); }
	 iv_rulehorizontal_lineto=rulehorizontal_lineto 
	 { $current=$iv_rulehorizontal_lineto.current; } 
	 EOF 
;

// Rule horizontal_lineto
rulehorizontal_lineto returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='H' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getHorizontal_linetoAccess().getHKeyword_0_0());
    }

    |	otherlv_1='h' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHorizontal_linetoAccess().getHKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getHorizontal_linetoAccess().getHorizontal_lineto_argument_sequenceHorizontal_lineto_argument_sequenceParserRuleCall_1_0()); 
	    }
		lv_horizontal_lineto_argument_sequence_2_0=rulehorizontal_lineto_argument_sequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHorizontal_linetoRule());
	        }
       		set(
       			$current, 
       			"horizontal_lineto_argument_sequence",
        		lv_horizontal_lineto_argument_sequence_2_0, 
        		"horizontal_lineto_argument_sequence");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulehorizontal_lineto_argument_sequence
entryRulehorizontal_lineto_argument_sequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHorizontal_lineto_argument_sequenceRule()); }
	 iv_rulehorizontal_lineto_argument_sequence=rulehorizontal_lineto_argument_sequence 
	 { $current=$iv_rulehorizontal_lineto_argument_sequence.current; } 
	 EOF 
;

// Rule horizontal_lineto_argument_sequence
rulehorizontal_lineto_argument_sequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getCoordinatesCoordinateParserRuleCall_0_0()); 
	    }
		lv_coordinates_0_0=rulecoordinate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHorizontal_lineto_argument_sequenceRule());
	        }
       		add(
       			$current, 
       			"coordinates",
        		lv_coordinates_0_0, 
        		"coordinate");
	        afterParserOrEnumRuleCall();
	    }

)
)((
    { 
        newCompositeNode(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getHorizontal_lineto_argument_sequenceAccess().getCoordinatesCoordinateParserRuleCall_1_1_0()); 
	    }
		lv_coordinates_2_0=rulecoordinate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHorizontal_lineto_argument_sequenceRule());
	        }
       		add(
       			$current, 
       			"coordinates",
        		lv_coordinates_2_0, 
        		"coordinate");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulevertical_lineto
entryRulevertical_lineto returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVertical_linetoRule()); }
	 iv_rulevertical_lineto=rulevertical_lineto 
	 { $current=$iv_rulevertical_lineto.current; } 
	 EOF 
;

// Rule vertical_lineto
rulevertical_lineto returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='V' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVertical_linetoAccess().getVKeyword_0_0());
    }

    |	otherlv_1='v' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVertical_linetoAccess().getVKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVertical_linetoAccess().getVertical_lineto_argument_sequenceVertical_lineto_argument_sequenceParserRuleCall_1_0()); 
	    }
		lv_vertical_lineto_argument_sequence_2_0=rulevertical_lineto_argument_sequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVertical_linetoRule());
	        }
       		set(
       			$current, 
       			"vertical_lineto_argument_sequence",
        		lv_vertical_lineto_argument_sequence_2_0, 
        		"vertical_lineto_argument_sequence");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulevertical_lineto_argument_sequence
entryRulevertical_lineto_argument_sequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVertical_lineto_argument_sequenceRule()); }
	 iv_rulevertical_lineto_argument_sequence=rulevertical_lineto_argument_sequence 
	 { $current=$iv_rulevertical_lineto_argument_sequence.current; } 
	 EOF 
;

// Rule vertical_lineto_argument_sequence
rulevertical_lineto_argument_sequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVertical_lineto_argument_sequenceAccess().getCoordinatesCoordinateParserRuleCall_0_0()); 
	    }
		lv_coordinates_0_0=rulecoordinate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVertical_lineto_argument_sequenceRule());
	        }
       		add(
       			$current, 
       			"coordinates",
        		lv_coordinates_0_0, 
        		"coordinate");
	        afterParserOrEnumRuleCall();
	    }

)
)((
    { 
        newCompositeNode(grammarAccess.getVertical_lineto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getVertical_lineto_argument_sequenceAccess().getCoordinatesCoordinateParserRuleCall_1_1_0()); 
	    }
		lv_coordinates_2_0=rulecoordinate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVertical_lineto_argument_sequenceRule());
	        }
       		add(
       			$current, 
       			"coordinates",
        		lv_coordinates_2_0, 
        		"coordinate");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulecurveto
entryRulecurveto returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCurvetoRule()); }
	 iv_rulecurveto=rulecurveto 
	 { $current=$iv_rulecurveto.current; } 
	 EOF 
;

// Rule curveto
rulecurveto returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='C' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCurvetoAccess().getCKeyword_0_0());
    }

    |	otherlv_1='c' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCurvetoAccess().getCKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCurvetoAccess().getCurveto_argument_sequenceCurveto_argument_sequenceParserRuleCall_1_0()); 
	    }
		lv_curveto_argument_sequence_2_0=rulecurveto_argument_sequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCurvetoRule());
	        }
       		set(
       			$current, 
       			"curveto_argument_sequence",
        		lv_curveto_argument_sequence_2_0, 
        		"curveto_argument_sequence");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulecurveto_argument_sequence
entryRulecurveto_argument_sequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCurveto_argument_sequenceRule()); }
	 iv_rulecurveto_argument_sequence=rulecurveto_argument_sequence 
	 { $current=$iv_rulecurveto_argument_sequence.current; } 
	 EOF 
;

// Rule curveto_argument_sequence
rulecurveto_argument_sequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCurveto_argument_sequenceAccess().getCurveto_argumentsCurveto_argumentParserRuleCall_0_0()); 
	    }
		lv_curveto_arguments_0_0=rulecurveto_argument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCurveto_argument_sequenceRule());
	        }
       		add(
       			$current, 
       			"curveto_arguments",
        		lv_curveto_arguments_0_0, 
        		"curveto_argument");
	        afterParserOrEnumRuleCall();
	    }

)
)((
    { 
        newCompositeNode(grammarAccess.getCurveto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCurveto_argument_sequenceAccess().getCurveto_argumentsCurveto_argumentParserRuleCall_1_1_0()); 
	    }
		lv_curveto_arguments_2_0=rulecurveto_argument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCurveto_argument_sequenceRule());
	        }
       		add(
       			$current, 
       			"curveto_arguments",
        		lv_curveto_arguments_2_0, 
        		"curveto_argument");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulecurveto_argument
entryRulecurveto_argument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCurveto_argumentRule()); }
	 iv_rulecurveto_argument=rulecurveto_argument 
	 { $current=$iv_rulecurveto_argument.current; } 
	 EOF 
;

// Rule curveto_argument
rulecurveto_argument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCurveto_argumentAccess().getC1Coordinate_pairParserRuleCall_0_0()); 
	    }
		lv_c1_0_0=rulecoordinate_pair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCurveto_argumentRule());
	        }
       		set(
       			$current, 
       			"c1",
        		lv_c1_0_0, 
        		"coordinate_pair");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getCurveto_argumentAccess().getCommaParserRuleCall_1()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCurveto_argumentAccess().getC2Coordinate_pairParserRuleCall_2_0()); 
	    }
		lv_c2_2_0=rulecoordinate_pair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCurveto_argumentRule());
	        }
       		set(
       			$current, 
       			"c2",
        		lv_c2_2_0, 
        		"coordinate_pair");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getCurveto_argumentAccess().getCommaParserRuleCall_3()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCurveto_argumentAccess().getC3Coordinate_pairParserRuleCall_4_0()); 
	    }
		lv_c3_4_0=rulecoordinate_pair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCurveto_argumentRule());
	        }
       		set(
       			$current, 
       			"c3",
        		lv_c3_4_0, 
        		"coordinate_pair");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulesmooth_curveto
entryRulesmooth_curveto returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSmooth_curvetoRule()); }
	 iv_rulesmooth_curveto=rulesmooth_curveto 
	 { $current=$iv_rulesmooth_curveto.current; } 
	 EOF 
;

// Rule smooth_curveto
rulesmooth_curveto returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='S' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSmooth_curvetoAccess().getSKeyword_0_0());
    }

    |	otherlv_1='s' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSmooth_curvetoAccess().getSKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSmooth_curvetoAccess().getSmooth_curveto_argument_sequenceSmooth_curveto_argument_sequenceParserRuleCall_1_0()); 
	    }
		lv_smooth_curveto_argument_sequence_2_0=rulesmooth_curveto_argument_sequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSmooth_curvetoRule());
	        }
       		set(
       			$current, 
       			"smooth_curveto_argument_sequence",
        		lv_smooth_curveto_argument_sequence_2_0, 
        		"smooth_curveto_argument_sequence");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulesmooth_curveto_argument_sequence
entryRulesmooth_curveto_argument_sequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSmooth_curveto_argument_sequenceRule()); }
	 iv_rulesmooth_curveto_argument_sequence=rulesmooth_curveto_argument_sequence 
	 { $current=$iv_rulesmooth_curveto_argument_sequence.current; } 
	 EOF 
;

// Rule smooth_curveto_argument_sequence
rulesmooth_curveto_argument_sequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getSmooth_curveto_argumentsSmooth_curveto_argumentParserRuleCall_0_0()); 
	    }
		lv_smooth_curveto_arguments_0_0=rulesmooth_curveto_argument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSmooth_curveto_argument_sequenceRule());
	        }
       		add(
       			$current, 
       			"smooth_curveto_arguments",
        		lv_smooth_curveto_arguments_0_0, 
        		"smooth_curveto_argument");
	        afterParserOrEnumRuleCall();
	    }

)
)((
    { 
        newCompositeNode(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSmooth_curveto_argument_sequenceAccess().getSmooth_curveto_argumentsSmooth_curveto_argumentParserRuleCall_1_1_0()); 
	    }
		lv_smooth_curveto_arguments_2_0=rulesmooth_curveto_argument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSmooth_curveto_argument_sequenceRule());
	        }
       		add(
       			$current, 
       			"smooth_curveto_arguments",
        		lv_smooth_curveto_arguments_2_0, 
        		"smooth_curveto_argument");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulesmooth_curveto_argument
entryRulesmooth_curveto_argument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSmooth_curveto_argumentRule()); }
	 iv_rulesmooth_curveto_argument=rulesmooth_curveto_argument 
	 { $current=$iv_rulesmooth_curveto_argument.current; } 
	 EOF 
;

// Rule smooth_curveto_argument
rulesmooth_curveto_argument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSmooth_curveto_argumentAccess().getC1Coordinate_pairParserRuleCall_0_0()); 
	    }
		lv_c1_0_0=rulecoordinate_pair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSmooth_curveto_argumentRule());
	        }
       		set(
       			$current, 
       			"c1",
        		lv_c1_0_0, 
        		"coordinate_pair");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getSmooth_curveto_argumentAccess().getCommaParserRuleCall_1()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSmooth_curveto_argumentAccess().getC2Coordinate_pairParserRuleCall_2_0()); 
	    }
		lv_c2_2_0=rulecoordinate_pair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSmooth_curveto_argumentRule());
	        }
       		set(
       			$current, 
       			"c2",
        		lv_c2_2_0, 
        		"coordinate_pair");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulequadratic_bezier_curveto
entryRulequadratic_bezier_curveto returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuadratic_bezier_curvetoRule()); }
	 iv_rulequadratic_bezier_curveto=rulequadratic_bezier_curveto 
	 { $current=$iv_rulequadratic_bezier_curveto.current; } 
	 EOF 
;

// Rule quadratic_bezier_curveto
rulequadratic_bezier_curveto returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='Q' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQuadratic_bezier_curvetoAccess().getQKeyword_0_0());
    }

    |	otherlv_1='q' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQuadratic_bezier_curvetoAccess().getQKeyword_0_1());
    }
)
    { 
        newCompositeNode(grammarAccess.getQuadratic_bezier_curvetoAccess().getQuadratic_bezier_curveto_argument_sequenceParserRuleCall_1()); 
    }
    this_quadratic_bezier_curveto_argument_sequence_2=rulequadratic_bezier_curveto_argument_sequence
    { 
        $current = $this_quadratic_bezier_curveto_argument_sequence_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulequadratic_bezier_curveto_argument_sequence
entryRulequadratic_bezier_curveto_argument_sequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceRule()); }
	 iv_rulequadratic_bezier_curveto_argument_sequence=rulequadratic_bezier_curveto_argument_sequence 
	 { $current=$iv_rulequadratic_bezier_curveto_argument_sequence.current; } 
	 EOF 
;

// Rule quadratic_bezier_curveto_argument_sequence
rulequadratic_bezier_curveto_argument_sequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getQuadratic_bezier_curveto_argumentsQuadratic_bezier_curveto_argumentParserRuleCall_0_0()); 
	    }
		lv_quadratic_bezier_curveto_arguments_0_0=rulequadratic_bezier_curveto_argument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceRule());
	        }
       		add(
       			$current, 
       			"quadratic_bezier_curveto_arguments",
        		lv_quadratic_bezier_curveto_arguments_0_0, 
        		"quadratic_bezier_curveto_argument");
	        afterParserOrEnumRuleCall();
	    }

)
)((
    { 
        newCompositeNode(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceAccess().getQuadratic_bezier_curveto_argumentsQuadratic_bezier_curveto_argumentParserRuleCall_1_1_0()); 
	    }
		lv_quadratic_bezier_curveto_arguments_2_0=rulequadratic_bezier_curveto_argument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuadratic_bezier_curveto_argument_sequenceRule());
	        }
       		add(
       			$current, 
       			"quadratic_bezier_curveto_arguments",
        		lv_quadratic_bezier_curveto_arguments_2_0, 
        		"quadratic_bezier_curveto_argument");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulequadratic_bezier_curveto_argument
entryRulequadratic_bezier_curveto_argument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuadratic_bezier_curveto_argumentRule()); }
	 iv_rulequadratic_bezier_curveto_argument=rulequadratic_bezier_curveto_argument 
	 { $current=$iv_rulequadratic_bezier_curveto_argument.current; } 
	 EOF 
;

// Rule quadratic_bezier_curveto_argument
rulequadratic_bezier_curveto_argument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQuadratic_bezier_curveto_argumentAccess().getC1Coordinate_pairParserRuleCall_0_0()); 
	    }
		lv_c1_0_0=rulecoordinate_pair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuadratic_bezier_curveto_argumentRule());
	        }
       		set(
       			$current, 
       			"c1",
        		lv_c1_0_0, 
        		"coordinate_pair");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getQuadratic_bezier_curveto_argumentAccess().getCommaParserRuleCall_1()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getQuadratic_bezier_curveto_argumentAccess().getC2Coordinate_pairParserRuleCall_2_0()); 
	    }
		lv_c2_2_0=rulecoordinate_pair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuadratic_bezier_curveto_argumentRule());
	        }
       		set(
       			$current, 
       			"c2",
        		lv_c2_2_0, 
        		"coordinate_pair");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulesmooth_quadratic_bezier_curveto
entryRulesmooth_quadratic_bezier_curveto returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSmooth_quadratic_bezier_curvetoRule()); }
	 iv_rulesmooth_quadratic_bezier_curveto=rulesmooth_quadratic_bezier_curveto 
	 { $current=$iv_rulesmooth_quadratic_bezier_curveto.current; } 
	 EOF 
;

// Rule smooth_quadratic_bezier_curveto
rulesmooth_quadratic_bezier_curveto returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='T' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSmooth_quadratic_bezier_curvetoAccess().getTKeyword_0_0());
    }

    |	otherlv_1='t' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSmooth_quadratic_bezier_curvetoAccess().getTKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSmooth_quadratic_bezier_curvetoAccess().getSmooth_quadratic_bezier_curveto_argument_sequenceSmooth_quadratic_bezier_curveto_argument_sequenceParserRuleCall_1_0()); 
	    }
		lv_smooth_quadratic_bezier_curveto_argument_sequence_2_0=rulesmooth_quadratic_bezier_curveto_argument_sequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSmooth_quadratic_bezier_curvetoRule());
	        }
       		set(
       			$current, 
       			"smooth_quadratic_bezier_curveto_argument_sequence",
        		lv_smooth_quadratic_bezier_curveto_argument_sequence_2_0, 
        		"smooth_quadratic_bezier_curveto_argument_sequence");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulesmooth_quadratic_bezier_curveto_argument_sequence
entryRulesmooth_quadratic_bezier_curveto_argument_sequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceRule()); }
	 iv_rulesmooth_quadratic_bezier_curveto_argument_sequence=rulesmooth_quadratic_bezier_curveto_argument_sequence 
	 { $current=$iv_rulesmooth_quadratic_bezier_curveto_argument_sequence.current; } 
	 EOF 
;

// Rule smooth_quadratic_bezier_curveto_argument_sequence
rulesmooth_quadratic_bezier_curveto_argument_sequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getCoordinate_pairsCoordinate_pairParserRuleCall_0_0()); 
	    }
		lv_coordinate_pairs_0_0=rulecoordinate_pair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceRule());
	        }
       		add(
       			$current, 
       			"coordinate_pairs",
        		lv_coordinate_pairs_0_0, 
        		"coordinate_pair");
	        afterParserOrEnumRuleCall();
	    }

)
)((
    { 
        newCompositeNode(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getCommaParserRuleCall_1_0()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getCoordinate_pairsCoordinate_pairParserRuleCall_1_1_0()); 
	    }
		lv_coordinate_pairs_2_0=rulecoordinate_pair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSmooth_quadratic_bezier_curveto_argument_sequenceRule());
	        }
       		add(
       			$current, 
       			"coordinate_pairs",
        		lv_coordinate_pairs_2_0, 
        		"coordinate_pair");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleelliptical_arc
entryRuleelliptical_arc returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElliptical_arcRule()); }
	 iv_ruleelliptical_arc=ruleelliptical_arc 
	 { $current=$iv_ruleelliptical_arc.current; } 
	 EOF 
;

// Rule elliptical_arc
ruleelliptical_arc returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='A' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getElliptical_arcAccess().getAKeyword_0_0());
    }

    |	otherlv_1='a' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElliptical_arcAccess().getAKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getElliptical_arcAccess().getElliptical_arc_argument_sequenceElliptical_arc_argument_sequenceParserRuleCall_1_0()); 
	    }
		lv_elliptical_arc_argument_sequence_2_0=ruleelliptical_arc_argument_sequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElliptical_arcRule());
	        }
       		set(
       			$current, 
       			"elliptical_arc_argument_sequence",
        		lv_elliptical_arc_argument_sequence_2_0, 
        		"elliptical_arc_argument_sequence");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleelliptical_arc_argument_sequence
entryRuleelliptical_arc_argument_sequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElliptical_arc_argument_sequenceRule()); }
	 iv_ruleelliptical_arc_argument_sequence=ruleelliptical_arc_argument_sequence 
	 { $current=$iv_ruleelliptical_arc_argument_sequence.current; } 
	 EOF 
;

// Rule elliptical_arc_argument_sequence
ruleelliptical_arc_argument_sequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getElliptical_arc_argument_sequenceAccess().getElliptical_arc_argumentsElliptical_arc_argumentParserRuleCall_0_0()); 
	    }
		lv_elliptical_arc_arguments_0_0=ruleelliptical_arc_argument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElliptical_arc_argument_sequenceRule());
	        }
       		add(
       			$current, 
       			"elliptical_arc_arguments",
        		lv_elliptical_arc_arguments_0_0, 
        		"elliptical_arc_argument");
	        afterParserOrEnumRuleCall();
	    }

)
)((
    { 
        newCompositeNode(grammarAccess.getElliptical_arc_argument_sequenceAccess().getCommaParserRuleCall_1_0()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getElliptical_arc_argument_sequenceAccess().getElliptical_arc_argumentsElliptical_arc_argumentParserRuleCall_1_1_0()); 
	    }
		lv_elliptical_arc_arguments_2_0=ruleelliptical_arc_argument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElliptical_arc_argument_sequenceRule());
	        }
       		add(
       			$current, 
       			"elliptical_arc_arguments",
        		lv_elliptical_arc_arguments_2_0, 
        		"elliptical_arc_argument");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleelliptical_arc_argument
entryRuleelliptical_arc_argument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElliptical_arc_argumentRule()); }
	 iv_ruleelliptical_arc_argument=ruleelliptical_arc_argument 
	 { $current=$iv_ruleelliptical_arc_argument.current; } 
	 EOF 
;

// Rule elliptical_arc_argument
ruleelliptical_arc_argument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getElliptical_arc_argumentAccess().getRxNonnegative_numberParserRuleCall_0_0()); 
	    }
		lv_rx_0_0=rulenonnegative_number		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElliptical_arc_argumentRule());
	        }
       		set(
       			$current, 
       			"rx",
        		lv_rx_0_0, 
        		"nonnegative_number");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getElliptical_arc_argumentAccess().getCommaParserRuleCall_1()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getElliptical_arc_argumentAccess().getRyNonnegative_numberParserRuleCall_2_0()); 
	    }
		lv_ry_2_0=rulenonnegative_number		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElliptical_arc_argumentRule());
	        }
       		set(
       			$current, 
       			"ry",
        		lv_ry_2_0, 
        		"nonnegative_number");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getElliptical_arc_argumentAccess().getCommaParserRuleCall_3()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getElliptical_arc_argumentAccess().getRotationNumberParserRuleCall_4_0()); 
	    }
		lv_rotation_4_0=rulenumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElliptical_arc_argumentRule());
	        }
       		set(
       			$current, 
       			"rotation",
        		lv_rotation_4_0, 
        		"number");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getElliptical_arc_argumentAccess().getCommaParserRuleCall_5()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElliptical_arc_argumentAccess().getLargearcflagFlagParserRuleCall_6_0()); 
	    }
		lv_largearcflag_6_0=ruleflag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElliptical_arc_argumentRule());
	        }
       		set(
       			$current, 
       			"largearcflag",
        		lv_largearcflag_6_0, 
        		"flag");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getElliptical_arc_argumentAccess().getCommaParserRuleCall_7()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getElliptical_arc_argumentAccess().getSweepflagFlagParserRuleCall_8_0()); 
	    }
		lv_sweepflag_8_0=ruleflag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElliptical_arc_argumentRule());
	        }
       		set(
       			$current, 
       			"sweepflag",
        		lv_sweepflag_8_0, 
        		"flag");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getElliptical_arc_argumentAccess().getCommaParserRuleCall_9()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getElliptical_arc_argumentAccess().getCoordinate_pairCoordinate_pairParserRuleCall_10_0()); 
	    }
		lv_coordinate_pair_10_0=rulecoordinate_pair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElliptical_arc_argumentRule());
	        }
       		set(
       			$current, 
       			"coordinate_pair",
        		lv_coordinate_pair_10_0, 
        		"coordinate_pair");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulecoordinate_pair
entryRulecoordinate_pair returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCoordinate_pairRule()); }
	 iv_rulecoordinate_pair=rulecoordinate_pair 
	 { $current=$iv_rulecoordinate_pair.current; } 
	 EOF 
;

// Rule coordinate_pair
rulecoordinate_pair returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCoordinate_pairAccess().getC1CoordinateParserRuleCall_0_0()); 
	    }
		lv_c1_0_0=rulecoordinate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCoordinate_pairRule());
	        }
       		set(
       			$current, 
       			"c1",
        		lv_c1_0_0, 
        		"coordinate");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getCoordinate_pairAccess().getCommaParserRuleCall_1()); 
    }
rulecomma
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCoordinate_pairAccess().getC2CoordinateParserRuleCall_2_0()); 
	    }
		lv_c2_2_0=rulecoordinate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCoordinate_pairRule());
	        }
       		set(
       			$current, 
       			"c2",
        		lv_c2_2_0, 
        		"coordinate");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulecomma
entryRulecomma returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommaRule()); } 
	 iv_rulecomma=rulecomma 
	 { $current=$iv_rulecomma.current.getText(); }  
	 EOF 
;

// Rule comma
rulecomma returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommaAccess().getCommaKeyword()); 
    }

    ;





// Entry rule entryRulecoordinate
entryRulecoordinate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCoordinateRule()); }
	 iv_rulecoordinate=rulecoordinate 
	 { $current=$iv_rulecoordinate.current; } 
	 EOF 
;

// Rule coordinate
rulecoordinate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getCoordinateAccess().getNumberParserRuleCall()); 
    }
    this_number_0=rulenumber
    { 
        $current = $this_number_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulenumber
entryRulenumber returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	 iv_rulenumber=rulenumber 
	 { $current=$iv_rulenumber.current; } 
	 EOF 
;

// Rule number
rulenumber returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNumberAccess().getSignSignParserRuleCall_0_0()); 
	    }
		lv_sign_0_0=rulesign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberRule());
	        }
       		set(
       			$current, 
       			"sign",
        		lv_sign_0_0, 
        		"sign");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberAccess().getNonnegative_numberNonnegative_numberParserRuleCall_1_0()); 
	    }
		lv_nonnegative_number_1_0=rulenonnegative_number		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberRule());
	        }
       		set(
       			$current, 
       			"nonnegative_number",
        		lv_nonnegative_number_1_0, 
        		"nonnegative_number");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulenonnegative_number
entryRulenonnegative_number returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonnegative_numberRule()); }
	 iv_rulenonnegative_number=rulenonnegative_number 
	 { $current=$iv_rulenonnegative_number.current; } 
	 EOF 
;

// Rule nonnegative_number
rulenonnegative_number returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNonnegative_numberAccess().getIntseqDigit_sequenceParserRuleCall_0_0()); 
	    }
		lv_intseq_0_0=ruledigit_sequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNonnegative_numberRule());
	        }
       		set(
       			$current, 
       			"intseq",
        		lv_intseq_0_0, 
        		"digit_sequence");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNonnegative_numberAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNonnegative_numberAccess().getFloatseqDigit_sequenceParserRuleCall_1_1_0()); 
	    }
		lv_floatseq_2_0=ruledigit_sequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNonnegative_numberRule());
	        }
       		set(
       			$current, 
       			"floatseq",
        		lv_floatseq_2_0, 
        		"digit_sequence");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getNonnegative_numberAccess().getExponentExponentParserRuleCall_2_0()); 
	    }
		lv_exponent_3_0=ruleexponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNonnegative_numberRule());
	        }
       		set(
       			$current, 
       			"exponent",
        		lv_exponent_3_0, 
        		"exponent");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleexponent
entryRuleexponent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExponentRule()); }
	 iv_ruleexponent=ruleexponent 
	 { $current=$iv_ruleexponent.current; } 
	 EOF 
;

// Rule exponent
ruleexponent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='e' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExponentAccess().getEKeyword_0_0());
    }

    |	otherlv_1='E' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExponentAccess().getEKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExponentAccess().getSignSignParserRuleCall_1_0()); 
	    }
		lv_sign_2_0=rulesign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExponentRule());
	        }
       		set(
       			$current, 
       			"sign",
        		lv_sign_2_0, 
        		"sign");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getExponentAccess().getDigit_sequenceDigit_sequenceParserRuleCall_2_0()); 
	    }
		lv_digit_sequence_3_0=ruledigit_sequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExponentRule());
	        }
       		set(
       			$current, 
       			"digit_sequence",
        		lv_digit_sequence_3_0, 
        		"digit_sequence");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuledigit_sequence
entryRuledigit_sequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDigit_sequenceRule()); }
	 iv_ruledigit_sequence=ruledigit_sequence 
	 { $current=$iv_ruledigit_sequence.current; } 
	 EOF 
;

// Rule digit_sequence
ruledigit_sequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDigit_sequenceAccess().getDigitsDigitParserRuleCall_0()); 
	    }
		lv_digits_0_0=ruledigit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDigit_sequenceRule());
	        }
       		add(
       			$current, 
       			"digits",
        		lv_digits_0_0, 
        		"digit");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuledigit
entryRuledigit returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDigitRule()); } 
	 iv_ruledigit=ruledigit 
	 { $current=$iv_ruledigit.current.getText(); }  
	 EOF 
;

// Rule digit
ruledigit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='0' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDigitAccess().getDigitZeroKeyword_0()); 
    }

    |
	kw='1' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDigitAccess().getDigitOneKeyword_1()); 
    }

    |
	kw='2' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDigitAccess().getDigitTwoKeyword_2()); 
    }

    |
	kw='3' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDigitAccess().getDigitThreeKeyword_3()); 
    }

    |
	kw='4' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDigitAccess().getDigitFourKeyword_4()); 
    }

    |
	kw='5' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDigitAccess().getDigitFiveKeyword_5()); 
    }

    |
	kw='6' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDigitAccess().getDigitSixKeyword_6()); 
    }

    |
	kw='7' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDigitAccess().getDigitSevenKeyword_7()); 
    }

    |
	kw='8' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDigitAccess().getDigitEightKeyword_8()); 
    }

    |
	kw='9' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDigitAccess().getDigitNineKeyword_9()); 
    }
)
    ;





// Entry rule entryRulesign
entryRulesign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignRule()); } 
	 iv_rulesign=rulesign 
	 { $current=$iv_rulesign.current.getText(); }  
	 EOF 
;

// Rule sign
rulesign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleflag
entryRuleflag returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFlagRule()); } 
	 iv_ruleflag=ruleflag 
	 { $current=$iv_ruleflag.current.getText(); }  
	 EOF 
;

// Rule flag
ruleflag returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='0' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFlagAccess().getDigitZeroKeyword_0()); 
    }

    |
	kw='1' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFlagAccess().getDigitOneKeyword_1()); 
    }
)
    ;





RULE_WSP : (' '|'\t'|'\r'|'\n');


