/*
* generated by Xtext
*/

package at.bestsolution.efxclipse.tooling.svgpath.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class SvgPathGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class Svg_pathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "svg_path");
		private final Assignment cMoveto_drawto_command_groupsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMoveto_drawto_command_groupsMoveto_drawto_command_groupsParserRuleCall_0 = (RuleCall)cMoveto_drawto_command_groupsAssignment.eContents().get(0);
		
		//svg_path:
		//	moveto_drawto_command_groups=moveto_drawto_command_groups?;
		public ParserRule getRule() { return rule; }

		//moveto_drawto_command_groups=moveto_drawto_command_groups?
		public Assignment getMoveto_drawto_command_groupsAssignment() { return cMoveto_drawto_command_groupsAssignment; }

		//moveto_drawto_command_groups
		public RuleCall getMoveto_drawto_command_groupsMoveto_drawto_command_groupsParserRuleCall_0() { return cMoveto_drawto_command_groupsMoveto_drawto_command_groupsParserRuleCall_0; }
	}

	public class Moveto_drawto_command_groupsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "moveto_drawto_command_groups");
		private final Assignment cCommandsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandsMoveto_drawto_command_groupParserRuleCall_0 = (RuleCall)cCommandsAssignment.eContents().get(0);
		
		//moveto_drawto_command_groups:
		//	commands+=moveto_drawto_command_group;
		public ParserRule getRule() { return rule; }

		//commands+=moveto_drawto_command_group
		public Assignment getCommandsAssignment() { return cCommandsAssignment; }

		//moveto_drawto_command_group
		public RuleCall getCommandsMoveto_drawto_command_groupParserRuleCall_0() { return cCommandsMoveto_drawto_command_groupParserRuleCall_0; }
	}

	public class Moveto_drawto_command_groupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "moveto_drawto_command_group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMovetoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMovetoMovetoParserRuleCall_0_0 = (RuleCall)cMovetoAssignment_0.eContents().get(0);
		private final Assignment cDrawto_commandsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDrawto_commandsDrawto_commandsParserRuleCall_1_0 = (RuleCall)cDrawto_commandsAssignment_1.eContents().get(0);
		
		//moveto_drawto_command_group:
		//	moveto=moveto drawto_commands=drawto_commands?;
		public ParserRule getRule() { return rule; }

		//moveto=moveto drawto_commands=drawto_commands?
		public Group getGroup() { return cGroup; }

		//moveto=moveto
		public Assignment getMovetoAssignment_0() { return cMovetoAssignment_0; }

		//moveto
		public RuleCall getMovetoMovetoParserRuleCall_0_0() { return cMovetoMovetoParserRuleCall_0_0; }

		//drawto_commands=drawto_commands?
		public Assignment getDrawto_commandsAssignment_1() { return cDrawto_commandsAssignment_1; }

		//drawto_commands
		public RuleCall getDrawto_commandsDrawto_commandsParserRuleCall_1_0() { return cDrawto_commandsDrawto_commandsParserRuleCall_1_0; }
	}

	public class MovetoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "moveto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cMKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cPointAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPointCoordinate_pairParserRuleCall_1_0 = (RuleCall)cPointAssignment_1.eContents().get(0);
		private final RuleCall cCommaParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cLineto_argument_sequenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLineto_argument_sequenceLineto_argument_sequenceParserRuleCall_3_0 = (RuleCall)cLineto_argument_sequenceAssignment_3.eContents().get(0);
		
		//moveto:
		//	("M" | "m") point=coordinate_pair comma? lineto_argument_sequence=lineto_argument_sequence;
		public ParserRule getRule() { return rule; }

		//("M" | "m") point=coordinate_pair comma? lineto_argument_sequence=lineto_argument_sequence
		public Group getGroup() { return cGroup; }

		//"M" | "m"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"M"
		public Keyword getMKeyword_0_0() { return cMKeyword_0_0; }

		//"m"
		public Keyword getMKeyword_0_1() { return cMKeyword_0_1; }

		//point=coordinate_pair
		public Assignment getPointAssignment_1() { return cPointAssignment_1; }

		//coordinate_pair
		public RuleCall getPointCoordinate_pairParserRuleCall_1_0() { return cPointCoordinate_pairParserRuleCall_1_0; }

		//comma?
		public RuleCall getCommaParserRuleCall_2() { return cCommaParserRuleCall_2; }

		//lineto_argument_sequence=lineto_argument_sequence
		public Assignment getLineto_argument_sequenceAssignment_3() { return cLineto_argument_sequenceAssignment_3; }

		//lineto_argument_sequence
		public RuleCall getLineto_argument_sequenceLineto_argument_sequenceParserRuleCall_3_0() { return cLineto_argument_sequenceLineto_argument_sequenceParserRuleCall_3_0; }
	}

	public class Lineto_argument_sequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lineto_argument_sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPairsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPairsCoordinate_pairParserRuleCall_0_0 = (RuleCall)cPairsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCommaParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cPairsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPairsCoordinate_pairParserRuleCall_1_1_0 = (RuleCall)cPairsAssignment_1_1.eContents().get(0);
		
		//lineto_argument_sequence:
		//	pairs+=coordinate_pair (comma? pairs+=coordinate_pair)*;
		public ParserRule getRule() { return rule; }

		//pairs+=coordinate_pair (comma? pairs+=coordinate_pair)*
		public Group getGroup() { return cGroup; }

		//pairs+=coordinate_pair
		public Assignment getPairsAssignment_0() { return cPairsAssignment_0; }

		//coordinate_pair
		public RuleCall getPairsCoordinate_pairParserRuleCall_0_0() { return cPairsCoordinate_pairParserRuleCall_0_0; }

		//(comma? pairs+=coordinate_pair)*
		public Group getGroup_1() { return cGroup_1; }

		//comma?
		public RuleCall getCommaParserRuleCall_1_0() { return cCommaParserRuleCall_1_0; }

		//pairs+=coordinate_pair
		public Assignment getPairsAssignment_1_1() { return cPairsAssignment_1_1; }

		//coordinate_pair
		public RuleCall getPairsCoordinate_pairParserRuleCall_1_1_0() { return cPairsCoordinate_pairParserRuleCall_1_1_0; }
	}

	public class Drawto_commandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "drawto_commands");
		private final Assignment cDrawto_commandsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDrawto_commandsDrawto_commandParserRuleCall_0 = (RuleCall)cDrawto_commandsAssignment.eContents().get(0);
		
		//drawto_commands:
		//	drawto_commands+=drawto_command+;
		public ParserRule getRule() { return rule; }

		//drawto_commands+=drawto_command+
		public Assignment getDrawto_commandsAssignment() { return cDrawto_commandsAssignment; }

		//drawto_command
		public RuleCall getDrawto_commandsDrawto_commandParserRuleCall_0() { return cDrawto_commandsDrawto_commandParserRuleCall_0; }
	}

	public class Drawto_commandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "drawto_command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClosepathParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLinetoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHorizontal_linetoParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVertical_linetoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCurvetoParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSmooth_curvetoParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cQuadratic_bezier_curvetoParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSmooth_quadratic_bezier_curvetoParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cElliptical_arcParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//drawto_command:
		//	closepath | lineto | horizontal_lineto | vertical_lineto | curveto | smooth_curveto | quadratic_bezier_curveto |
		//	smooth_quadratic_bezier_curveto | elliptical_arc;
		public ParserRule getRule() { return rule; }

		//closepath | lineto | horizontal_lineto | vertical_lineto | curveto | smooth_curveto | quadratic_bezier_curveto |
		//smooth_quadratic_bezier_curveto | elliptical_arc
		public Alternatives getAlternatives() { return cAlternatives; }

		//closepath
		public RuleCall getClosepathParserRuleCall_0() { return cClosepathParserRuleCall_0; }

		//lineto
		public RuleCall getLinetoParserRuleCall_1() { return cLinetoParserRuleCall_1; }

		//horizontal_lineto
		public RuleCall getHorizontal_linetoParserRuleCall_2() { return cHorizontal_linetoParserRuleCall_2; }

		//vertical_lineto
		public RuleCall getVertical_linetoParserRuleCall_3() { return cVertical_linetoParserRuleCall_3; }

		//curveto
		public RuleCall getCurvetoParserRuleCall_4() { return cCurvetoParserRuleCall_4; }

		//smooth_curveto
		public RuleCall getSmooth_curvetoParserRuleCall_5() { return cSmooth_curvetoParserRuleCall_5; }

		//quadratic_bezier_curveto
		public RuleCall getQuadratic_bezier_curvetoParserRuleCall_6() { return cQuadratic_bezier_curvetoParserRuleCall_6; }

		//smooth_quadratic_bezier_curveto
		public RuleCall getSmooth_quadratic_bezier_curvetoParserRuleCall_7() { return cSmooth_quadratic_bezier_curvetoParserRuleCall_7; }

		//elliptical_arc
		public RuleCall getElliptical_arcParserRuleCall_8() { return cElliptical_arcParserRuleCall_8; }
	}

	public class ClosepathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "closepath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClosepathAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cZKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cZKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//closepath:
		//	{closepath} ("Z" | "z");
		public ParserRule getRule() { return rule; }

		//{closepath} ("Z" | "z")
		public Group getGroup() { return cGroup; }

		//{closepath}
		public Action getClosepathAction_0() { return cClosepathAction_0; }

		//"Z" | "z"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"Z"
		public Keyword getZKeyword_1_0() { return cZKeyword_1_0; }

		//"z"
		public Keyword getZKeyword_1_1() { return cZKeyword_1_1; }
	}

	public class LinetoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lineto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cLineto_argument_sequenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLineto_argument_sequenceLineto_argument_sequenceParserRuleCall_1_0 = (RuleCall)cLineto_argument_sequenceAssignment_1.eContents().get(0);
		
		//lineto:
		//	("L" | "l") lineto_argument_sequence=lineto_argument_sequence;
		public ParserRule getRule() { return rule; }

		//("L" | "l") lineto_argument_sequence=lineto_argument_sequence
		public Group getGroup() { return cGroup; }

		//"L" | "l"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"L"
		public Keyword getLKeyword_0_0() { return cLKeyword_0_0; }

		//"l"
		public Keyword getLKeyword_0_1() { return cLKeyword_0_1; }

		//lineto_argument_sequence=lineto_argument_sequence
		public Assignment getLineto_argument_sequenceAssignment_1() { return cLineto_argument_sequenceAssignment_1; }

		//lineto_argument_sequence
		public RuleCall getLineto_argument_sequenceLineto_argument_sequenceParserRuleCall_1_0() { return cLineto_argument_sequenceLineto_argument_sequenceParserRuleCall_1_0; }
	}

	public class Horizontal_linetoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "horizontal_lineto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cHorizontal_lineto_argument_sequenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHorizontal_lineto_argument_sequenceHorizontal_lineto_argument_sequenceParserRuleCall_1_0 = (RuleCall)cHorizontal_lineto_argument_sequenceAssignment_1.eContents().get(0);
		
		//horizontal_lineto:
		//	("H" | "h") horizontal_lineto_argument_sequence=horizontal_lineto_argument_sequence;
		public ParserRule getRule() { return rule; }

		//("H" | "h") horizontal_lineto_argument_sequence=horizontal_lineto_argument_sequence
		public Group getGroup() { return cGroup; }

		//"H" | "h"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"H"
		public Keyword getHKeyword_0_0() { return cHKeyword_0_0; }

		//"h"
		public Keyword getHKeyword_0_1() { return cHKeyword_0_1; }

		//horizontal_lineto_argument_sequence=horizontal_lineto_argument_sequence
		public Assignment getHorizontal_lineto_argument_sequenceAssignment_1() { return cHorizontal_lineto_argument_sequenceAssignment_1; }

		//horizontal_lineto_argument_sequence
		public RuleCall getHorizontal_lineto_argument_sequenceHorizontal_lineto_argument_sequenceParserRuleCall_1_0() { return cHorizontal_lineto_argument_sequenceHorizontal_lineto_argument_sequenceParserRuleCall_1_0; }
	}

	public class Horizontal_lineto_argument_sequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "horizontal_lineto_argument_sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCoordinatesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCoordinatesCoordinateParserRuleCall_0_0 = (RuleCall)cCoordinatesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCommaParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cCoordinatesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCoordinatesCoordinateParserRuleCall_1_1_0 = (RuleCall)cCoordinatesAssignment_1_1.eContents().get(0);
		
		//horizontal_lineto_argument_sequence:
		//	coordinates+=coordinate (comma? coordinates+=coordinate)*;
		public ParserRule getRule() { return rule; }

		//coordinates+=coordinate (comma? coordinates+=coordinate)*
		public Group getGroup() { return cGroup; }

		//coordinates+=coordinate
		public Assignment getCoordinatesAssignment_0() { return cCoordinatesAssignment_0; }

		//coordinate
		public RuleCall getCoordinatesCoordinateParserRuleCall_0_0() { return cCoordinatesCoordinateParserRuleCall_0_0; }

		//(comma? coordinates+=coordinate)*
		public Group getGroup_1() { return cGroup_1; }

		//comma?
		public RuleCall getCommaParserRuleCall_1_0() { return cCommaParserRuleCall_1_0; }

		//coordinates+=coordinate
		public Assignment getCoordinatesAssignment_1_1() { return cCoordinatesAssignment_1_1; }

		//coordinate
		public RuleCall getCoordinatesCoordinateParserRuleCall_1_1_0() { return cCoordinatesCoordinateParserRuleCall_1_1_0; }
	}

	public class Vertical_linetoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vertical_lineto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cVKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cVKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cVertical_lineto_argument_sequenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVertical_lineto_argument_sequenceVertical_lineto_argument_sequenceParserRuleCall_1_0 = (RuleCall)cVertical_lineto_argument_sequenceAssignment_1.eContents().get(0);
		
		//vertical_lineto:
		//	("V" | "v") vertical_lineto_argument_sequence=vertical_lineto_argument_sequence;
		public ParserRule getRule() { return rule; }

		//("V" | "v") vertical_lineto_argument_sequence=vertical_lineto_argument_sequence
		public Group getGroup() { return cGroup; }

		//"V" | "v"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"V"
		public Keyword getVKeyword_0_0() { return cVKeyword_0_0; }

		//"v"
		public Keyword getVKeyword_0_1() { return cVKeyword_0_1; }

		//vertical_lineto_argument_sequence=vertical_lineto_argument_sequence
		public Assignment getVertical_lineto_argument_sequenceAssignment_1() { return cVertical_lineto_argument_sequenceAssignment_1; }

		//vertical_lineto_argument_sequence
		public RuleCall getVertical_lineto_argument_sequenceVertical_lineto_argument_sequenceParserRuleCall_1_0() { return cVertical_lineto_argument_sequenceVertical_lineto_argument_sequenceParserRuleCall_1_0; }
	}

	public class Vertical_lineto_argument_sequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vertical_lineto_argument_sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCoordinatesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCoordinatesCoordinateParserRuleCall_0_0 = (RuleCall)cCoordinatesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCommaParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cCoordinatesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCoordinatesCoordinateParserRuleCall_1_1_0 = (RuleCall)cCoordinatesAssignment_1_1.eContents().get(0);
		
		//vertical_lineto_argument_sequence:
		//	coordinates+=coordinate (comma? coordinates+=coordinate)*;
		public ParserRule getRule() { return rule; }

		//coordinates+=coordinate (comma? coordinates+=coordinate)*
		public Group getGroup() { return cGroup; }

		//coordinates+=coordinate
		public Assignment getCoordinatesAssignment_0() { return cCoordinatesAssignment_0; }

		//coordinate
		public RuleCall getCoordinatesCoordinateParserRuleCall_0_0() { return cCoordinatesCoordinateParserRuleCall_0_0; }

		//(comma? coordinates+=coordinate)*
		public Group getGroup_1() { return cGroup_1; }

		//comma?
		public RuleCall getCommaParserRuleCall_1_0() { return cCommaParserRuleCall_1_0; }

		//coordinates+=coordinate
		public Assignment getCoordinatesAssignment_1_1() { return cCoordinatesAssignment_1_1; }

		//coordinate
		public RuleCall getCoordinatesCoordinateParserRuleCall_1_1_0() { return cCoordinatesCoordinateParserRuleCall_1_1_0; }
	}

	public class CurvetoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "curveto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCurveto_argument_sequenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCurveto_argument_sequenceCurveto_argument_sequenceParserRuleCall_1_0 = (RuleCall)cCurveto_argument_sequenceAssignment_1.eContents().get(0);
		
		//curveto:
		//	("C" | "c") curveto_argument_sequence=curveto_argument_sequence;
		public ParserRule getRule() { return rule; }

		//("C" | "c") curveto_argument_sequence=curveto_argument_sequence
		public Group getGroup() { return cGroup; }

		//"C" | "c"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"C"
		public Keyword getCKeyword_0_0() { return cCKeyword_0_0; }

		//"c"
		public Keyword getCKeyword_0_1() { return cCKeyword_0_1; }

		//curveto_argument_sequence=curveto_argument_sequence
		public Assignment getCurveto_argument_sequenceAssignment_1() { return cCurveto_argument_sequenceAssignment_1; }

		//curveto_argument_sequence
		public RuleCall getCurveto_argument_sequenceCurveto_argument_sequenceParserRuleCall_1_0() { return cCurveto_argument_sequenceCurveto_argument_sequenceParserRuleCall_1_0; }
	}

	public class Curveto_argument_sequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "curveto_argument_sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCurveto_argumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCurveto_argumentsCurveto_argumentParserRuleCall_0_0 = (RuleCall)cCurveto_argumentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCommaParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cCurveto_argumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCurveto_argumentsCurveto_argumentParserRuleCall_1_1_0 = (RuleCall)cCurveto_argumentsAssignment_1_1.eContents().get(0);
		
		//curveto_argument_sequence:
		//	curveto_arguments+=curveto_argument (comma? curveto_arguments+=curveto_argument)*;
		public ParserRule getRule() { return rule; }

		//curveto_arguments+=curveto_argument (comma? curveto_arguments+=curveto_argument)*
		public Group getGroup() { return cGroup; }

		//curveto_arguments+=curveto_argument
		public Assignment getCurveto_argumentsAssignment_0() { return cCurveto_argumentsAssignment_0; }

		//curveto_argument
		public RuleCall getCurveto_argumentsCurveto_argumentParserRuleCall_0_0() { return cCurveto_argumentsCurveto_argumentParserRuleCall_0_0; }

		//(comma? curveto_arguments+=curveto_argument)*
		public Group getGroup_1() { return cGroup_1; }

		//comma?
		public RuleCall getCommaParserRuleCall_1_0() { return cCommaParserRuleCall_1_0; }

		//curveto_arguments+=curveto_argument
		public Assignment getCurveto_argumentsAssignment_1_1() { return cCurveto_argumentsAssignment_1_1; }

		//curveto_argument
		public RuleCall getCurveto_argumentsCurveto_argumentParserRuleCall_1_1_0() { return cCurveto_argumentsCurveto_argumentParserRuleCall_1_1_0; }
	}

	public class Curveto_argumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "curveto_argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cC1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cC1Coordinate_pairParserRuleCall_0_0 = (RuleCall)cC1Assignment_0.eContents().get(0);
		private final RuleCall cCommaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cC2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cC2Coordinate_pairParserRuleCall_2_0 = (RuleCall)cC2Assignment_2.eContents().get(0);
		private final RuleCall cCommaParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cC3Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cC3Coordinate_pairParserRuleCall_4_0 = (RuleCall)cC3Assignment_4.eContents().get(0);
		
		//curveto_argument:
		//	c1=coordinate_pair comma? c2=coordinate_pair comma? c3=coordinate_pair;
		public ParserRule getRule() { return rule; }

		//c1=coordinate_pair comma? c2=coordinate_pair comma? c3=coordinate_pair
		public Group getGroup() { return cGroup; }

		//c1=coordinate_pair
		public Assignment getC1Assignment_0() { return cC1Assignment_0; }

		//coordinate_pair
		public RuleCall getC1Coordinate_pairParserRuleCall_0_0() { return cC1Coordinate_pairParserRuleCall_0_0; }

		//comma?
		public RuleCall getCommaParserRuleCall_1() { return cCommaParserRuleCall_1; }

		//c2=coordinate_pair
		public Assignment getC2Assignment_2() { return cC2Assignment_2; }

		//coordinate_pair
		public RuleCall getC2Coordinate_pairParserRuleCall_2_0() { return cC2Coordinate_pairParserRuleCall_2_0; }

		//comma?
		public RuleCall getCommaParserRuleCall_3() { return cCommaParserRuleCall_3; }

		//c3=coordinate_pair
		public Assignment getC3Assignment_4() { return cC3Assignment_4; }

		//coordinate_pair
		public RuleCall getC3Coordinate_pairParserRuleCall_4_0() { return cC3Coordinate_pairParserRuleCall_4_0; }
	}

	public class Smooth_curvetoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "smooth_curveto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cSmooth_curveto_argument_sequenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSmooth_curveto_argument_sequenceSmooth_curveto_argument_sequenceParserRuleCall_1_0 = (RuleCall)cSmooth_curveto_argument_sequenceAssignment_1.eContents().get(0);
		
		//smooth_curveto:
		//	("S" | "s") smooth_curveto_argument_sequence=smooth_curveto_argument_sequence;
		public ParserRule getRule() { return rule; }

		//("S" | "s") smooth_curveto_argument_sequence=smooth_curveto_argument_sequence
		public Group getGroup() { return cGroup; }

		//"S" | "s"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"S"
		public Keyword getSKeyword_0_0() { return cSKeyword_0_0; }

		//"s"
		public Keyword getSKeyword_0_1() { return cSKeyword_0_1; }

		//smooth_curveto_argument_sequence=smooth_curveto_argument_sequence
		public Assignment getSmooth_curveto_argument_sequenceAssignment_1() { return cSmooth_curveto_argument_sequenceAssignment_1; }

		//smooth_curveto_argument_sequence
		public RuleCall getSmooth_curveto_argument_sequenceSmooth_curveto_argument_sequenceParserRuleCall_1_0() { return cSmooth_curveto_argument_sequenceSmooth_curveto_argument_sequenceParserRuleCall_1_0; }
	}

	public class Smooth_curveto_argument_sequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "smooth_curveto_argument_sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSmooth_curveto_argumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSmooth_curveto_argumentsSmooth_curveto_argumentParserRuleCall_0_0 = (RuleCall)cSmooth_curveto_argumentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCommaParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cSmooth_curveto_argumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSmooth_curveto_argumentsSmooth_curveto_argumentParserRuleCall_1_1_0 = (RuleCall)cSmooth_curveto_argumentsAssignment_1_1.eContents().get(0);
		
		//smooth_curveto_argument_sequence:
		//	smooth_curveto_arguments+=smooth_curveto_argument (comma? smooth_curveto_arguments+=smooth_curveto_argument)*;
		public ParserRule getRule() { return rule; }

		//smooth_curveto_arguments+=smooth_curveto_argument (comma? smooth_curveto_arguments+=smooth_curveto_argument)*
		public Group getGroup() { return cGroup; }

		//smooth_curveto_arguments+=smooth_curveto_argument
		public Assignment getSmooth_curveto_argumentsAssignment_0() { return cSmooth_curveto_argumentsAssignment_0; }

		//smooth_curveto_argument
		public RuleCall getSmooth_curveto_argumentsSmooth_curveto_argumentParserRuleCall_0_0() { return cSmooth_curveto_argumentsSmooth_curveto_argumentParserRuleCall_0_0; }

		//(comma? smooth_curveto_arguments+=smooth_curveto_argument)*
		public Group getGroup_1() { return cGroup_1; }

		//comma?
		public RuleCall getCommaParserRuleCall_1_0() { return cCommaParserRuleCall_1_0; }

		//smooth_curveto_arguments+=smooth_curveto_argument
		public Assignment getSmooth_curveto_argumentsAssignment_1_1() { return cSmooth_curveto_argumentsAssignment_1_1; }

		//smooth_curveto_argument
		public RuleCall getSmooth_curveto_argumentsSmooth_curveto_argumentParserRuleCall_1_1_0() { return cSmooth_curveto_argumentsSmooth_curveto_argumentParserRuleCall_1_1_0; }
	}

	public class Smooth_curveto_argumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "smooth_curveto_argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cC1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cC1Coordinate_pairParserRuleCall_0_0 = (RuleCall)cC1Assignment_0.eContents().get(0);
		private final RuleCall cCommaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cC2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cC2Coordinate_pairParserRuleCall_2_0 = (RuleCall)cC2Assignment_2.eContents().get(0);
		
		//smooth_curveto_argument:
		//	c1=coordinate_pair comma? c2=coordinate_pair;
		public ParserRule getRule() { return rule; }

		//c1=coordinate_pair comma? c2=coordinate_pair
		public Group getGroup() { return cGroup; }

		//c1=coordinate_pair
		public Assignment getC1Assignment_0() { return cC1Assignment_0; }

		//coordinate_pair
		public RuleCall getC1Coordinate_pairParserRuleCall_0_0() { return cC1Coordinate_pairParserRuleCall_0_0; }

		//comma?
		public RuleCall getCommaParserRuleCall_1() { return cCommaParserRuleCall_1; }

		//c2=coordinate_pair
		public Assignment getC2Assignment_2() { return cC2Assignment_2; }

		//coordinate_pair
		public RuleCall getC2Coordinate_pairParserRuleCall_2_0() { return cC2Coordinate_pairParserRuleCall_2_0; }
	}

	public class Quadratic_bezier_curvetoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quadratic_bezier_curveto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cQKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cQKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cQuadratic_bezier_curveto_argument_sequenceParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//quadratic_bezier_curveto:
		//	("Q" | "q") quadratic_bezier_curveto_argument_sequence;
		public ParserRule getRule() { return rule; }

		//("Q" | "q") quadratic_bezier_curveto_argument_sequence
		public Group getGroup() { return cGroup; }

		//"Q" | "q"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"Q"
		public Keyword getQKeyword_0_0() { return cQKeyword_0_0; }

		//"q"
		public Keyword getQKeyword_0_1() { return cQKeyword_0_1; }

		//quadratic_bezier_curveto_argument_sequence
		public RuleCall getQuadratic_bezier_curveto_argument_sequenceParserRuleCall_1() { return cQuadratic_bezier_curveto_argument_sequenceParserRuleCall_1; }
	}

	public class Quadratic_bezier_curveto_argument_sequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quadratic_bezier_curveto_argument_sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuadratic_bezier_curveto_argumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuadratic_bezier_curveto_argumentsQuadratic_bezier_curveto_argumentParserRuleCall_0_0 = (RuleCall)cQuadratic_bezier_curveto_argumentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCommaParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cQuadratic_bezier_curveto_argumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cQuadratic_bezier_curveto_argumentsQuadratic_bezier_curveto_argumentParserRuleCall_1_1_0 = (RuleCall)cQuadratic_bezier_curveto_argumentsAssignment_1_1.eContents().get(0);
		
		//quadratic_bezier_curveto_argument_sequence:
		//	quadratic_bezier_curveto_arguments+=quadratic_bezier_curveto_argument (comma?
		//	quadratic_bezier_curveto_arguments+=quadratic_bezier_curveto_argument)*;
		public ParserRule getRule() { return rule; }

		//quadratic_bezier_curveto_arguments+=quadratic_bezier_curveto_argument (comma?
		//quadratic_bezier_curveto_arguments+=quadratic_bezier_curveto_argument)*
		public Group getGroup() { return cGroup; }

		//quadratic_bezier_curveto_arguments+=quadratic_bezier_curveto_argument
		public Assignment getQuadratic_bezier_curveto_argumentsAssignment_0() { return cQuadratic_bezier_curveto_argumentsAssignment_0; }

		//quadratic_bezier_curveto_argument
		public RuleCall getQuadratic_bezier_curveto_argumentsQuadratic_bezier_curveto_argumentParserRuleCall_0_0() { return cQuadratic_bezier_curveto_argumentsQuadratic_bezier_curveto_argumentParserRuleCall_0_0; }

		//(comma? quadratic_bezier_curveto_arguments+=quadratic_bezier_curveto_argument)*
		public Group getGroup_1() { return cGroup_1; }

		//comma?
		public RuleCall getCommaParserRuleCall_1_0() { return cCommaParserRuleCall_1_0; }

		//quadratic_bezier_curveto_arguments+=quadratic_bezier_curveto_argument
		public Assignment getQuadratic_bezier_curveto_argumentsAssignment_1_1() { return cQuadratic_bezier_curveto_argumentsAssignment_1_1; }

		//quadratic_bezier_curveto_argument
		public RuleCall getQuadratic_bezier_curveto_argumentsQuadratic_bezier_curveto_argumentParserRuleCall_1_1_0() { return cQuadratic_bezier_curveto_argumentsQuadratic_bezier_curveto_argumentParserRuleCall_1_1_0; }
	}

	public class Quadratic_bezier_curveto_argumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quadratic_bezier_curveto_argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cC1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cC1Coordinate_pairParserRuleCall_0_0 = (RuleCall)cC1Assignment_0.eContents().get(0);
		private final RuleCall cCommaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cC2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cC2Coordinate_pairParserRuleCall_2_0 = (RuleCall)cC2Assignment_2.eContents().get(0);
		
		//quadratic_bezier_curveto_argument:
		//	c1=coordinate_pair comma? c2=coordinate_pair;
		public ParserRule getRule() { return rule; }

		//c1=coordinate_pair comma? c2=coordinate_pair
		public Group getGroup() { return cGroup; }

		//c1=coordinate_pair
		public Assignment getC1Assignment_0() { return cC1Assignment_0; }

		//coordinate_pair
		public RuleCall getC1Coordinate_pairParserRuleCall_0_0() { return cC1Coordinate_pairParserRuleCall_0_0; }

		//comma?
		public RuleCall getCommaParserRuleCall_1() { return cCommaParserRuleCall_1; }

		//c2=coordinate_pair
		public Assignment getC2Assignment_2() { return cC2Assignment_2; }

		//coordinate_pair
		public RuleCall getC2Coordinate_pairParserRuleCall_2_0() { return cC2Coordinate_pairParserRuleCall_2_0; }
	}

	public class Smooth_quadratic_bezier_curvetoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "smooth_quadratic_bezier_curveto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cTKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cSmooth_quadratic_bezier_curveto_argument_sequenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSmooth_quadratic_bezier_curveto_argument_sequenceSmooth_quadratic_bezier_curveto_argument_sequenceParserRuleCall_1_0 = (RuleCall)cSmooth_quadratic_bezier_curveto_argument_sequenceAssignment_1.eContents().get(0);
		
		//smooth_quadratic_bezier_curveto:
		//	("T" | "t") smooth_quadratic_bezier_curveto_argument_sequence=smooth_quadratic_bezier_curveto_argument_sequence;
		public ParserRule getRule() { return rule; }

		//("T" | "t") smooth_quadratic_bezier_curveto_argument_sequence=smooth_quadratic_bezier_curveto_argument_sequence
		public Group getGroup() { return cGroup; }

		//"T" | "t"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"T"
		public Keyword getTKeyword_0_0() { return cTKeyword_0_0; }

		//"t"
		public Keyword getTKeyword_0_1() { return cTKeyword_0_1; }

		//smooth_quadratic_bezier_curveto_argument_sequence=smooth_quadratic_bezier_curveto_argument_sequence
		public Assignment getSmooth_quadratic_bezier_curveto_argument_sequenceAssignment_1() { return cSmooth_quadratic_bezier_curveto_argument_sequenceAssignment_1; }

		//smooth_quadratic_bezier_curveto_argument_sequence
		public RuleCall getSmooth_quadratic_bezier_curveto_argument_sequenceSmooth_quadratic_bezier_curveto_argument_sequenceParserRuleCall_1_0() { return cSmooth_quadratic_bezier_curveto_argument_sequenceSmooth_quadratic_bezier_curveto_argument_sequenceParserRuleCall_1_0; }
	}

	public class Smooth_quadratic_bezier_curveto_argument_sequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "smooth_quadratic_bezier_curveto_argument_sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCoordinate_pairsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCoordinate_pairsCoordinate_pairParserRuleCall_0_0 = (RuleCall)cCoordinate_pairsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCommaParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cCoordinate_pairsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCoordinate_pairsCoordinate_pairParserRuleCall_1_1_0 = (RuleCall)cCoordinate_pairsAssignment_1_1.eContents().get(0);
		
		//smooth_quadratic_bezier_curveto_argument_sequence:
		//	coordinate_pairs+=coordinate_pair (comma? coordinate_pairs+=coordinate_pair)*;
		public ParserRule getRule() { return rule; }

		//coordinate_pairs+=coordinate_pair (comma? coordinate_pairs+=coordinate_pair)*
		public Group getGroup() { return cGroup; }

		//coordinate_pairs+=coordinate_pair
		public Assignment getCoordinate_pairsAssignment_0() { return cCoordinate_pairsAssignment_0; }

		//coordinate_pair
		public RuleCall getCoordinate_pairsCoordinate_pairParserRuleCall_0_0() { return cCoordinate_pairsCoordinate_pairParserRuleCall_0_0; }

		//(comma? coordinate_pairs+=coordinate_pair)*
		public Group getGroup_1() { return cGroup_1; }

		//comma?
		public RuleCall getCommaParserRuleCall_1_0() { return cCommaParserRuleCall_1_0; }

		//coordinate_pairs+=coordinate_pair
		public Assignment getCoordinate_pairsAssignment_1_1() { return cCoordinate_pairsAssignment_1_1; }

		//coordinate_pair
		public RuleCall getCoordinate_pairsCoordinate_pairParserRuleCall_1_1_0() { return cCoordinate_pairsCoordinate_pairParserRuleCall_1_1_0; }
	}

	public class Elliptical_arcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "elliptical_arc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cElliptical_arc_argument_sequenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElliptical_arc_argument_sequenceElliptical_arc_argument_sequenceParserRuleCall_1_0 = (RuleCall)cElliptical_arc_argument_sequenceAssignment_1.eContents().get(0);
		
		//elliptical_arc:
		//	("A" | "a") elliptical_arc_argument_sequence=elliptical_arc_argument_sequence;
		public ParserRule getRule() { return rule; }

		//("A" | "a") elliptical_arc_argument_sequence=elliptical_arc_argument_sequence
		public Group getGroup() { return cGroup; }

		//"A" | "a"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"A"
		public Keyword getAKeyword_0_0() { return cAKeyword_0_0; }

		//"a"
		public Keyword getAKeyword_0_1() { return cAKeyword_0_1; }

		//elliptical_arc_argument_sequence=elliptical_arc_argument_sequence
		public Assignment getElliptical_arc_argument_sequenceAssignment_1() { return cElliptical_arc_argument_sequenceAssignment_1; }

		//elliptical_arc_argument_sequence
		public RuleCall getElliptical_arc_argument_sequenceElliptical_arc_argument_sequenceParserRuleCall_1_0() { return cElliptical_arc_argument_sequenceElliptical_arc_argument_sequenceParserRuleCall_1_0; }
	}

	public class Elliptical_arc_argument_sequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "elliptical_arc_argument_sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElliptical_arc_argumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElliptical_arc_argumentsElliptical_arc_argumentParserRuleCall_0_0 = (RuleCall)cElliptical_arc_argumentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCommaParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cElliptical_arc_argumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElliptical_arc_argumentsElliptical_arc_argumentParserRuleCall_1_1_0 = (RuleCall)cElliptical_arc_argumentsAssignment_1_1.eContents().get(0);
		
		//elliptical_arc_argument_sequence:
		//	elliptical_arc_arguments+=elliptical_arc_argument (comma? elliptical_arc_arguments+=elliptical_arc_argument)*;
		public ParserRule getRule() { return rule; }

		//elliptical_arc_arguments+=elliptical_arc_argument (comma? elliptical_arc_arguments+=elliptical_arc_argument)*
		public Group getGroup() { return cGroup; }

		//elliptical_arc_arguments+=elliptical_arc_argument
		public Assignment getElliptical_arc_argumentsAssignment_0() { return cElliptical_arc_argumentsAssignment_0; }

		//elliptical_arc_argument
		public RuleCall getElliptical_arc_argumentsElliptical_arc_argumentParserRuleCall_0_0() { return cElliptical_arc_argumentsElliptical_arc_argumentParserRuleCall_0_0; }

		//(comma? elliptical_arc_arguments+=elliptical_arc_argument)*
		public Group getGroup_1() { return cGroup_1; }

		//comma?
		public RuleCall getCommaParserRuleCall_1_0() { return cCommaParserRuleCall_1_0; }

		//elliptical_arc_arguments+=elliptical_arc_argument
		public Assignment getElliptical_arc_argumentsAssignment_1_1() { return cElliptical_arc_argumentsAssignment_1_1; }

		//elliptical_arc_argument
		public RuleCall getElliptical_arc_argumentsElliptical_arc_argumentParserRuleCall_1_1_0() { return cElliptical_arc_argumentsElliptical_arc_argumentParserRuleCall_1_1_0; }
	}

	public class Elliptical_arc_argumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "elliptical_arc_argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRxAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRxNonnegative_numberParserRuleCall_0_0 = (RuleCall)cRxAssignment_0.eContents().get(0);
		private final RuleCall cCommaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRyNonnegative_numberParserRuleCall_2_0 = (RuleCall)cRyAssignment_2.eContents().get(0);
		private final RuleCall cCommaParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cRotationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRotationNumberParserRuleCall_4_0 = (RuleCall)cRotationAssignment_4.eContents().get(0);
		private final RuleCall cCommaParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cLargearcflagAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLargearcflagFlagParserRuleCall_6_0 = (RuleCall)cLargearcflagAssignment_6.eContents().get(0);
		private final RuleCall cCommaParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cSweepflagAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSweepflagFlagParserRuleCall_8_0 = (RuleCall)cSweepflagAssignment_8.eContents().get(0);
		private final RuleCall cCommaParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cCoordinate_pairAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cCoordinate_pairCoordinate_pairParserRuleCall_10_0 = (RuleCall)cCoordinate_pairAssignment_10.eContents().get(0);
		
		//elliptical_arc_argument:
		//	rx=nonnegative_number comma? ry=nonnegative_number comma? rotation=number comma largearcflag=flag comma?
		//	sweepflag=flag comma? coordinate_pair=coordinate_pair;
		public ParserRule getRule() { return rule; }

		//rx=nonnegative_number comma? ry=nonnegative_number comma? rotation=number comma largearcflag=flag comma? sweepflag=flag
		//comma? coordinate_pair=coordinate_pair
		public Group getGroup() { return cGroup; }

		//rx=nonnegative_number
		public Assignment getRxAssignment_0() { return cRxAssignment_0; }

		//nonnegative_number
		public RuleCall getRxNonnegative_numberParserRuleCall_0_0() { return cRxNonnegative_numberParserRuleCall_0_0; }

		//comma?
		public RuleCall getCommaParserRuleCall_1() { return cCommaParserRuleCall_1; }

		//ry=nonnegative_number
		public Assignment getRyAssignment_2() { return cRyAssignment_2; }

		//nonnegative_number
		public RuleCall getRyNonnegative_numberParserRuleCall_2_0() { return cRyNonnegative_numberParserRuleCall_2_0; }

		//comma?
		public RuleCall getCommaParserRuleCall_3() { return cCommaParserRuleCall_3; }

		//rotation=number
		public Assignment getRotationAssignment_4() { return cRotationAssignment_4; }

		//number
		public RuleCall getRotationNumberParserRuleCall_4_0() { return cRotationNumberParserRuleCall_4_0; }

		//comma
		public RuleCall getCommaParserRuleCall_5() { return cCommaParserRuleCall_5; }

		//largearcflag=flag
		public Assignment getLargearcflagAssignment_6() { return cLargearcflagAssignment_6; }

		//flag
		public RuleCall getLargearcflagFlagParserRuleCall_6_0() { return cLargearcflagFlagParserRuleCall_6_0; }

		//comma?
		public RuleCall getCommaParserRuleCall_7() { return cCommaParserRuleCall_7; }

		//sweepflag=flag
		public Assignment getSweepflagAssignment_8() { return cSweepflagAssignment_8; }

		//flag
		public RuleCall getSweepflagFlagParserRuleCall_8_0() { return cSweepflagFlagParserRuleCall_8_0; }

		//comma?
		public RuleCall getCommaParserRuleCall_9() { return cCommaParserRuleCall_9; }

		//coordinate_pair=coordinate_pair
		public Assignment getCoordinate_pairAssignment_10() { return cCoordinate_pairAssignment_10; }

		//coordinate_pair
		public RuleCall getCoordinate_pairCoordinate_pairParserRuleCall_10_0() { return cCoordinate_pairCoordinate_pairParserRuleCall_10_0; }
	}

	public class Coordinate_pairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coordinate_pair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cC1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cC1CoordinateParserRuleCall_0_0 = (RuleCall)cC1Assignment_0.eContents().get(0);
		private final RuleCall cCommaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cC2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cC2CoordinateParserRuleCall_2_0 = (RuleCall)cC2Assignment_2.eContents().get(0);
		
		//coordinate_pair:
		//	c1=coordinate comma? c2=coordinate;
		public ParserRule getRule() { return rule; }

		//c1=coordinate comma? c2=coordinate
		public Group getGroup() { return cGroup; }

		//c1=coordinate
		public Assignment getC1Assignment_0() { return cC1Assignment_0; }

		//coordinate
		public RuleCall getC1CoordinateParserRuleCall_0_0() { return cC1CoordinateParserRuleCall_0_0; }

		//comma?
		public RuleCall getCommaParserRuleCall_1() { return cCommaParserRuleCall_1; }

		//c2=coordinate
		public Assignment getC2Assignment_2() { return cC2Assignment_2; }

		//coordinate
		public RuleCall getC2CoordinateParserRuleCall_2_0() { return cC2CoordinateParserRuleCall_2_0; }
	}

	public class CommaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "comma");
		private final Keyword cCommaKeyword = (Keyword)rule.eContents().get(1);
		
		//comma:
		//	",";
		public ParserRule getRule() { return rule; }

		//","
		public Keyword getCommaKeyword() { return cCommaKeyword; }
	}

	public class CoordinateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coordinate");
		private final RuleCall cNumberParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//coordinate:
		//	number;
		public ParserRule getRule() { return rule; }

		//number
		public RuleCall getNumberParserRuleCall() { return cNumberParserRuleCall; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignSignParserRuleCall_0_0 = (RuleCall)cSignAssignment_0.eContents().get(0);
		private final Assignment cNonnegative_numberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNonnegative_numberNonnegative_numberParserRuleCall_1_0 = (RuleCall)cNonnegative_numberAssignment_1.eContents().get(0);
		
		//number:
		//	sign=sign? nonnegative_number=nonnegative_number;
		public ParserRule getRule() { return rule; }

		//sign=sign? nonnegative_number=nonnegative_number
		public Group getGroup() { return cGroup; }

		//sign=sign?
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }

		//sign
		public RuleCall getSignSignParserRuleCall_0_0() { return cSignSignParserRuleCall_0_0; }

		//nonnegative_number=nonnegative_number
		public Assignment getNonnegative_numberAssignment_1() { return cNonnegative_numberAssignment_1; }

		//nonnegative_number
		public RuleCall getNonnegative_numberNonnegative_numberParserRuleCall_1_0() { return cNonnegative_numberNonnegative_numberParserRuleCall_1_0; }
	}

	public class Nonnegative_numberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nonnegative_number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIntseqAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIntseqDigit_sequenceParserRuleCall_0_0 = (RuleCall)cIntseqAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFloatseqAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFloatseqDigit_sequenceParserRuleCall_1_1_0 = (RuleCall)cFloatseqAssignment_1_1.eContents().get(0);
		private final Assignment cExponentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExponentExponentParserRuleCall_2_0 = (RuleCall)cExponentAssignment_2.eContents().get(0);
		
		//nonnegative_number:
		//	intseq=digit_sequence ("." floatseq=digit_sequence)? exponent=exponent?;
		public ParserRule getRule() { return rule; }

		//intseq=digit_sequence ("." floatseq=digit_sequence)? exponent=exponent?
		public Group getGroup() { return cGroup; }

		//intseq=digit_sequence
		public Assignment getIntseqAssignment_0() { return cIntseqAssignment_0; }

		//digit_sequence
		public RuleCall getIntseqDigit_sequenceParserRuleCall_0_0() { return cIntseqDigit_sequenceParserRuleCall_0_0; }

		//("." floatseq=digit_sequence)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//floatseq=digit_sequence
		public Assignment getFloatseqAssignment_1_1() { return cFloatseqAssignment_1_1; }

		//digit_sequence
		public RuleCall getFloatseqDigit_sequenceParserRuleCall_1_1_0() { return cFloatseqDigit_sequenceParserRuleCall_1_1_0; }

		//exponent=exponent?
		public Assignment getExponentAssignment_2() { return cExponentAssignment_2; }

		//exponent
		public RuleCall getExponentExponentParserRuleCall_2_0() { return cExponentExponentParserRuleCall_2_0; }
	}

	public class ExponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "exponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cSignAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignSignParserRuleCall_1_0 = (RuleCall)cSignAssignment_1.eContents().get(0);
		private final Assignment cDigit_sequenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDigit_sequenceDigit_sequenceParserRuleCall_2_0 = (RuleCall)cDigit_sequenceAssignment_2.eContents().get(0);
		
		//exponent:
		//	("e" | "E") sign=sign? digit_sequence=digit_sequence;
		public ParserRule getRule() { return rule; }

		//("e" | "E") sign=sign? digit_sequence=digit_sequence
		public Group getGroup() { return cGroup; }

		//"e" | "E"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"e"
		public Keyword getEKeyword_0_0() { return cEKeyword_0_0; }

		//"E"
		public Keyword getEKeyword_0_1() { return cEKeyword_0_1; }

		//sign=sign?
		public Assignment getSignAssignment_1() { return cSignAssignment_1; }

		//sign
		public RuleCall getSignSignParserRuleCall_1_0() { return cSignSignParserRuleCall_1_0; }

		//digit_sequence=digit_sequence
		public Assignment getDigit_sequenceAssignment_2() { return cDigit_sequenceAssignment_2; }

		//digit_sequence
		public RuleCall getDigit_sequenceDigit_sequenceParserRuleCall_2_0() { return cDigit_sequenceDigit_sequenceParserRuleCall_2_0; }
	}

	public class Digit_sequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "digit_sequence");
		private final Assignment cDigitsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDigitsDigitParserRuleCall_0 = (RuleCall)cDigitsAssignment.eContents().get(0);
		
		//digit_sequence:
		//	digits+=digit;
		public ParserRule getRule() { return rule; }

		//digits+=digit
		public Assignment getDigitsAssignment() { return cDigitsAssignment; }

		//digit
		public RuleCall getDigitsDigitParserRuleCall_0() { return cDigitsDigitParserRuleCall_0; }
	}

	public class DigitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "digit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDigitZeroKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDigitOneKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDigitTwoKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDigitThreeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDigitFourKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDigitFiveKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDigitSixKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDigitSevenKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cDigitEightKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cDigitNineKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//digit:
		//	"0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
		public ParserRule getRule() { return rule; }

		//"0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"0"
		public Keyword getDigitZeroKeyword_0() { return cDigitZeroKeyword_0; }

		//"1"
		public Keyword getDigitOneKeyword_1() { return cDigitOneKeyword_1; }

		//"2"
		public Keyword getDigitTwoKeyword_2() { return cDigitTwoKeyword_2; }

		//"3"
		public Keyword getDigitThreeKeyword_3() { return cDigitThreeKeyword_3; }

		//"4"
		public Keyword getDigitFourKeyword_4() { return cDigitFourKeyword_4; }

		//"5"
		public Keyword getDigitFiveKeyword_5() { return cDigitFiveKeyword_5; }

		//"6"
		public Keyword getDigitSixKeyword_6() { return cDigitSixKeyword_6; }

		//"7"
		public Keyword getDigitSevenKeyword_7() { return cDigitSevenKeyword_7; }

		//"8"
		public Keyword getDigitEightKeyword_8() { return cDigitEightKeyword_8; }

		//"9"
		public Keyword getDigitNineKeyword_9() { return cDigitNineKeyword_9; }
	}

	public class SignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//sign:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class FlagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "flag");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDigitZeroKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDigitOneKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//flag:
		//	"0" | "1";
		public ParserRule getRule() { return rule; }

		//"0" | "1"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"0"
		public Keyword getDigitZeroKeyword_0() { return cDigitZeroKeyword_0; }

		//"1"
		public Keyword getDigitOneKeyword_1() { return cDigitOneKeyword_1; }
	}
	
	
	private Svg_pathElements pSvg_path;
	private Moveto_drawto_command_groupsElements pMoveto_drawto_command_groups;
	private Moveto_drawto_command_groupElements pMoveto_drawto_command_group;
	private MovetoElements pMoveto;
	private Lineto_argument_sequenceElements pLineto_argument_sequence;
	private Drawto_commandsElements pDrawto_commands;
	private Drawto_commandElements pDrawto_command;
	private ClosepathElements pClosepath;
	private LinetoElements pLineto;
	private Horizontal_linetoElements pHorizontal_lineto;
	private Horizontal_lineto_argument_sequenceElements pHorizontal_lineto_argument_sequence;
	private Vertical_linetoElements pVertical_lineto;
	private Vertical_lineto_argument_sequenceElements pVertical_lineto_argument_sequence;
	private CurvetoElements pCurveto;
	private Curveto_argument_sequenceElements pCurveto_argument_sequence;
	private Curveto_argumentElements pCurveto_argument;
	private Smooth_curvetoElements pSmooth_curveto;
	private Smooth_curveto_argument_sequenceElements pSmooth_curveto_argument_sequence;
	private Smooth_curveto_argumentElements pSmooth_curveto_argument;
	private Quadratic_bezier_curvetoElements pQuadratic_bezier_curveto;
	private Quadratic_bezier_curveto_argument_sequenceElements pQuadratic_bezier_curveto_argument_sequence;
	private Quadratic_bezier_curveto_argumentElements pQuadratic_bezier_curveto_argument;
	private Smooth_quadratic_bezier_curvetoElements pSmooth_quadratic_bezier_curveto;
	private Smooth_quadratic_bezier_curveto_argument_sequenceElements pSmooth_quadratic_bezier_curveto_argument_sequence;
	private Elliptical_arcElements pElliptical_arc;
	private Elliptical_arc_argument_sequenceElements pElliptical_arc_argument_sequence;
	private Elliptical_arc_argumentElements pElliptical_arc_argument;
	private Coordinate_pairElements pCoordinate_pair;
	private CommaElements pComma;
	private CoordinateElements pCoordinate;
	private NumberElements pNumber;
	private Nonnegative_numberElements pNonnegative_number;
	private ExponentElements pExponent;
	private Digit_sequenceElements pDigit_sequence;
	private DigitElements pDigit;
	private SignElements pSign;
	private FlagElements pFlag;
	private TerminalRule tWsp;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public SvgPathGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//svg_path:
	//	moveto_drawto_command_groups=moveto_drawto_command_groups?;
	public Svg_pathElements getSvg_pathAccess() {
		return (pSvg_path != null) ? pSvg_path : (pSvg_path = new Svg_pathElements());
	}
	
	public ParserRule getSvg_pathRule() {
		return getSvg_pathAccess().getRule();
	}

	//moveto_drawto_command_groups:
	//	commands+=moveto_drawto_command_group;
	public Moveto_drawto_command_groupsElements getMoveto_drawto_command_groupsAccess() {
		return (pMoveto_drawto_command_groups != null) ? pMoveto_drawto_command_groups : (pMoveto_drawto_command_groups = new Moveto_drawto_command_groupsElements());
	}
	
	public ParserRule getMoveto_drawto_command_groupsRule() {
		return getMoveto_drawto_command_groupsAccess().getRule();
	}

	//moveto_drawto_command_group:
	//	moveto=moveto drawto_commands=drawto_commands?;
	public Moveto_drawto_command_groupElements getMoveto_drawto_command_groupAccess() {
		return (pMoveto_drawto_command_group != null) ? pMoveto_drawto_command_group : (pMoveto_drawto_command_group = new Moveto_drawto_command_groupElements());
	}
	
	public ParserRule getMoveto_drawto_command_groupRule() {
		return getMoveto_drawto_command_groupAccess().getRule();
	}

	//moveto:
	//	("M" | "m") point=coordinate_pair comma? lineto_argument_sequence=lineto_argument_sequence;
	public MovetoElements getMovetoAccess() {
		return (pMoveto != null) ? pMoveto : (pMoveto = new MovetoElements());
	}
	
	public ParserRule getMovetoRule() {
		return getMovetoAccess().getRule();
	}

	//lineto_argument_sequence:
	//	pairs+=coordinate_pair (comma? pairs+=coordinate_pair)*;
	public Lineto_argument_sequenceElements getLineto_argument_sequenceAccess() {
		return (pLineto_argument_sequence != null) ? pLineto_argument_sequence : (pLineto_argument_sequence = new Lineto_argument_sequenceElements());
	}
	
	public ParserRule getLineto_argument_sequenceRule() {
		return getLineto_argument_sequenceAccess().getRule();
	}

	//drawto_commands:
	//	drawto_commands+=drawto_command+;
	public Drawto_commandsElements getDrawto_commandsAccess() {
		return (pDrawto_commands != null) ? pDrawto_commands : (pDrawto_commands = new Drawto_commandsElements());
	}
	
	public ParserRule getDrawto_commandsRule() {
		return getDrawto_commandsAccess().getRule();
	}

	//drawto_command:
	//	closepath | lineto | horizontal_lineto | vertical_lineto | curveto | smooth_curveto | quadratic_bezier_curveto |
	//	smooth_quadratic_bezier_curveto | elliptical_arc;
	public Drawto_commandElements getDrawto_commandAccess() {
		return (pDrawto_command != null) ? pDrawto_command : (pDrawto_command = new Drawto_commandElements());
	}
	
	public ParserRule getDrawto_commandRule() {
		return getDrawto_commandAccess().getRule();
	}

	//closepath:
	//	{closepath} ("Z" | "z");
	public ClosepathElements getClosepathAccess() {
		return (pClosepath != null) ? pClosepath : (pClosepath = new ClosepathElements());
	}
	
	public ParserRule getClosepathRule() {
		return getClosepathAccess().getRule();
	}

	//lineto:
	//	("L" | "l") lineto_argument_sequence=lineto_argument_sequence;
	public LinetoElements getLinetoAccess() {
		return (pLineto != null) ? pLineto : (pLineto = new LinetoElements());
	}
	
	public ParserRule getLinetoRule() {
		return getLinetoAccess().getRule();
	}

	//horizontal_lineto:
	//	("H" | "h") horizontal_lineto_argument_sequence=horizontal_lineto_argument_sequence;
	public Horizontal_linetoElements getHorizontal_linetoAccess() {
		return (pHorizontal_lineto != null) ? pHorizontal_lineto : (pHorizontal_lineto = new Horizontal_linetoElements());
	}
	
	public ParserRule getHorizontal_linetoRule() {
		return getHorizontal_linetoAccess().getRule();
	}

	//horizontal_lineto_argument_sequence:
	//	coordinates+=coordinate (comma? coordinates+=coordinate)*;
	public Horizontal_lineto_argument_sequenceElements getHorizontal_lineto_argument_sequenceAccess() {
		return (pHorizontal_lineto_argument_sequence != null) ? pHorizontal_lineto_argument_sequence : (pHorizontal_lineto_argument_sequence = new Horizontal_lineto_argument_sequenceElements());
	}
	
	public ParserRule getHorizontal_lineto_argument_sequenceRule() {
		return getHorizontal_lineto_argument_sequenceAccess().getRule();
	}

	//vertical_lineto:
	//	("V" | "v") vertical_lineto_argument_sequence=vertical_lineto_argument_sequence;
	public Vertical_linetoElements getVertical_linetoAccess() {
		return (pVertical_lineto != null) ? pVertical_lineto : (pVertical_lineto = new Vertical_linetoElements());
	}
	
	public ParserRule getVertical_linetoRule() {
		return getVertical_linetoAccess().getRule();
	}

	//vertical_lineto_argument_sequence:
	//	coordinates+=coordinate (comma? coordinates+=coordinate)*;
	public Vertical_lineto_argument_sequenceElements getVertical_lineto_argument_sequenceAccess() {
		return (pVertical_lineto_argument_sequence != null) ? pVertical_lineto_argument_sequence : (pVertical_lineto_argument_sequence = new Vertical_lineto_argument_sequenceElements());
	}
	
	public ParserRule getVertical_lineto_argument_sequenceRule() {
		return getVertical_lineto_argument_sequenceAccess().getRule();
	}

	//curveto:
	//	("C" | "c") curveto_argument_sequence=curveto_argument_sequence;
	public CurvetoElements getCurvetoAccess() {
		return (pCurveto != null) ? pCurveto : (pCurveto = new CurvetoElements());
	}
	
	public ParserRule getCurvetoRule() {
		return getCurvetoAccess().getRule();
	}

	//curveto_argument_sequence:
	//	curveto_arguments+=curveto_argument (comma? curveto_arguments+=curveto_argument)*;
	public Curveto_argument_sequenceElements getCurveto_argument_sequenceAccess() {
		return (pCurveto_argument_sequence != null) ? pCurveto_argument_sequence : (pCurveto_argument_sequence = new Curveto_argument_sequenceElements());
	}
	
	public ParserRule getCurveto_argument_sequenceRule() {
		return getCurveto_argument_sequenceAccess().getRule();
	}

	//curveto_argument:
	//	c1=coordinate_pair comma? c2=coordinate_pair comma? c3=coordinate_pair;
	public Curveto_argumentElements getCurveto_argumentAccess() {
		return (pCurveto_argument != null) ? pCurveto_argument : (pCurveto_argument = new Curveto_argumentElements());
	}
	
	public ParserRule getCurveto_argumentRule() {
		return getCurveto_argumentAccess().getRule();
	}

	//smooth_curveto:
	//	("S" | "s") smooth_curveto_argument_sequence=smooth_curveto_argument_sequence;
	public Smooth_curvetoElements getSmooth_curvetoAccess() {
		return (pSmooth_curveto != null) ? pSmooth_curveto : (pSmooth_curveto = new Smooth_curvetoElements());
	}
	
	public ParserRule getSmooth_curvetoRule() {
		return getSmooth_curvetoAccess().getRule();
	}

	//smooth_curveto_argument_sequence:
	//	smooth_curveto_arguments+=smooth_curveto_argument (comma? smooth_curveto_arguments+=smooth_curveto_argument)*;
	public Smooth_curveto_argument_sequenceElements getSmooth_curveto_argument_sequenceAccess() {
		return (pSmooth_curveto_argument_sequence != null) ? pSmooth_curveto_argument_sequence : (pSmooth_curveto_argument_sequence = new Smooth_curveto_argument_sequenceElements());
	}
	
	public ParserRule getSmooth_curveto_argument_sequenceRule() {
		return getSmooth_curveto_argument_sequenceAccess().getRule();
	}

	//smooth_curveto_argument:
	//	c1=coordinate_pair comma? c2=coordinate_pair;
	public Smooth_curveto_argumentElements getSmooth_curveto_argumentAccess() {
		return (pSmooth_curveto_argument != null) ? pSmooth_curveto_argument : (pSmooth_curveto_argument = new Smooth_curveto_argumentElements());
	}
	
	public ParserRule getSmooth_curveto_argumentRule() {
		return getSmooth_curveto_argumentAccess().getRule();
	}

	//quadratic_bezier_curveto:
	//	("Q" | "q") quadratic_bezier_curveto_argument_sequence;
	public Quadratic_bezier_curvetoElements getQuadratic_bezier_curvetoAccess() {
		return (pQuadratic_bezier_curveto != null) ? pQuadratic_bezier_curveto : (pQuadratic_bezier_curveto = new Quadratic_bezier_curvetoElements());
	}
	
	public ParserRule getQuadratic_bezier_curvetoRule() {
		return getQuadratic_bezier_curvetoAccess().getRule();
	}

	//quadratic_bezier_curveto_argument_sequence:
	//	quadratic_bezier_curveto_arguments+=quadratic_bezier_curveto_argument (comma?
	//	quadratic_bezier_curveto_arguments+=quadratic_bezier_curveto_argument)*;
	public Quadratic_bezier_curveto_argument_sequenceElements getQuadratic_bezier_curveto_argument_sequenceAccess() {
		return (pQuadratic_bezier_curveto_argument_sequence != null) ? pQuadratic_bezier_curveto_argument_sequence : (pQuadratic_bezier_curveto_argument_sequence = new Quadratic_bezier_curveto_argument_sequenceElements());
	}
	
	public ParserRule getQuadratic_bezier_curveto_argument_sequenceRule() {
		return getQuadratic_bezier_curveto_argument_sequenceAccess().getRule();
	}

	//quadratic_bezier_curveto_argument:
	//	c1=coordinate_pair comma? c2=coordinate_pair;
	public Quadratic_bezier_curveto_argumentElements getQuadratic_bezier_curveto_argumentAccess() {
		return (pQuadratic_bezier_curveto_argument != null) ? pQuadratic_bezier_curveto_argument : (pQuadratic_bezier_curveto_argument = new Quadratic_bezier_curveto_argumentElements());
	}
	
	public ParserRule getQuadratic_bezier_curveto_argumentRule() {
		return getQuadratic_bezier_curveto_argumentAccess().getRule();
	}

	//smooth_quadratic_bezier_curveto:
	//	("T" | "t") smooth_quadratic_bezier_curveto_argument_sequence=smooth_quadratic_bezier_curveto_argument_sequence;
	public Smooth_quadratic_bezier_curvetoElements getSmooth_quadratic_bezier_curvetoAccess() {
		return (pSmooth_quadratic_bezier_curveto != null) ? pSmooth_quadratic_bezier_curveto : (pSmooth_quadratic_bezier_curveto = new Smooth_quadratic_bezier_curvetoElements());
	}
	
	public ParserRule getSmooth_quadratic_bezier_curvetoRule() {
		return getSmooth_quadratic_bezier_curvetoAccess().getRule();
	}

	//smooth_quadratic_bezier_curveto_argument_sequence:
	//	coordinate_pairs+=coordinate_pair (comma? coordinate_pairs+=coordinate_pair)*;
	public Smooth_quadratic_bezier_curveto_argument_sequenceElements getSmooth_quadratic_bezier_curveto_argument_sequenceAccess() {
		return (pSmooth_quadratic_bezier_curveto_argument_sequence != null) ? pSmooth_quadratic_bezier_curveto_argument_sequence : (pSmooth_quadratic_bezier_curveto_argument_sequence = new Smooth_quadratic_bezier_curveto_argument_sequenceElements());
	}
	
	public ParserRule getSmooth_quadratic_bezier_curveto_argument_sequenceRule() {
		return getSmooth_quadratic_bezier_curveto_argument_sequenceAccess().getRule();
	}

	//elliptical_arc:
	//	("A" | "a") elliptical_arc_argument_sequence=elliptical_arc_argument_sequence;
	public Elliptical_arcElements getElliptical_arcAccess() {
		return (pElliptical_arc != null) ? pElliptical_arc : (pElliptical_arc = new Elliptical_arcElements());
	}
	
	public ParserRule getElliptical_arcRule() {
		return getElliptical_arcAccess().getRule();
	}

	//elliptical_arc_argument_sequence:
	//	elliptical_arc_arguments+=elliptical_arc_argument (comma? elliptical_arc_arguments+=elliptical_arc_argument)*;
	public Elliptical_arc_argument_sequenceElements getElliptical_arc_argument_sequenceAccess() {
		return (pElliptical_arc_argument_sequence != null) ? pElliptical_arc_argument_sequence : (pElliptical_arc_argument_sequence = new Elliptical_arc_argument_sequenceElements());
	}
	
	public ParserRule getElliptical_arc_argument_sequenceRule() {
		return getElliptical_arc_argument_sequenceAccess().getRule();
	}

	//elliptical_arc_argument:
	//	rx=nonnegative_number comma? ry=nonnegative_number comma? rotation=number comma largearcflag=flag comma?
	//	sweepflag=flag comma? coordinate_pair=coordinate_pair;
	public Elliptical_arc_argumentElements getElliptical_arc_argumentAccess() {
		return (pElliptical_arc_argument != null) ? pElliptical_arc_argument : (pElliptical_arc_argument = new Elliptical_arc_argumentElements());
	}
	
	public ParserRule getElliptical_arc_argumentRule() {
		return getElliptical_arc_argumentAccess().getRule();
	}

	//coordinate_pair:
	//	c1=coordinate comma? c2=coordinate;
	public Coordinate_pairElements getCoordinate_pairAccess() {
		return (pCoordinate_pair != null) ? pCoordinate_pair : (pCoordinate_pair = new Coordinate_pairElements());
	}
	
	public ParserRule getCoordinate_pairRule() {
		return getCoordinate_pairAccess().getRule();
	}

	//comma:
	//	",";
	public CommaElements getCommaAccess() {
		return (pComma != null) ? pComma : (pComma = new CommaElements());
	}
	
	public ParserRule getCommaRule() {
		return getCommaAccess().getRule();
	}

	//coordinate:
	//	number;
	public CoordinateElements getCoordinateAccess() {
		return (pCoordinate != null) ? pCoordinate : (pCoordinate = new CoordinateElements());
	}
	
	public ParserRule getCoordinateRule() {
		return getCoordinateAccess().getRule();
	}

	//number:
	//	sign=sign? nonnegative_number=nonnegative_number;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//nonnegative_number:
	//	intseq=digit_sequence ("." floatseq=digit_sequence)? exponent=exponent?;
	public Nonnegative_numberElements getNonnegative_numberAccess() {
		return (pNonnegative_number != null) ? pNonnegative_number : (pNonnegative_number = new Nonnegative_numberElements());
	}
	
	public ParserRule getNonnegative_numberRule() {
		return getNonnegative_numberAccess().getRule();
	}

	//exponent:
	//	("e" | "E") sign=sign? digit_sequence=digit_sequence;
	public ExponentElements getExponentAccess() {
		return (pExponent != null) ? pExponent : (pExponent = new ExponentElements());
	}
	
	public ParserRule getExponentRule() {
		return getExponentAccess().getRule();
	}

	//digit_sequence:
	//	digits+=digit;
	public Digit_sequenceElements getDigit_sequenceAccess() {
		return (pDigit_sequence != null) ? pDigit_sequence : (pDigit_sequence = new Digit_sequenceElements());
	}
	
	public ParserRule getDigit_sequenceRule() {
		return getDigit_sequenceAccess().getRule();
	}

	//digit:
	//	"0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
	public DigitElements getDigitAccess() {
		return (pDigit != null) ? pDigit : (pDigit = new DigitElements());
	}
	
	public ParserRule getDigitRule() {
		return getDigitAccess().getRule();
	}

	//sign:
	//	"+" | "-";
	public SignElements getSignAccess() {
		return (pSign != null) ? pSign : (pSign = new SignElements());
	}
	
	public ParserRule getSignRule() {
		return getSignAccess().getRule();
	}

	//flag:
	//	"0" | "1";
	public FlagElements getFlagAccess() {
		return (pFlag != null) ? pFlag : (pFlag = new FlagElements());
	}
	
	public ParserRule getFlagRule() {
		return getFlagAccess().getRule();
	}

	//terminal wsp:
	//	" " | "\t" | "\r" | "\n";
	public TerminalRule getWspRule() {
		return (tWsp != null) ? tWsp : (tWsp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "wsp"));
	} 
}
